(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,a,s=e[0],l=e[1],u=e[2],d=0,p=[];d<s.length;d++)a=s[d],Object.prototype.hasOwnProperty.call(i,a)&&i[a]&&p.push(i[a][0]),i[a]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(c&&c(e);p.length;)p.shift()();return o.push.apply(o,u||[]),t()}function t(){for(var n,e=0;e<o.length;e++){for(var t=o[e],r=!0,s=1;s<t.length;s++){var l=t[s];0!==i[l]&&(r=!1)}r&&(o.splice(e--,1),n=a(a.s=t[0]))}return n}var r={},i={1:0},o=[];function a(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.e=function(n){var e=[],t=i[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=i[n]=[e,r]}));e.push(t[2]=r);var o,s=document.createElement("script");s.charset="utf-8",s.timeout=120,a.nc&&s.setAttribute("nonce",a.nc),s.src=function(n){return a.p+"assets/js/"+({}[n]||n)+"."+{2:"b05449e5",3:"d6f5b5d5",4:"07797cc4",5:"7fea844f",6:"a9b65ad5",7:"5cadde86",8:"854aa86e",9:"537c0f11",10:"7bedbb9d",11:"c4a64ff8",12:"c26fc478",13:"edc03e04",14:"7954f8f0",15:"07329b99",16:"d00a148d",17:"ad532bcc",18:"fd831488",19:"319839ea",20:"f4013685",21:"358a64e4",22:"f00e6f69",23:"f0ceb4ab",24:"5b971d39",25:"ad3be1af",26:"f11368bd",27:"c815b4b9",28:"d1c18619",29:"42b00224",30:"c98026e8",31:"aaec861f",32:"781c8b02",33:"d0c4de9e",34:"deda3cec",35:"faf47001",36:"b04b7093",37:"e21014bd",38:"f1426c4e",39:"ff1f7835",40:"fca435a9",41:"7808a75e",42:"5e13464a",43:"a2f42e5b",44:"b564a870",45:"c7c48bb3",46:"64fb22d2",47:"23312609",48:"044bad74",49:"467cdbb7",50:"28fc5df9",51:"17b80b11",52:"8a152a85"}[n]+".js"}(n);var l=new Error;o=function(e){s.onerror=s.onload=null,clearTimeout(u);var t=i[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+o+")",l.name="ChunkLoadError",l.type=r,l.request=o,t[1](l)}i[n]=void 0}};var u=setTimeout((function(){o({type:"timeout",target:s})}),12e4);s.onerror=s.onload=o,document.head.appendChild(s)}return Promise.all(e)},a.m=n,a.c=r,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)a.d(t,r,function(e){return n[e]}.bind(null,r));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="/",a.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var u=0;u<s.length;u++)e(s[u]);var c=l;o.push([131,0]),t()}([function(n,e,t){"use strict";function r(n,e,t,r,i,o,a,s){var l,u="function"==typeof n?n.options:n;if(e&&(u.render=e,u.staticRenderFns=t,u._compiled=!0),r&&(u.functional=!0),o&&(u._scopeId="data-v-"+o),a?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),i&&i.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(a)},u._ssrRegister=l):i&&(l=s?function(){i.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:i),l)if(u.functional){u._injectStyles=l;var c=u.render;u.render=function(n,e){return l.call(e),c(n,e)}}else{var d=u.beforeCreate;u.beforeCreate=d?[].concat(d,l):[l]}return{exports:n,options:u}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=function(n){return n&&n.Math===Math&&n};n.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof global&&global)||r("object"==typeof this&&this)||function(){return this}()||Function("return this")()},function(n,e,t){"use strict";n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){"use strict";var r="object"==typeof document&&document.all;n.exports=void 0===r&&void 0!==r?function(n){return"function"==typeof n||n===r}:function(n){return"function"==typeof n}},function(n,e,t){"use strict";var r=t(10),i=String,o=TypeError;n.exports=function(n){if(r(n))return n;throw new o(i(n)+" is not an object")}},function(n,e,t){"use strict";var r=t(12),i=t(1),o=t(146),a=t(4),s=t(3),l=t(87),u=t(128),c=t(148),d=t(2),p=t(11),f=t(17),h=t(88).IteratorPrototype,m=t(7),g=t(24),v=f("toStringTag"),b=TypeError,y=i.Iterator,_=g||!s(y)||y.prototype!==h||!d((function(){y({})})),x=function(){if(o(this,h),l(this)===h)throw new b("Abstract class Iterator not directly constructable")},w=function(n,e){m?u(h,n,{configurable:!0,get:function(){return e},set:function(e){if(a(this),this===h)throw new b("You can't redefine this property");p(this,n)?this[n]=e:c(this,n,e)}}):h[n]=e};p(h,v)||w(v,"Iterator"),!_&&p(h,"constructor")&&h.constructor!==Object||w("constructor",x),x.prototype=h,r({global:!0,constructor:!0,forced:_},{Iterator:x})},function(n,e,t){"use strict";var r=t(33),i=Function.prototype,o=i.call,a=r&&i.bind.bind(o,o);n.exports=r?a:function(n){return function(){return o.apply(n,arguments)}}},function(n,e,t){"use strict";var r=t(2);n.exports=!r((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){"use strict";var r=t(33),i=Function.prototype.call;n.exports=r?i.bind(i):function(){return i.apply(i,arguments)}},function(n,e,t){"use strict";var r=t(3),i=t(50),o=TypeError;n.exports=function(n){if(r(n))return n;throw new o(i(n)+" is not a function")}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){"use strict";var r=t(6),i=t(31),o=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return o(i(n),e)}},function(n,e,t){"use strict";var r=t(1),i=t(70).f,o=t(25),a=t(46),s=t(52),l=t(84),u=t(145);n.exports=function(n,e){var t,c,d,p,f,h=n.target,m=n.global,g=n.stat;if(t=m?r:g?r[h]||s(h,{}):r[h]&&r[h].prototype)for(c in e){if(p=e[c],d=n.dontCallGetSet?(f=i(t,c))&&f.value:t[c],!u(m?c:h+(g?".":"#")+c,n.forced)&&void 0!==d){if(typeof p==typeof d)continue;l(p,d)}(n.sham||d&&d.sham)&&o(p,"sham",!0),a(t,c,p,n)}}},function(n,e,t){"use strict";var r=t(12),i=t(8),o=t(9),a=t(4),s=t(26),l=t(89),u=t(90),c=t(24),d=t(14),p=t(91),f=t(27),h=!c&&!p("filter",(function(){})),m=!c&&!h&&f("filter",TypeError),g=c||h||m,v=l((function(){for(var n,e,t=this.iterator,r=this.predicate,o=this.next;;){if(n=a(i(o,t)),this.done=!!n.done)return;if(e=n.value,u(t,r,[e,this.counter++],!0))return e}}));r({target:"Iterator",proto:!0,real:!0,forced:g},{filter:function(n){a(this);try{o(n)}catch(n){d(this,"throw",n)}return m?i(m,this,n):new v(s(this),{predicate:n})}})},function(n,e,t){"use strict";var r=t(8),i=t(4),o=t(38);n.exports=function(n,e,t){var a,s;i(n);try{if(!(a=o(n,"return"))){if("throw"===e)throw t;return t}a=r(a,n)}catch(n){s=!0,a=n}if("throw"===e)throw t;if(s)throw a;return i(a),t}},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(98),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();n.exports=o},function(n,e,t){"use strict";var r=t(1),i=t(77),o=t(11),a=t(78),s=t(74),l=t(73),u=r.Symbol,c=i("wks"),d=l?u.for||u:u&&u.withoutSetter||a;n.exports=function(n){return o(c,n)||(c[n]=s&&o(u,n)?u[n]:d("Symbol."+n)),c[n]}},function(n,e,t){"use strict";var r=t(7),i=t(79),o=t(81),a=t(4),s=t(71),l=TypeError,u=Object.defineProperty,c=Object.getOwnPropertyDescriptor;e.f=r?o?function(n,e,t){if(a(n),e=s(e),a(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=c(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return u(n,e,t)}:u:function(n,e,t){if(a(n),e=s(e),a(t),i)try{return u(n,e,t)}catch(n){}if("get"in t||"set"in t)throw new l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(198),i=t(201);n.exports=function(n,e){var t=i(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return o})),t.d(e,"j",(function(){return a})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return u})),t.d(e,"i",(function(){return c})),t.d(e,"c",(function(){return d})),t.d(e,"f",(function(){return p})),t.d(e,"l",(function(){return f})),t.d(e,"m",(function(){return h})),t.d(e,"d",(function(){return g})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return _}));t(45),t(5),t(13),t(22),t(21);const r=/#.*$/,i=/\.(md|html)$/,o=/\/$/,a=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(i,"")}function l(n){return a.test(n)}function u(n){return/^mailto:/.test(n)}function c(n){return/^tel:/.test(n)}function d(n){if(l(n))return n;if(!n)return"404";const e=n.match(r),t=e?e[0]:"",i=s(n);return o.test(i)?n:i+".html"+t}function p(n,e){const t=n.hash,i=function(n){const e=n&&n.match(r);if(e)return e[0]}(e);if(i&&t!==i)return!1;return s(n.path)===s(e)}function f(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){const r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;const i=e.split("/");t&&i[i.length-1]||i.pop();const o=n.replace(/^\//,"").split("/");for(let n=0;n<o.length;n++){const e=o[n];".."===e?i.pop():"."!==e&&i.push(e)}""!==i[0]&&i.unshift("");return i.join("/")}(e,t));const r=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===r)return Object.assign({},n[e],{type:"page",path:d(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function h(n,e,t,r){const{pages:i,themeConfig:o}=t,a=r&&o.locales&&o.locales[r]||o;if("auto"===(n.frontmatter.sidebar||a.sidebar||o.sidebar))return m(n);const s=a.sidebar||o.sidebar;if(s){const{base:t,config:r}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var t;return{}}(e,s);return"auto"===r?m(n):r?r.map(n=>function n(e,t,r,i=1){if("string"==typeof e)return f(t,e,r);if(Array.isArray(e))return Object.assign(f(t,e[0],r),{title:e[1]});{i>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const o=e.children||[];return 0===o.length&&e.path?Object.assign(f(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:o.map(e=>n(e,t,r,i+1)),collapsable:!1!==e.collapsable}}}(n,i,t)):[]}return[]}function m(n){const e=g(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function g(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function _(n,e){return y(e)-y(n)}},function(n,e,t){"use strict";var r=t(12),i=t(8),o=t(9),a=t(4),s=t(26),l=t(89),u=t(90),c=t(14),d=t(91),p=t(27),f=t(24),h=!f&&!d("map",(function(){})),m=!f&&!h&&p("map",TypeError),g=f||h||m,v=l((function(){var n=this.iterator,e=a(i(this.next,n));if(!(this.done=!!e.done))return u(n,this.mapper,[e.value,this.counter++],!0)}));r({target:"Iterator",proto:!0,real:!0,forced:g},{map:function(n){a(this);try{o(n)}catch(n){c(this,"throw",n)}return m?i(m,this,n):new v(s(this),{mapper:n})}})},function(n,e,t){"use strict";var r=t(12),i=t(8),o=t(47),a=t(9),s=t(4),l=t(26),u=t(14),c=t(27)("forEach",TypeError);r({target:"Iterator",proto:!0,real:!0,forced:c},{forEach:function(n){s(this);try{a(n)}catch(n){u(this,"throw",n)}if(c)return i(c,this,n);var e=l(this),t=0;o(e,(function(e){n(e,t++)}),{IS_RECORD:!0})}})},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){"use strict";n.exports=!1},function(n,e,t){"use strict";var r=t(7),i=t(18),o=t(34);n.exports=r?function(n,e,t){return i.f(n,e,o(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){"use strict";n.exports=function(n){return{iterator:n,next:n.next,done:!1}}},function(n,e,t){"use strict";var r=t(1);n.exports=function(n,e){var t=r.Iterator,i=t&&t.prototype,o=i&&i[n],a=!1;if(o)try{o.call({next:function(){return{done:!0}},return:function(){a=!0}},-1)}catch(n){n instanceof e||(a=!1)}if(!a)return o}},function(n,e,t){var r=t(30),i=t(183),o=t(184),a=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":a&&a in Object(n)?i(n):o(n)}},function(n,e,t){"use strict";var r=t(6),i=r({}.toString),o=r("".slice);n.exports=function(n){return o(i(n),8,-1)}},function(n,e,t){var r=t(16).Symbol;n.exports=r},function(n,e,t){"use strict";var r=t(48),i=Object;n.exports=function(n){return i(r(n))}},function(n,e,t){"use strict";var r=t(143);n.exports=function(n){return r(n.length)}},function(n,e,t){"use strict";var r=t(2);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){"use strict";n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){"use strict";var r=t(66),i=t(48);n.exports=function(n){return r(i(n))}},function(n,e,t){"use strict";var r=t(1),i=t(3),o=function(n){return i(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?o(r[n]):r[n]&&r[n][e]}},function(n,e,t){"use strict";var r=t(6);n.exports=r({}.isPrototypeOf)},function(n,e,t){"use strict";var r=t(9),i=t(49);n.exports=function(n,e){var t=n[e];return i(t)?void 0:r(t)}},function(n,e,t){var r=t(188),i=t(189),o=t(190),a=t(191),s=t(192);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(100);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(19)(Object,"create");n.exports=r},function(n,e,t){var r=t(210);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(63);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r,i;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(i="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(n,e,t){return n<e?e:n>t?t:n}function o(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=i(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),u=l.querySelector(r.barSelector),c=r.speed,d=r.easing;return l.offsetWidth,a((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(u,function(n,e,t){var i;return(i="translate3d"===r.positionUsing?{transform:"translate3d("+o(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+o(n)+"%,0)"}:{"margin-left":o(n)+"%"}).transition="all "+e+"ms "+t,i}(n,c,d)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+c+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),c)}),c)):setTimeout(e,c)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*i(Math.random()*e,.1,.95)),e=i(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");u(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var i,a=e.querySelector(r.barSelector),l=n?"-100":o(t.status||0),c=document.querySelector(r.parent);return s(a,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(i=e.querySelector(r.spinnerSelector))&&p(i),c!=document.body&&u(c,"nprogress-custom-parent"),c.appendChild(e),e},t.remove=function(){c(document.documentElement,"nprogress-busy"),c(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&p(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var a=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,i=n.length,o=e.charAt(0).toUpperCase()+e.slice(1);i--;)if((r=n[i]+o)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,i,o=arguments;if(2==o.length)for(t in e)void 0!==(i=e[t])&&e.hasOwnProperty(t)&&r(n,t,i);else r(n,o[1],o[2])}}();function l(n,e){return("string"==typeof n?n:d(n)).indexOf(" "+e+" ")>=0}function u(n,e){var t=d(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function c(n,e){var t,r=d(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function d(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function p(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=i)},function(n,e,t){"use strict";var r=t(12),i=t(31),o=t(32),a=t(177),s=t(179);r({target:"Array",proto:!0,arity:1,forced:t(2)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=i(this),t=o(e),r=arguments.length;s(t+r);for(var l=0;l<r;l++)e[t]=arguments[l],t++;return a(e,t),t}})},function(n,e,t){"use strict";var r=t(3),i=t(18),o=t(82),a=t(52);n.exports=function(n,e,t,s){s||(s={});var l=s.enumerable,u=void 0!==s.name?s.name:e;if(r(t)&&o(t,u,s),s.global)l?n[e]=t:a(e,t);else{try{s.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:i.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){"use strict";var r=t(129),i=t(8),o=t(4),a=t(50),s=t(161),l=t(32),u=t(37),c=t(162),d=t(93),p=t(14),f=TypeError,h=function(n,e){this.stopped=n,this.result=e},m=h.prototype;n.exports=function(n,e,t){var g,v,b,y,_,x,w,E=t&&t.that,k=!(!t||!t.AS_ENTRIES),T=!(!t||!t.IS_RECORD),R=!(!t||!t.IS_ITERATOR),C=!(!t||!t.INTERRUPTED),S=r(e,E),$=function(n){return g&&p(g,"normal"),new h(!0,n)},A=function(n){return k?(o(n),C?S(n[0],n[1],$):S(n[0],n[1])):C?S(n,$):S(n)};if(T)g=n.iterator;else if(R)g=n;else{if(!(v=d(n)))throw new f(a(n)+" is not iterable");if(s(v)){for(b=0,y=l(n);y>b;b++)if((_=A(n[b]))&&u(m,_))return _;return new h(!1)}g=c(n,v)}for(x=T?n.next:g.next;!(w=i(x,g)).done;){try{_=A(w.value)}catch(n){p(g,"throw",n)}if("object"==typeof _&&_&&u(m,_))return _}return new h(!1)}},function(n,e,t){"use strict";var r=t(49),i=TypeError;n.exports=function(n){if(r(n))throw new i("Can't call method on "+n);return n}},function(n,e,t){"use strict";n.exports=function(n){return null==n}},function(n,e,t){"use strict";var r=String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){"use strict";var r=t(24),i=t(1),o=t(52),a=n.exports=i["__core-js_shared__"]||o("__core-js_shared__",{});(a.versions||(a.versions=[])).push({version:"3.45.1",mode:r?"pure":"global",copyright:"© 2014-2025 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.45.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){"use strict";var r=t(1),i=Object.defineProperty;n.exports=function(n,e){try{i(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){"use strict";var r=t(77),i=t(78),o=r("keys");n.exports=function(n){return o[n]||(o[n]=i(n))}},function(n,e,t){"use strict";n.exports={}},function(n,e,t){"use strict";n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var r=t(182),i=t(23),o=Object.prototype,a=o.hasOwnProperty,s=o.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return i(n)&&a.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(19)(t(16),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(202),i=t(209),o=t(211),a=t(212),s=t(213);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(15),i=t(63),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!i(n))||(a.test(n)||!o.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(28),i=t(23);n.exports=function(n){return"symbol"==typeof n||i(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";t.r(e);var r={name:"FloatingSocialIcons",data:()=>({qrVisible:{bilibili:!1,wechat:!1}}),methods:{showQR(n){this.qrVisible[n]=!0},hideQR(n){this.qrVisible[n]=!1}}},i=(t(279),t(0)),o=Object(i.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"floating-social-icons"},[e("div",{staticClass:"social-item",on:{mouseenter:function(e){return n.showQR("bilibili")},mouseleave:function(e){return n.hideQR("bilibili")}}},[e("svg",{staticClass:"social-icon bilibili",attrs:{viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"}},[e("path",{attrs:{d:"M6.5 4.5C5.7 4.5 5 5.2 5 6v12c0 .8.7 1.5 1.5 1.5h11c.8 0 1.5-.7 1.5-1.5V6c0-.8-.7-1.5-1.5-1.5h-11z",fill:"currentColor"}}),n._v(" "),e("rect",{attrs:{x:"7",y:"7",width:"10",height:"6",rx:"1",fill:"white"}}),n._v(" "),e("circle",{attrs:{cx:"9.5",cy:"9.5",r:"0.8",fill:"#00a1d6"}}),n._v(" "),e("circle",{attrs:{cx:"14.5",cy:"9.5",r:"0.8",fill:"#00a1d6"}}),n._v(" "),e("path",{attrs:{d:"M10.5 11.5c1 0 2 .5 2.5 1h-5c.5-.5 1.5-1 2.5-1z",fill:"#00a1d6"}}),n._v(" "),e("circle",{attrs:{cx:"8",cy:"3",r:"1",fill:"currentColor"}}),n._v(" "),e("circle",{attrs:{cx:"16",cy:"3",r:"1",fill:"currentColor"}}),n._v(" "),e("path",{attrs:{d:"M8 4V3M16 4V3",stroke:"currentColor","stroke-width":"1","stroke-linecap":"round"}}),n._v(" "),e("circle",{attrs:{cx:"9",cy:"16",r:"1",fill:"white"}}),n._v(" "),e("circle",{attrs:{cx:"15",cy:"16",r:"1",fill:"white"}})]),n._v(" "),e("div",{directives:[{name:"show",rawName:"v-show",value:n.qrVisible.bilibili,expression:"qrVisible.bilibili"}],staticClass:"qr-dropdown"},[e("img",{attrs:{src:"/img/base/bilibili-qr.png",alt:"B站二维码"}}),n._v(" "),e("p",[n._v("欢迎关注小破站")])])]),n._v(" "),e("div",{staticClass:"social-item",on:{mouseenter:function(e){return n.showQR("wechat")},mouseleave:function(e){return n.hideQR("wechat")}}},[e("svg",{staticClass:"social-icon wechat",attrs:{viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"}},[e("path",{attrs:{d:"M8.5 5C5.5 5 3 7.2 3 10c0 1.5.7 2.8 2 3.7L4.5 16l2.3-1.2c.6.2 1.2.2 1.8.2.2 0 .4 0 .6-.1-.1-.4-.2-.8-.2-1.2 0-2.8 2.5-5 5.5-5 .2 0 .4 0 .6.1C14.5 6.7 11.8 5 8.5 5z",fill:"currentColor"}}),n._v(" "),e("circle",{attrs:{cx:"6.5",cy:"9.5",r:"0.8",fill:"white"}}),n._v(" "),e("circle",{attrs:{cx:"10.5",cy:"9.5",r:"0.8",fill:"white"}}),n._v(" "),e("path",{attrs:{d:"M14.5 9.5c-2.5 0-4.5 1.7-4.5 3.8s2 3.8 4.5 3.8c.5 0 1-.1 1.4-.3L17.5 18l-.4-1.2c1-.7 1.6-1.7 1.6-2.8 0-2.1-2-3.8-4.5-3.8z",fill:"currentColor"}}),n._v(" "),e("circle",{attrs:{cx:"13",cy:"12.5",r:"0.5",fill:"white"}}),n._v(" "),e("circle",{attrs:{cx:"16",cy:"12.5",r:"0.5",fill:"white"}})]),n._v(" "),e("div",{directives:[{name:"show",rawName:"v-show",value:n.qrVisible.wechat,expression:"qrVisible.wechat"}],staticClass:"qr-dropdown"},[e("img",{attrs:{src:"/img/base/wechat-qr.png",alt:"微信公众号二维码"}}),n._v(" "),e("p",[n._v("欢迎关注公众号")])])])])}),[],!1,null,"cb9e887a",null);e.default=o.exports},function(n,e,t){"use strict";var r=t(6),i=t(2),o=t(29),a=Object,s=r("".split);n.exports=i((function(){return!a("z").propertyIsEnumerable(0)}))?function(n){return"String"===o(n)?s(n,""):a(n)}:a},function(n,e,t){"use strict";var r,i=t(4),o=t(149),a=t(55),s=t(54),l=t(151),u=t(80),c=t(53),d=c("IE_PROTO"),p=function(){},f=function(n){return"<script>"+n+"<\/script>"},h=function(n){n.write(f("")),n.close();var e=n.parentWindow.Object;return n=null,e},m=function(){try{r=new ActiveXObject("htmlfile")}catch(n){}var n,e;m="undefined"!=typeof document?document.domain&&r?h(r):((e=u("iframe")).style.display="none",l.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(f("document.F=Object")),n.close(),n.F):h(r);for(var t=a.length;t--;)delete m.prototype[a[t]];return m()};s[d]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(p.prototype=i(n),t=new p,p.prototype=null,t[d]=n):t=m(),void 0===e?t:o.f(t,e)}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,o=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,u=s||l||Function("return this")(),c=Object.prototype.toString,d=Math.max,p=Math.min,f=function(){return u.Date.now()};function h(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function m(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==c.call(n)}(n))return NaN;if(h(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=h(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=i.test(n);return s||o.test(n)?a(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,i,o,a,s,l,u=0,c=!1,g=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,o=i;return r=i=void 0,u=e,a=n.apply(o,t)}function y(n){return u=n,s=setTimeout(x,e),c?b(n):a}function _(n){var t=n-l;return void 0===l||t>=e||t<0||g&&n-u>=o}function x(){var n=f();if(_(n))return w(n);s=setTimeout(x,function(n){var t=e-(n-l);return g?p(t,o-(n-u)):t}(n))}function w(n){return s=void 0,v&&r?b(n):(r=i=void 0,a)}function E(){var n=f(),t=_(n);if(r=arguments,i=this,l=n,t){if(void 0===s)return y(l);if(g)return s=setTimeout(x,e),b(l)}return void 0===s&&(s=setTimeout(x,e)),a}return e=m(e)||0,h(t)&&(c=!!t.leading,o=(g="maxWait"in t)?d(m(t.maxWait)||0,e):o,v="trailing"in t?!!t.trailing:v),E.cancel=function(){void 0!==s&&clearTimeout(s),u=0,r=l=i=s=void 0},E.flush=function(){return void 0===s?a:w(f())},E}},function(n,e,t){"use strict";var r=t(7),i=t(8),o=t(132),a=t(34),s=t(35),l=t(71),u=t(11),c=t(79),d=Object.getOwnPropertyDescriptor;e.f=r?d:function(n,e){if(n=s(n),e=l(e),c)try{return d(n,e)}catch(n){}if(u(n,e))return a(!i(o.f,n,e),n[e])}},function(n,e,t){"use strict";var r=t(133),i=t(72);n.exports=function(n){var e=r(n,"string");return i(e)?e:e+""}},function(n,e,t){"use strict";var r=t(36),i=t(3),o=t(37),a=t(73),s=Object;n.exports=a?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return i(e)&&o(e.prototype,s(n))}},function(n,e,t){"use strict";var r=t(74);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){"use strict";var r=t(75),i=t(2),o=t(1).String;n.exports=!!Object.getOwnPropertySymbols&&!i((function(){var n=Symbol("symbol detection");return!o(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){"use strict";var r,i,o=t(1),a=t(76),s=o.process,l=o.Deno,u=s&&s.versions||l&&l.version,c=u&&u.v8;c&&(i=(r=c.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!i&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(i=+r[1]),n.exports=i},function(n,e,t){"use strict";var r=t(1).navigator,i=r&&r.userAgent;n.exports=i?String(i):""},function(n,e,t){"use strict";var r=t(51);n.exports=function(n,e){return r[n]||(r[n]=e||{})}},function(n,e,t){"use strict";var r=t(6),i=0,o=Math.random(),a=r(1.1.toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+a(++i+o,36)}},function(n,e,t){"use strict";var r=t(7),i=t(2),o=t(80);n.exports=!r&&!i((function(){return 7!==Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){"use strict";var r=t(1),i=t(10),o=r.document,a=i(o)&&i(o.createElement);n.exports=function(n){return a?o.createElement(n):{}}},function(n,e,t){"use strict";var r=t(7),i=t(2);n.exports=r&&i((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){"use strict";var r=t(6),i=t(2),o=t(3),a=t(11),s=t(7),l=t(135).CONFIGURABLE,u=t(136),c=t(83),d=c.enforce,p=c.get,f=String,h=Object.defineProperty,m=r("".slice),g=r("".replace),v=r([].join),b=s&&!i((function(){return 8!==h((function(){}),"length",{value:8}).length})),y=String(String).split("String"),_=n.exports=function(n,e,t){"Symbol("===m(f(e),0,7)&&(e="["+g(f(e),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!a(n,"name")||l&&n.name!==e)&&(s?h(n,"name",{value:e,configurable:!0}):n.name=e),b&&t&&a(t,"arity")&&n.length!==t.arity&&h(n,"length",{value:t.arity});try{t&&a(t,"constructor")&&t.constructor?s&&h(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=d(n);return a(r,"source")||(r.source=v(y,"string"==typeof e?e:"")),n};Function.prototype.toString=_((function(){return o(this)&&p(this).source||u(this)}),"toString")},function(n,e,t){"use strict";var r,i,o,a=t(137),s=t(1),l=t(10),u=t(25),c=t(11),d=t(51),p=t(53),f=t(54),h=s.TypeError,m=s.WeakMap;if(a||d.state){var g=d.state||(d.state=new m);g.get=g.get,g.has=g.has,g.set=g.set,r=function(n,e){if(g.has(n))throw new h("Object already initialized");return e.facade=n,g.set(n,e),e},i=function(n){return g.get(n)||{}},o=function(n){return g.has(n)}}else{var v=p("state");f[v]=!0,r=function(n,e){if(c(n,v))throw new h("Object already initialized");return e.facade=n,u(n,v,e),e},i=function(n){return c(n,v)?n[v]:{}},o=function(n){return c(n,v)}}n.exports={set:r,get:i,has:o,enforce:function(n){return o(n)?i(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=i(e)).type!==n)throw new h("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){"use strict";var r=t(11),i=t(138),o=t(70),a=t(18);n.exports=function(n,e,t){for(var s=i(e),l=a.f,u=o.f,c=0;c<s.length;c++){var d=s[c];r(n,d)||t&&r(t,d)||l(n,d,u(e,d))}}},function(n,e,t){"use strict";var r=t(6),i=t(11),o=t(35),a=t(140).indexOf,s=t(54),l=r([].push);n.exports=function(n,e){var t,r=o(n),u=0,c=[];for(t in r)!i(s,t)&&i(r,t)&&l(c,t);for(;e.length>u;)i(r,t=e[u++])&&(~a(c,t)||l(c,t));return c}},function(n,e,t){"use strict";var r=t(142);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){"use strict";var r=t(11),i=t(3),o=t(31),a=t(53),s=t(147),l=a("IE_PROTO"),u=Object,c=u.prototype;n.exports=s?u.getPrototypeOf:function(n){var e=o(n);if(r(e,l))return e[l];var t=e.constructor;return i(t)&&e instanceof t?t.prototype:e instanceof u?c:null}},function(n,e,t){"use strict";var r,i,o,a=t(2),s=t(3),l=t(10),u=t(67),c=t(87),d=t(46),p=t(17),f=t(24),h=p("iterator"),m=!1;[].keys&&("next"in(o=[].keys())?(i=c(c(o)))!==Object.prototype&&(r=i):m=!0),!l(r)||a((function(){var n={};return r[h].call(n)!==n}))?r={}:f&&(r=u(r)),s(r[h])||d(r,h,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:m}},function(n,e,t){"use strict";var r=t(8),i=t(67),o=t(25),a=t(152),s=t(17),l=t(83),u=t(38),c=t(88).IteratorPrototype,d=t(153),p=t(14),f=t(154),h=s("toStringTag"),m=l.set,g=function(n){var e=l.getterFor(n?"WrapForValidIterator":"IteratorHelper");return a(i(c),{next:function(){var t=e(this);if(n)return t.nextHandler();if(t.done)return d(void 0,!0);try{var r=t.nextHandler();return t.returnHandlerResult?r:d(r,t.done)}catch(n){throw t.done=!0,n}},return:function(){var t=e(this),i=t.iterator;if(t.done=!0,n){var o=u(i,"return");return o?r(o,i):d(void 0,!0)}if(t.inner)try{p(t.inner.iterator,"normal")}catch(n){return p(i,"throw",n)}if(t.openIters)try{f(t.openIters,"normal")}catch(n){return p(i,"throw",n)}return i&&p(i,"normal"),d(void 0,!0)}})},v=g(!0),b=g(!1);o(b,h,"Iterator Helper"),n.exports=function(n,e,t){var r=function(r,i){i?(i.iterator=r.iterator,i.next=r.next):i=r,i.type=e?"WrapForValidIterator":"IteratorHelper",i.returnHandlerResult=!!t,i.nextHandler=n,i.counter=0,i.done=!1,m(this,i)};return r.prototype=e?v:b,r}},function(n,e,t){"use strict";var r=t(4),i=t(14);n.exports=function(n,e,t,o){try{return o?e(r(t)[0],t[1]):e(t)}catch(e){i(n,"throw",e)}}},function(n,e,t){"use strict";n.exports=function(n,e){var t="function"==typeof Iterator&&Iterator.prototype[n];if(t)try{t.call({next:null},e).next()}catch(n){return!0}}},function(n,e,t){"use strict";n.exports={}},function(n,e,t){"use strict";var r=t(94),i=t(38),o=t(49),a=t(92),s=t(17)("iterator");n.exports=function(n){if(!o(n))return i(n,s)||i(n,"@@iterator")||a[r(n)]}},function(n,e,t){"use strict";var r=t(163),i=t(3),o=t(29),a=t(17)("toStringTag"),s=Object,l="Arguments"===o(function(){return arguments}());n.exports=r?o:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),a))?t:l?o(e):"Object"===(r=o(e))&&i(e.callee)?"Arguments":r}},function(n,e,t){"use strict";var r=t(33),i=Function.prototype,o=i.apply,a=i.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(o):function(){return a.apply(o,arguments)})},function(n,e,t){"use strict";var r=t(167),i=t(10),o=t(48),a=t(168);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return o(t),a(r),i(t)?(e?n(t,r):t.__proto__=r,t):t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,i=n.length;++t<r;)n[i+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(39),i=t(193),o=t(194),a=t(195),s=t(196),l=t(197);function u(n){var e=this.__data__=new r(n);this.size=e.size}u.prototype.clear=i,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=s,u.prototype.set=l,n.exports=u},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(28),i=t(58);n.exports=function(n){if(!i(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(214),i=t(23);n.exports=function n(e,t,o,a,s){return e===t||(null==e||null==t||!i(e)&&!i(t)?e!=e&&t!=t:r(e,t,o,a,n,s))}},function(n,e,t){var r=t(105),i=t(217),o=t(106);n.exports=function(n,e,t,a,s,l){var u=1&t,c=n.length,d=e.length;if(c!=d&&!(u&&d>c))return!1;var p=l.get(n),f=l.get(e);if(p&&f)return p==e&&f==n;var h=-1,m=!0,g=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++h<c;){var v=n[h],b=e[h];if(a)var y=u?a(b,v,h,e,n,l):a(v,b,h,n,e,l);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!i(e,(function(n,e){if(!o(g,e)&&(v===n||s(v,n,t,a,l)))return g.push(e)}))){m=!1;break}}else if(v!==b&&!s(v,b,t,a,l)){m=!1;break}}return l.delete(n),l.delete(e),m}},function(n,e,t){var r=t(59),i=t(215),o=t(216);function a(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}a.prototype.add=a.prototype.push=i,a.prototype.has=o,n.exports=a},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(227),i=t(233),o=t(111);n.exports=function(n){return o(n)?r(n):i(n)}},function(n,e,t){(function(n){var r=t(16),i=t(229),o=e&&!e.nodeType&&e,a=o&&"object"==typeof n&&n&&!n.nodeType&&n,s=a&&a.exports===o?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||i;n.exports=l}).call(this,t(68)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(230),i=t(231),o=t(232),a=o&&o.isTypedArray,s=a?i(a):r;n.exports=s},function(n,e,t){var r=t(101),i=t(61);n.exports=function(n){return null!=n&&i(n.length)&&!r(n)}},function(n,e,t){var r=t(19)(t(16),"Set");n.exports=r},function(n,e,t){var r=t(58);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(116),i=t(43);n.exports=function(n,e){for(var t=0,o=(e=r(e,n)).length;null!=n&&t<o;)n=n[i(e[t++])];return t&&t==o?n:void 0}},function(n,e,t){var r=t(15),i=t(62),o=t(244),a=t(247);n.exports=function(n,e){return r(n)?n:i(n,e)?[n]:o(a(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(180),i=t(185),o=t(256),a=t(264),s=t(273),l=t(130),u=o((function(n){var e=l(n);return s(e)&&(e=void 0),a(r(n,1,s,!0),i(e,2))}));n.exports=u},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},i=(t(280),t(0)),o=Object(i.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=o.exports},function(n,e,t){"use strict";t.r(e);t(5),t(13),t(22),t(21);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},i=(t(281),t(0)),o=Object(i.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,r){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=o.exports},function(n,e,t){"use strict";var r=t(12),i=t(8),o=t(47),a=t(9),s=t(4),l=t(26),u=t(14),c=t(27)("some",TypeError);r({target:"Iterator",proto:!0,real:!0,forced:c},{some:function(n){s(this);try{a(n)}catch(n){u(this,"throw",n)}if(c)return i(c,this,n);var e=l(this),t=0;return o(e,(function(e,r){if(n(e,t++))return r()}),{IS_RECORD:!0,INTERRUPTED:!0}).stopped}})},function(n,e,t){"use strict";var r=t(94),i=String;n.exports=function(n){if("Symbol"===r(n))throw new TypeError("Cannot convert a Symbol value to a string");return i(n)}},function(n,e,t){"use strict";var r=t(82),i=t(18);n.exports=function(n,e,t){return t.get&&r(t.get,e,{getter:!0}),t.set&&r(t.set,e,{setter:!0}),i.f(n,e,t)}},function(n,e,t){"use strict";var r=t(160),i=t(9),o=t(33),a=r(r.bind);n.exports=function(n,e){return i(n),void 0===e?n:o?a(n,e):function(){return n.apply(e,arguments)}}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(287)},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);e.f=o?function(n){var e=i(this,n);return!!e&&e.enumerable}:r},function(n,e,t){"use strict";var r=t(8),i=t(10),o=t(72),a=t(38),s=t(134),l=t(17),u=TypeError,c=l("toPrimitive");n.exports=function(n,e){if(!i(n)||o(n))return n;var t,l=a(n,c);if(l){if(void 0===e&&(e="default"),t=r(l,n,e),!i(t)||o(t))return t;throw new u("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e,t){"use strict";var r=t(8),i=t(3),o=t(10),a=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&i(t=n.toString)&&!o(s=r(t,n)))return s;if(i(t=n.valueOf)&&!o(s=r(t,n)))return s;if("string"!==e&&i(t=n.toString)&&!o(s=r(t,n)))return s;throw new a("Can't convert object to primitive value")}},function(n,e,t){"use strict";var r=t(7),i=t(11),o=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,s=i(o,"name"),l=s&&"something"===function(){}.name,u=s&&(!r||r&&a(o,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:u}},function(n,e,t){"use strict";var r=t(6),i=t(3),o=t(51),a=r(Function.toString);i(o.inspectSource)||(o.inspectSource=function(n){return a(n)}),n.exports=o.inspectSource},function(n,e,t){"use strict";var r=t(1),i=t(3),o=r.WeakMap;n.exports=i(o)&&/native code/.test(String(o))},function(n,e,t){"use strict";var r=t(36),i=t(6),o=t(139),a=t(144),s=t(4),l=i([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=o.f(s(n)),t=a.f;return t?l(e,t(n)):e}},function(n,e,t){"use strict";var r=t(85),i=t(55).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,i)}},function(n,e,t){"use strict";var r=t(35),i=t(141),o=t(32),a=function(n){return function(e,t,a){var s=r(e),l=o(s);if(0===l)return!n&&-1;var u,c=i(a,l);if(n&&t!=t){for(;l>c;)if((u=s[c++])!=u)return!0}else for(;l>c;c++)if((n||c in s)&&s[c]===t)return n||c||0;return!n&&-1}};n.exports={includes:a(!0),indexOf:a(!1)}},function(n,e,t){"use strict";var r=t(86),i=Math.max,o=Math.min;n.exports=function(n,e){var t=r(n);return t<0?i(t+e,0):o(t,e)}},function(n,e,t){"use strict";var r=Math.ceil,i=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?i:r)(e)}},function(n,e,t){"use strict";var r=t(86),i=Math.min;n.exports=function(n){var e=r(n);return e>0?i(e,9007199254740991):0}},function(n,e,t){"use strict";e.f=Object.getOwnPropertySymbols},function(n,e,t){"use strict";var r=t(2),i=t(3),o=/#|\.prototype\./,a=function(n,e){var t=l[s(n)];return t===c||t!==u&&(i(e)?r(e):!!e)},s=a.normalize=function(n){return String(n).replace(o,".").toLowerCase()},l=a.data={},u=a.NATIVE="N",c=a.POLYFILL="P";n.exports=a},function(n,e,t){"use strict";var r=t(37),i=TypeError;n.exports=function(n,e){if(r(e,n))return n;throw new i("Incorrect invocation")}},function(n,e,t){"use strict";var r=t(2);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){"use strict";var r=t(7),i=t(18),o=t(34);n.exports=function(n,e,t){r?i.f(n,e,o(0,t)):n[e]=t}},function(n,e,t){"use strict";var r=t(7),i=t(81),o=t(18),a=t(4),s=t(35),l=t(150);e.f=r&&!i?Object.defineProperties:function(n,e){a(n);for(var t,r=s(e),i=l(e),u=i.length,c=0;u>c;)o.f(n,t=i[c++],r[t]);return n}},function(n,e,t){"use strict";var r=t(85),i=t(55);n.exports=Object.keys||function(n){return r(n,i)}},function(n,e,t){"use strict";var r=t(36);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(46);n.exports=function(n,e,t){for(var i in e)r(n,i,e[i],t);return n}},function(n,e,t){"use strict";n.exports=function(n,e){return{value:n,done:e}}},function(n,e,t){"use strict";var r=t(14);n.exports=function(n,e,t){for(var i=n.length-1;i>=0;i--)if(void 0!==n[i])try{t=r(n[i].iterator,e,t)}catch(n){e="throw",t=n}if("throw"===e)throw t;return t}},function(n,e,t){"use strict";var r=t(12),i=t(156).left,o=t(157),a=t(75);r({target:"Array",proto:!0,forced:!t(158)&&a>79&&a<83||!o("reduce")},{reduce:function(n){var e=arguments.length;return i(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(9),i=t(31),o=t(66),a=t(32),s=TypeError,l="Reduce of empty array with no initial value",u=function(n){return function(e,t,u,c){var d=i(e),p=o(d),f=a(d);if(r(t),0===f&&u<2)throw new s(l);var h=n?f-1:0,m=n?-1:1;if(u<2)for(;;){if(h in p){c=p[h],h+=m;break}if(h+=m,n?h<0:f<=h)throw new s(l)}for(;n?h>=0:f>h;h+=m)h in p&&(c=t(c,p[h],h,d));return c}};n.exports={left:u(!1),right:u(!0)}},function(n,e,t){"use strict";var r=t(2);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){"use strict";var r=t(159);n.exports="NODE"===r},function(n,e,t){"use strict";var r=t(1),i=t(76),o=t(29),a=function(n){return i.slice(0,n.length)===n};n.exports=a("Bun/")?"BUN":a("Cloudflare-Workers")?"CLOUDFLARE":a("Deno/")?"DENO":a("Node.js/")?"NODE":r.Bun&&"string"==typeof Bun.version?"BUN":r.Deno&&"object"==typeof Deno.version?"DENO":"process"===o(r.process)?"NODE":r.window&&r.document?"BROWSER":"REST"},function(n,e,t){"use strict";var r=t(29),i=t(6);n.exports=function(n){if("Function"===r(n))return i(n)}},function(n,e,t){"use strict";var r=t(17),i=t(92),o=r("iterator"),a=Array.prototype;n.exports=function(n){return void 0!==n&&(i.Array===n||a[o]===n)}},function(n,e,t){"use strict";var r=t(8),i=t(9),o=t(4),a=t(50),s=t(93),l=TypeError;n.exports=function(n,e){var t=arguments.length<2?s(n):e;if(i(t))return o(r(t,n));throw new l(a(n)+" is not iterable")}},function(n,e,t){"use strict";var r={};r[t(17)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){"use strict";var r=t(12),i=t(47),o=t(9),a=t(4),s=t(26),l=t(14),u=t(27),c=t(95),d=t(2),p=TypeError,f=d((function(){[].keys().reduce((function(){}),void 0)})),h=!f&&u("reduce",p);r({target:"Iterator",proto:!0,real:!0,forced:f||h},{reduce:function(n){a(this);try{o(n)}catch(n){l(this,"throw",n)}var e=arguments.length<2,t=e?void 0:arguments[1];if(h)return c(h,this,e?[n]:[n,t]);var r=s(this),u=0;if(i(r,(function(r){e?(e=!1,t=r):t=n(t,r,u),u++}),{IS_RECORD:!0}),e)throw new p("Reduce of empty iterator with no initial value");return t}})},function(n,e,t){"use strict";var r=t(12),i=t(1),o=t(95),a=t(166),s=i.WebAssembly,l=7!==new Error("e",{cause:7}).cause,u=function(n,e){var t={};t[n]=a(n,e,l),r({global:!0,constructor:!0,arity:1,forced:l},t)},c=function(n,e){if(s&&s[n]){var t={};t[n]=a("WebAssembly."+n,e,l),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};u("Error",(function(n){return function(e){return o(n,this,arguments)}})),u("EvalError",(function(n){return function(e){return o(n,this,arguments)}})),u("RangeError",(function(n){return function(e){return o(n,this,arguments)}})),u("ReferenceError",(function(n){return function(e){return o(n,this,arguments)}})),u("SyntaxError",(function(n){return function(e){return o(n,this,arguments)}})),u("TypeError",(function(n){return function(e){return o(n,this,arguments)}})),u("URIError",(function(n){return function(e){return o(n,this,arguments)}})),c("CompileError",(function(n){return function(e){return o(n,this,arguments)}})),c("LinkError",(function(n){return function(e){return o(n,this,arguments)}})),c("RuntimeError",(function(n){return function(e){return o(n,this,arguments)}}))},function(n,e,t){"use strict";var r=t(36),i=t(11),o=t(25),a=t(37),s=t(96),l=t(84),u=t(170),c=t(171),d=t(172),p=t(173),f=t(174),h=t(7),m=t(24);n.exports=function(n,e,t,g){var v=g?2:1,b=n.split("."),y=b[b.length-1],_=r.apply(null,b);if(_){var x=_.prototype;if(!m&&i(x,"cause")&&delete x.cause,!t)return _;var w=r("Error"),E=e((function(n,e){var t=d(g?e:n,void 0),r=g?new _(n):new _;return void 0!==t&&o(r,"message",t),f(r,E,r.stack,2),this&&a(x,this)&&c(r,this,E),arguments.length>v&&p(r,arguments[v]),r}));if(E.prototype=x,"Error"!==y?s?s(E,w):l(E,w,{name:!0}):h&&"stackTraceLimit"in _&&(u(E,_,"stackTraceLimit"),u(E,_,"prepareStackTrace")),l(E,_),!m)try{x.name!==y&&o(x,"name",y),x.constructor=E}catch(n){}return E}}},function(n,e,t){"use strict";var r=t(6),i=t(9);n.exports=function(n,e,t){try{return r(i(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){"use strict";var r=t(169),i=String,o=TypeError;n.exports=function(n){if(r(n))return n;throw new o("Can't set "+i(n)+" as a prototype")}},function(n,e,t){"use strict";var r=t(10);n.exports=function(n){return r(n)||null===n}},function(n,e,t){"use strict";var r=t(18).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){"use strict";var r=t(3),i=t(10),o=t(96);n.exports=function(n,e,t){var a,s;return o&&r(a=e.constructor)&&a!==t&&i(s=a.prototype)&&s!==t.prototype&&o(n,s),n}},function(n,e,t){"use strict";var r=t(127);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){"use strict";var r=t(10),i=t(25);n.exports=function(n,e){r(e)&&"cause"in e&&i(n,"cause",e.cause)}},function(n,e,t){"use strict";var r=t(25),i=t(175),o=t(176),a=Error.captureStackTrace;n.exports=function(n,e,t,s){o&&(a?a(n,e):r(n,"stack",i(t,s)))}},function(n,e,t){"use strict";var r=t(6),i=Error,o=r("".replace),a=String(new i("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(a);n.exports=function(n,e){if(l&&"string"==typeof n&&!i.prepareStackTrace)for(;e--;)n=o(n,s,"");return n}},function(n,e,t){"use strict";var r=t(2),i=t(34);n.exports=!r((function(){var n=new Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",i(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(7),i=t(178),o=TypeError,a=Object.getOwnPropertyDescriptor,s=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=s?function(n,e){if(i(n)&&!a(n,"length").writable)throw new o("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){"use strict";var r=t(29);n.exports=Array.isArray||function(n){return"Array"===r(n)}},function(n,e,t){"use strict";var r=TypeError;n.exports=function(n){if(n>9007199254740991)throw r("Maximum allowed index exceeded");return n}},function(n,e,t){var r=t(97),i=t(181);n.exports=function n(e,t,o,a,s){var l=-1,u=e.length;for(o||(o=i),s||(s=[]);++l<u;){var c=e[l];t>0&&o(c)?t>1?n(c,t-1,o,a,s):r(s,c):a||(s[s.length]=c)}return s}},function(n,e,t){var r=t(30),i=t(56),o=t(15),a=r?r.isConcatSpreadable:void 0;n.exports=function(n){return o(n)||i(n)||!!(a&&n&&n[a])}},function(n,e,t){var r=t(28),i=t(23);n.exports=function(n){return i(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(30),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=o.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var i=a.call(n);return r&&(e?n[s]=t:delete n[s]),i}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(186),i=t(242),o=t(64),a=t(15),s=t(253);n.exports=function(n){return"function"==typeof n?n:null==n?o:"object"==typeof n?a(n)?i(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(187),i=t(241),o=t(114);n.exports=function(n){var e=i(n);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(99),i=t(103);n.exports=function(n,e,t,o){var a=t.length,s=a,l=!o;if(null==n)return!s;for(n=Object(n);a--;){var u=t[a];if(l&&u[2]?u[1]!==n[u[0]]:!(u[0]in n))return!1}for(;++a<s;){var c=(u=t[a])[0],d=n[c],p=u[1];if(l&&u[2]){if(void 0===d&&!(c in n))return!1}else{var f=new r;if(o)var h=o(d,p,c,n,e,f);if(!(void 0===h?i(p,d,3,o,f):h))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(40),i=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():i.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(40);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(40);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(40);n.exports=function(n,e){var t=this.__data__,i=r(t,n);return i<0?(++this.size,t.push([n,e])):t[i][1]=e,this}},function(n,e,t){var r=t(39);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(39),i=t(57),o=t(59);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var a=t.__data__;if(!i||a.length<199)return a.push([n,e]),this.size=++t.size,this;t=this.__data__=new o(a)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(101),i=t(199),o=t(58),a=t(102),s=/^\[object .+?Constructor\]$/,l=Function.prototype,u=Object.prototype,c=l.toString,d=u.hasOwnProperty,p=RegExp("^"+c.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!o(n)||i(n))&&(r(n)?p:s).test(a(n))}},function(n,e,t){var r,i=t(200),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!o&&o in n}},function(n,e,t){var r=t(16)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(203),i=t(39),o=t(57);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},function(n,e,t){var r=t(204),i=t(205),o=t(206),a=t(207),s=t(208);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(41);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(41),i=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return i.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(41),i=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:i.call(e,n)}},function(n,e,t){var r=t(41);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(42);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(42);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(42);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(42);n.exports=function(n,e){var t=r(this,n),i=t.size;return t.set(n,e),this.size+=t.size==i?0:1,this}},function(n,e,t){var r=t(99),i=t(104),o=t(218),a=t(221),s=t(237),l=t(15),u=t(108),c=t(110),d="[object Object]",p=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,f,h,m){var g=l(n),v=l(e),b=g?"[object Array]":s(n),y=v?"[object Array]":s(e),_=(b="[object Arguments]"==b?d:b)==d,x=(y="[object Arguments]"==y?d:y)==d,w=b==y;if(w&&u(n)){if(!u(e))return!1;g=!0,_=!1}if(w&&!_)return m||(m=new r),g||c(n)?i(n,e,t,f,h,m):o(n,e,b,t,f,h,m);if(!(1&t)){var E=_&&p.call(n,"__wrapped__"),k=x&&p.call(e,"__wrapped__");if(E||k){var T=E?n.value():n,R=k?e.value():e;return m||(m=new r),h(T,R,t,f,m)}}return!!w&&(m||(m=new r),a(n,e,t,f,h,m))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(30),i=t(219),o=t(100),a=t(104),s=t(220),l=t(60),u=r?r.prototype:void 0,c=u?u.valueOf:void 0;n.exports=function(n,e,t,r,u,d,p){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!d(new i(n),new i(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var f=s;case"[object Set]":var h=1&r;if(f||(f=l),n.size!=e.size&&!h)return!1;var m=p.get(n);if(m)return m==e;r|=2,p.set(n,e);var g=a(f(n),f(e),r,u,d,p);return p.delete(n),g;case"[object Symbol]":if(c)return c.call(n)==c.call(e)}return!1}},function(n,e,t){var r=t(16).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(222),i=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,o,a,s){var l=1&t,u=r(n),c=u.length;if(c!=r(e).length&&!l)return!1;for(var d=c;d--;){var p=u[d];if(!(l?p in e:i.call(e,p)))return!1}var f=s.get(n),h=s.get(e);if(f&&h)return f==e&&h==n;var m=!0;s.set(n,e),s.set(e,n);for(var g=l;++d<c;){var v=n[p=u[d]],b=e[p];if(o)var y=l?o(b,v,p,e,n,s):o(v,b,p,n,e,s);if(!(void 0===y?v===b||a(v,b,t,o,s):y)){m=!1;break}g||(g="constructor"==p)}if(m&&!g){var _=n.constructor,x=e.constructor;_==x||!("constructor"in n)||!("constructor"in e)||"function"==typeof _&&_ instanceof _&&"function"==typeof x&&x instanceof x||(m=!1)}return s.delete(n),s.delete(e),m}},function(n,e,t){var r=t(223),i=t(224),o=t(107);n.exports=function(n){return r(n,o,i)}},function(n,e,t){var r=t(97),i=t(15);n.exports=function(n,e,t){var o=e(n);return i(n)?o:r(o,t(n))}},function(n,e,t){var r=t(225),i=t(226),o=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(n){return null==n?[]:(n=Object(n),r(a(n),(function(e){return o.call(n,e)})))}:i;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,i=0,o=[];++t<r;){var a=n[t];e(a,t,n)&&(o[i++]=a)}return o}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(228),i=t(56),o=t(15),a=t(108),s=t(109),l=t(110),u=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=o(n),c=!t&&i(n),d=!t&&!c&&a(n),p=!t&&!c&&!d&&l(n),f=t||c||d||p,h=f?r(n.length,String):[],m=h.length;for(var g in n)!e&&!u.call(n,g)||f&&("length"==g||d&&("offset"==g||"parent"==g)||p&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,m))||h.push(g);return h}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(28),i=t(61),o=t(23),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,n.exports=function(n){return o(n)&&i(n.length)&&!!a[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(98),i=e&&!e.nodeType&&e,o=i&&"object"==typeof n&&n&&!n.nodeType&&n,a=o&&o.exports===i&&r.process,s=function(){try{var n=o&&o.require&&o.require("util").types;return n||a&&a.binding&&a.binding("util")}catch(n){}}();n.exports=s}).call(this,t(68)(n))},function(n,e,t){var r=t(234),i=t(235),o=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return i(n);var e=[];for(var t in Object(n))o.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(236)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(238),i=t(57),o=t(239),a=t(112),s=t(240),l=t(28),u=t(102),c=u(r),d=u(i),p=u(o),f=u(a),h=u(s),m=l;(r&&"[object DataView]"!=m(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=m(new i)||o&&"[object Promise]"!=m(o.resolve())||a&&"[object Set]"!=m(new a)||s&&"[object WeakMap]"!=m(new s))&&(m=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?u(t):"";if(r)switch(r){case c:return"[object DataView]";case d:return"[object Map]";case p:return"[object Promise]";case f:return"[object Set]";case h:return"[object WeakMap]"}return e}),n.exports=m},function(n,e,t){var r=t(19)(t(16),"DataView");n.exports=r},function(n,e,t){var r=t(19)(t(16),"Promise");n.exports=r},function(n,e,t){var r=t(19)(t(16),"WeakMap");n.exports=r},function(n,e,t){var r=t(113),i=t(107);n.exports=function(n){for(var e=i(n),t=e.length;t--;){var o=e[t],a=n[o];e[t]=[o,a,r(a)]}return e}},function(n,e,t){var r=t(103),i=t(243),o=t(250),a=t(62),s=t(113),l=t(114),u=t(43);n.exports=function(n,e){return a(n)&&s(e)?l(u(n),e):function(t){var a=i(t,n);return void 0===a&&a===e?o(t,n):r(e,a,3)}}},function(n,e,t){var r=t(115);n.exports=function(n,e,t){var i=null==n?void 0:r(n,e);return void 0===i?t:i}},function(n,e,t){var r=t(245),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,a=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(i,(function(n,t,r,i){e.push(r?i.replace(o,"$1"):t||n)})),e}));n.exports=a},function(n,e,t){var r=t(246);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(59);function i(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=t.cache;if(o.has(i))return o.get(i);var a=n.apply(this,r);return t.cache=o.set(i,a)||o,a};return t.cache=new(i.Cache||r),t}i.Cache=r,n.exports=i},function(n,e,t){var r=t(248);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(30),i=t(249),o=t(15),a=t(63),s=r?r.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(o(e))return i(e,n)+"";if(a(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,i=Array(r);++t<r;)i[t]=e(n[t],t,n);return i}},function(n,e,t){var r=t(251),i=t(252);n.exports=function(n,e){return null!=n&&i(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(116),i=t(56),o=t(15),a=t(109),s=t(61),l=t(43);n.exports=function(n,e,t){for(var u=-1,c=(e=r(e,n)).length,d=!1;++u<c;){var p=l(e[u]);if(!(d=null!=n&&t(n,p)))break;n=n[p]}return d||++u!=c?d:!!(c=null==n?0:n.length)&&s(c)&&a(p,c)&&(o(n)||i(n))}},function(n,e,t){var r=t(254),i=t(255),o=t(62),a=t(43);n.exports=function(n){return o(n)?r(a(n)):i(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(115);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(64),i=t(257),o=t(259);n.exports=function(n,e){return o(i(n,e,r),n+"")}},function(n,e,t){var r=t(258),i=Math.max;n.exports=function(n,e,t){return e=i(void 0===e?n.length-1:e,0),function(){for(var o=arguments,a=-1,s=i(o.length-e,0),l=Array(s);++a<s;)l[a]=o[e+a];a=-1;for(var u=Array(e+1);++a<e;)u[a]=o[a];return u[e]=t(l),r(n,this,u)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(260),i=t(263)(r);n.exports=i},function(n,e,t){var r=t(261),i=t(262),o=t(64),a=i?function(n,e){return i(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;n.exports=a},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(19),i=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=i},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var i=t(),o=16-(i-r);if(r=i,o>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(105),i=t(265),o=t(270),a=t(106),s=t(271),l=t(60);n.exports=function(n,e,t){var u=-1,c=i,d=n.length,p=!0,f=[],h=f;if(t)p=!1,c=o;else if(d>=200){var m=e?null:s(n);if(m)return l(m);p=!1,c=a,h=new r}else h=e?[]:f;n:for(;++u<d;){var g=n[u],v=e?e(g):g;if(g=t||0!==g?g:0,p&&v==v){for(var b=h.length;b--;)if(h[b]===v)continue n;e&&h.push(v),f.push(g)}else c(h,v,t)||(h!==f&&h.push(v),f.push(g))}return f}},function(n,e,t){var r=t(266);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(267),i=t(268),o=t(269);n.exports=function(n,e,t){return e==e?o(n,e,t):r(n,i,t)}},function(n,e){n.exports=function(n,e,t,r){for(var i=n.length,o=t+(r?1:-1);r?o--:++o<i;)if(e(n[o],o,n))return o;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,i=n.length;++r<i;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,i=null==n?0:n.length;++r<i;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(112),i=t(272),o=t(60),a=r&&1/o(new r([,-0]))[1]==1/0?function(n){return new r(n)}:i;n.exports=a},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(111),i=t(23);n.exports=function(n){return i(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(117)},function(n,e,t){"use strict";t(118)},function(n,e,t){"use strict";t(119)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(120)},function(n,e,t){"use strict";t(121)},function(n,e,t){"use strict";t(122)},function(n,e,t){"use strict";t.r(e);t(5),t(13),t(21);var r=Object.freeze({}),i=Array.isArray;function o(n){return null==n}function a(n){return null!=n}function s(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function u(n){return"function"==typeof n}function c(n){return null!==n&&"object"==typeof n}var d=Object.prototype.toString;function p(n){return"[object Object]"===d.call(n)}function f(n){return"[object RegExp]"===d.call(n)}function h(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function m(n){return a(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function g(n){return null==n?"":Array.isArray(n)||p(n)&&n.toString===d?JSON.stringify(n,v,2):String(n)}function v(n,e){return e&&e.__v_isRef?e.value:e}function b(n){var e=parseFloat(n);return isNaN(e)?n:e}function y(n,e){for(var t=Object.create(null),r=n.split(","),i=0;i<r.length;i++)t[r[i]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}y("slot,component",!0);var _=y("key,ref,slot,slot-scope,is");function x(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var r=n.indexOf(e);if(r>-1)return n.splice(r,1)}}var w=Object.prototype.hasOwnProperty;function E(n,e){return w.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var T=/-(\w)/g,R=k((function(n){return n.replace(T,(function(n,e){return e?e.toUpperCase():""}))})),C=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),S=/\B([A-Z])/g,$=k((function(n){return n.replace(S,"-$1").toLowerCase()}));var A=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function O(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function I(n,e){for(var t in e)n[t]=e[t];return n}function V(n){for(var e={},t=0;t<n.length;t++)n[t]&&I(e,n[t]);return e}function z(n,e,t){}var D=function(n,e,t){return!1},j=function(n){return n};function P(n,e){if(n===e)return!0;var t=c(n),r=c(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var i=Array.isArray(n),o=Array.isArray(e);if(i&&o)return n.length===e.length&&n.every((function(n,t){return P(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(i||o)return!1;var a=Object.keys(n),s=Object.keys(e);return a.length===s.length&&a.every((function(t){return P(n[t],e[t])}))}catch(n){return!1}}function B(n,e){for(var t=0;t<n.length;t++)if(P(n[t],e))return t;return-1}function L(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function H(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var M=["component","directive","filter"],q=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:D,isReservedAttr:D,isUnknownElement:D,getTagNamespace:z,parsePlatformTagName:j,mustUseProp:D,async:!0,_lifecycleHooks:q},N=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function F(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function Y(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var W=new RegExp("[^".concat(N.source,".$_\\d]"));var Z="__proto__"in{},G="undefined"!=typeof window,X=G&&window.navigator.userAgent.toLowerCase(),K=X&&/msie|trident/.test(X),Q=X&&X.indexOf("msie 9.0")>0,J=X&&X.indexOf("edge/")>0;X&&X.indexOf("android");var nn=X&&/iphone|ipad|ipod|ios/.test(X);X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X);var en,tn=X&&X.match(/firefox\/(\d+)/),rn={}.watch,on=!1;if(G)try{var an={};Object.defineProperty(an,"passive",{get:function(){on=!0}}),window.addEventListener("test-passive",null,an)}catch(n){}var sn=function(){return void 0===en&&(en=!G&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),en},ln=G&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function un(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,dn="undefined"!=typeof Symbol&&un(Symbol)&&"undefined"!=typeof Reflect&&un(Reflect.ownKeys);cn="undefined"!=typeof Set&&un(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var pn=null;function fn(n){void 0===n&&(n=null),n||pn&&pn._scope.off(),pn=n,n&&n._scope.on()}var hn=function(){function n(n,e,t,r,i,o,a,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),mn=function(n){void 0===n&&(n="");var e=new hn;return e.text=n,e.isComment=!0,e};function gn(n){return new hn(void 0,void 0,void 0,String(n))}function vn(n){var e=new hn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}"function"==typeof SuppressedError&&SuppressedError;var bn=0,yn=[],_n=function(){function n(){this._pending=!1,this.id=bn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,yn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,r=e.length;t<r;t++){0,e[t].update()}},n}();_n.target=null;var xn=[];function wn(n){xn.push(n),_n.target=n}function En(){xn.pop(),_n.target=xn[xn.length-1]}var kn=Array.prototype,Tn=Object.create(kn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=kn[n];Y(Tn,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var i,o=e.apply(this,t),a=this.__ob__;switch(n){case"push":case"unshift":i=t;break;case"splice":i=t.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o}))}));var Rn=Object.getOwnPropertyNames(Tn),Cn={},Sn=!0;function $n(n){Sn=n}var An={notify:z,depend:z,addSub:z,removeSub:z},On=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?An:new _n,this.vmCount=0,Y(n,"__ob__",this),i(n)){if(!t)if(Z)n.__proto__=Tn;else for(var r=0,o=Rn.length;r<o;r++){Y(n,s=Rn[r],Tn[s])}e||this.observeArray(n)}else{var a=Object.keys(n);for(r=0;r<a.length;r++){var s;Vn(n,s=a[r],Cn,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)In(n[e],!1,this.mock)},n}();function In(n,e,t){return n&&E(n,"__ob__")&&n.__ob__ instanceof On?n.__ob__:!Sn||!t&&sn()||!i(n)&&!p(n)||!Object.isExtensible(n)||n.__v_skip||Hn(n)||n instanceof hn?void 0:new On(n,e,t)}function Vn(n,e,t,r,o,a,s){void 0===s&&(s=!1);var l=new _n,u=Object.getOwnPropertyDescriptor(n,e);if(!u||!1!==u.configurable){var c=u&&u.get,d=u&&u.set;c&&!d||t!==Cn&&2!==arguments.length||(t=n[e]);var p=o?t&&t.__ob__:In(t,!1,a);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=c?c.call(n):t;return _n.target&&(l.depend(),p&&(p.dep.depend(),i(e)&&jn(e))),Hn(e)&&!o?e.value:e},set:function(e){var r=c?c.call(n):t;if(H(r,e)){if(d)d.call(n,e);else{if(c)return;if(!o&&Hn(r)&&!Hn(e))return void(r.value=e);t=e}p=o?e&&e.__ob__:In(e,!1,a),l.notify()}}}),l}}function zn(n,e,t){if(!Ln(n)){var r=n.__ob__;return i(n)&&h(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&In(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?(Vn(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function Dn(n,e){if(i(n)&&h(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Ln(n)||E(n,e)&&(delete n[e],t&&t.dep.notify())}}function jn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),i(e)&&jn(e)}function Pn(n){return Bn(n,!0),Y(n,"__v_isShallow",!0),n}function Bn(n,e){if(!Ln(n)){In(n,e,sn());0}}function Ln(n){return!(!n||!n.__v_isReadonly)}function Hn(n){return!(!n||!0!==n.__v_isRef)}function Mn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(Hn(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];Hn(r)&&!Hn(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var qn;var Un=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=qn,!n&&qn&&(this.index=(qn.scopes||(qn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=qn;try{return qn=this,n()}finally{qn=e}}else 0},n.prototype.on=function(){qn=this},n.prototype.off=function(){qn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Nn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Fn=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function Yn(n,e){function t(){var n=t.fns;if(!i(n))return Se(n,null,arguments,e,"v-on handler");for(var r=n.slice(),o=0;o<r.length;o++)Se(r[o],null,arguments,e,"v-on handler")}return t.fns=n,t}function Wn(n,e,t,r,i,a){var l,u,c,d;for(l in n)u=n[l],c=e[l],d=Fn(l),o(u)||(o(c)?(o(u.fns)&&(u=n[l]=Yn(u,a)),s(d.once)&&(u=n[l]=i(d.name,u,d.capture)),t(d.name,u,d.capture,d.passive,d.params)):u!==c&&(c.fns=u,n[l]=c));for(l in e)o(n[l])&&r((d=Fn(l)).name,e[l],d.capture)}function Zn(n,e,t){var r;n instanceof hn&&(n=n.data.hook||(n.data.hook={}));var i=n[e];function l(){t.apply(this,arguments),x(r.fns,l)}o(i)?r=Yn([l]):a(i.fns)&&s(i.merged)?(r=i).fns.push(l):r=Yn([i,l]),r.merged=!0,n[e]=r}function Gn(n,e,t,r,i){if(a(e)){if(E(e,t))return n[t]=e[t],i||delete e[t],!0;if(E(e,r))return n[t]=e[r],i||delete e[r],!0}return!1}function Xn(n){return l(n)?[gn(n)]:i(n)?function n(e,t){var r,u,c,d,p=[];for(r=0;r<e.length;r++)o(u=e[r])||"boolean"==typeof u||(c=p.length-1,d=p[c],i(u)?u.length>0&&(Kn((u=n(u,"".concat(t||"","_").concat(r)))[0])&&Kn(d)&&(p[c]=gn(d.text+u[0].text),u.shift()),p.push.apply(p,u)):l(u)?Kn(d)?p[c]=gn(d.text+u):""!==u&&p.push(gn(u)):Kn(u)&&Kn(d)?p[c]=gn(d.text+u.text):(s(e._isVList)&&a(u.tag)&&o(u.key)&&a(t)&&(u.key="__vlist".concat(t,"_").concat(r,"__")),p.push(u)));return p}(n):void 0}function Kn(n){return a(n)&&a(n.text)&&!1===n.isComment}function Qn(n,e){var t,r,o,s,l=null;if(i(n)||"string"==typeof n)for(l=new Array(n.length),t=0,r=n.length;t<r;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(c(n))if(dn&&n[Symbol.iterator]){l=[];for(var u=n[Symbol.iterator](),d=u.next();!d.done;)l.push(e(d.value,l.length)),d=u.next()}else for(o=Object.keys(n),l=new Array(o.length),t=0,r=o.length;t<r;t++)s=o[t],l[t]=e(n[s],s,t);return a(l)||(l=[]),l._isVList=!0,l}function Jn(n,e,t,r){var i,o=this.$scopedSlots[n];o?(t=t||{},r&&(t=I(I({},r),t)),i=o(t)||(u(e)?e():e)):i=this.$slots[n]||(u(e)?e():e);var a=t&&t.slot;return a?this.$createElement("template",{slot:a},i):i}function ne(n){return Ot(this.$options,"filters",n,!0)||j}function ee(n,e){return i(n)?-1===n.indexOf(e):n!==e}function te(n,e,t,r,i){var o=U.keyCodes[e]||t;return i&&r&&!U.keyCodes[e]?ee(i,r):o?ee(o,n):r?$(r)!==e:void 0===n}function re(n,e,t,r,o){if(t)if(c(t)){i(t)&&(t=V(t));var a=void 0,s=function(i){if("class"===i||"style"===i||_(i))a=n;else{var s=n.attrs&&n.attrs.type;a=r||U.mustUseProp(e,s,i)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=R(i),u=$(i);l in a||u in a||(a[i]=t[i],o&&((n.on||(n.on={}))["update:".concat(i)]=function(n){t[i]=n}))};for(var l in t)s(l)}else;return n}function ie(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||ae(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function oe(n,e,t){return ae(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function ae(n,e,t){if(i(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&se(n[r],"".concat(e,"_").concat(r),t);else se(n,e,t)}function se(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function le(n,e){if(e)if(p(e)){var t=n.on=n.on?I({},n.on):{};for(var r in e){var i=t[r],o=e[r];t[r]=i?[].concat(i,o):o}}else;return n}function ue(n,e,t,r){e=e||{$stable:!t};for(var o=0;o<n.length;o++){var a=n[o];i(a)?ue(a,e,t):a&&(a.proxy&&(a.fn.proxy=!0),e[a.key]=a.fn)}return r&&(e.$key=r),e}function ce(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function de(n,e){return"string"==typeof n?e+n:n}function pe(n){n._o=oe,n._n=b,n._s=g,n._l=Qn,n._t=Jn,n._q=P,n._i=B,n._m=ie,n._f=ne,n._k=te,n._b=re,n._v=gn,n._e=mn,n._u=ue,n._g=le,n._d=ce,n._p=de}function fe(n,e){if(!n||!n.length)return{};for(var t={},r=0,i=n.length;r<i;r++){var o=n[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==e&&o.fnContext!==e||!a||null==a.slot)(t.default||(t.default=[])).push(o);else{var s=a.slot,l=t[s]||(t[s]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var u in t)t[u].every(he)&&delete t[u];return t}function he(n){return n.isComment&&!n.asyncFactory||" "===n.text}function me(n){return n.isComment&&n.asyncFactory}function ge(n,e,t,i){var o,a=Object.keys(t).length>0,s=e?!!e.$stable:!a,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&i&&i!==r&&l===i.$key&&!a&&!i.$hasNormal)return i;for(var u in o={},e)e[u]&&"$"!==u[0]&&(o[u]=ve(n,t,u,e[u]))}else o={};for(var c in t)c in o||(o[c]=be(t,c));return e&&Object.isExtensible(e)&&(e._normalized=o),Y(o,"$stable",s),Y(o,"$key",l),Y(o,"$hasNormal",a),o}function ve(n,e,t,r){var o=function(){var e=pn;fn(n);var t=arguments.length?r.apply(null,arguments):r({}),o=(t=t&&"object"==typeof t&&!i(t)?[t]:Xn(t))&&t[0];return fn(e),t&&(!o||1===t.length&&o.isComment&&!me(o))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:o,enumerable:!0,configurable:!0}),o}function be(n,e){return function(){return n[e]}}function ye(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};Y(e,"_v_attr_proxy",!0),_e(e,n.$attrs,r,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||_e(n._listenersProxy={},n.$listeners,r,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||we(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:A(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Mn(n,e,t)}))}}}function _e(n,e,t,r,i){var o=!1;for(var a in e)a in n?e[a]!==t[a]&&(o=!0):(o=!0,xe(n,a,r,i));for(var a in n)a in e||(o=!0,delete n[a]);return o}function xe(n,e,t,r){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[r][e]}})}function we(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var Ee=null;function ke(n,e){return(n.__esModule||dn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),c(n)?e.extend(n):n}function Te(n){if(i(n))for(var e=0;e<n.length;e++){var t=n[e];if(a(t)&&(a(t.componentOptions)||me(t)))return t}}function Re(n,e,t,r,d,p){return(i(t)||l(t))&&(d=r,r=t,t=void 0),s(p)&&(d=2),function(n,e,t,r,l){if(a(t)&&a(t.__ob__))return mn();a(t)&&a(t.is)&&(e=t.is);if(!e)return mn();0;i(r)&&u(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===l?r=Xn(r):1===l&&(r=function(n){for(var e=0;e<n.length;e++)if(i(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var d,p;if("string"==typeof e){var f=void 0;p=n.$vnode&&n.$vnode.ns||U.getTagNamespace(e),d=U.isReservedTag(e)?new hn(U.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!a(f=Ot(n.$options,"components",e))?new hn(e,t,r,void 0,void 0,n):xt(f,t,n,r,e)}else d=xt(e,t,n,r);return i(d)?d:a(d)?(a(p)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(a(e.children))for(var i=0,l=e.children.length;i<l;i++){var u=e.children[i];a(u.tag)&&(o(u.ns)||s(r)&&"svg"!==u.tag)&&n(u,t,r)}}(d,p),a(t)&&function(n){c(n.style)&&Ue(n.style);c(n.class)&&Ue(n.class)}(t),d):mn()}(n,e,t,r,d)}function Ce(n,e,t){wn();try{if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,n,e,t))return}catch(n){$e(n,r,"errorCaptured hook")}}$e(n,e,t)}finally{En()}}function Se(n,e,t,r,i){var o;try{(o=t?n.apply(e,t):n.call(e))&&!o._isVue&&m(o)&&!o._handled&&(o.catch((function(n){return Ce(n,r,i+" (Promise/async)")})),o._handled=!0)}catch(n){Ce(n,r,i)}return o}function $e(n,e,t){if(U.errorHandler)try{return U.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Ae(e,null,"config.errorHandler")}Ae(n,e,t)}function Ae(n,e,t){if(!G||"undefined"==typeof console)throw n;console.error(n)}var Oe,Ie=!1,Ve=[],ze=!1;function De(){ze=!1;var n=Ve.slice(0);Ve.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&un(Promise)){var je=Promise.resolve();Oe=function(){je.then(De),nn&&setTimeout(z)},Ie=!0}else if(K||"undefined"==typeof MutationObserver||!un(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Oe="undefined"!=typeof setImmediate&&un(setImmediate)?function(){setImmediate(De)}:function(){setTimeout(De,0)};else{var Pe=1,Be=new MutationObserver(De),Le=document.createTextNode(String(Pe));Be.observe(Le,{characterData:!0}),Oe=function(){Pe=(Pe+1)%2,Le.data=String(Pe)},Ie=!0}function He(n,e){var t;if(Ve.push((function(){if(n)try{n.call(e)}catch(n){Ce(n,e,"nextTick")}else t&&t(e)})),ze||(ze=!0,Oe()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function Me(n){return function(e,t){if(void 0===t&&(t=pn),t)return function(n,e,t){var r=n.$options;r[e]=Ct(r[e],t)}(t,n,e)}}Me("beforeMount"),Me("mounted"),Me("beforeUpdate"),Me("updated"),Me("beforeDestroy"),Me("destroyed"),Me("activated"),Me("deactivated"),Me("serverPrefetch"),Me("renderTracked"),Me("renderTriggered"),Me("errorCaptured");var qe=new cn;function Ue(n){return function n(e,t){var r,o,a=i(e);if(!a&&!c(e)||e.__v_skip||Object.isFrozen(e)||e instanceof hn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(a)for(r=e.length;r--;)n(e[r],t);else if(Hn(e))n(e.value,t);else for(o=Object.keys(e),r=o.length;r--;)n(e[o[r]],t)}(n,qe),qe.clear(),n}var Ne,Fe=0,Ye=function(){function n(n,e,t,r,i){var o,a;o=this,void 0===(a=qn&&!qn._vm?qn:n?n._scope:void 0)&&(a=qn),a&&a.active&&a.effects.push(o),(this.vm=n)&&i&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Fe,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="",u(e)?this.getter=e:(this.getter=function(n){if(!W.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=z)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;wn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Ce(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Ue(n),En(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():ft(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||c(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Se(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&x(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function We(n,e){Ne.$on(n,e)}function Ze(n,e){Ne.$off(n,e)}function Ge(n,e){var t=Ne;return function r(){var i=e.apply(null,arguments);null!==i&&t.$off(n,r)}}function Xe(n,e,t){Ne=n,Wn(e,t||{},We,Ze,Ge,n),Ne=void 0}var Ke=null;function Qe(n){var e=Ke;return Ke=n,function(){Ke=e}}function Je(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function nt(n,e){if(e){if(n._directInactive=!1,Je(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)nt(n.$children[t]);et(n,"activated")}}function et(n,e,t,r){void 0===r&&(r=!0),wn();var i=pn,o=qn;r&&fn(n);var a=n.$options[e],s="".concat(e," hook");if(a)for(var l=0,u=a.length;l<u;l++)Se(a[l],n,t||null,n,s);n._hasHookEvent&&n.$emit("hook:"+e),r&&(fn(i),o&&o.on()),En()}var tt=[],rt=[],it={},ot=!1,at=!1,st=0;var lt=0,ut=Date.now;if(G&&!K){var ct=window.performance;ct&&"function"==typeof ct.now&&ut()>document.createEvent("Event").timeStamp&&(ut=function(){return ct.now()})}var dt=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function pt(){var n,e;for(lt=ut(),at=!0,tt.sort(dt),st=0;st<tt.length;st++)(n=tt[st]).before&&n.before(),e=n.id,it[e]=null,n.run();var t=rt.slice(),r=tt.slice();st=tt.length=rt.length=0,it={},ot=at=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,nt(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&et(r,"updated")}}(r),function(){for(var n=0;n<yn.length;n++){var e=yn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}yn.length=0}(),ln&&U.devtools&&ln.emit("flush")}function ft(n){var e=n.id;if(null==it[e]&&(n!==_n.target||!n.noRecurse)){if(it[e]=!0,at){for(var t=tt.length-1;t>st&&tt[t].id>n.id;)t--;tt.splice(t+1,0,n)}else tt.push(n);ot||(ot=!0,He(pt))}}function ht(n,e){if(n){for(var t=Object.create(null),r=dn?Reflect.ownKeys(n):Object.keys(n),i=0;i<r.length;i++){var o=r[i];if("__ob__"!==o){var a=n[o].from;if(a in e._provided)t[o]=e._provided[a];else if("default"in n[o]){var s=n[o].default;t[o]=u(s)?s.call(e):s}else 0}}return t}}function mt(n,e,t,o,a){var l,u=this,c=a.options;E(o,"_uid")?(l=Object.create(o))._original=o:(l=o,o=o._original);var d=s(c._compiled),p=!d;this.data=n,this.props=e,this.children=t,this.parent=o,this.listeners=n.on||r,this.injections=ht(c.inject,o),this.slots=function(){return u.$slots||ge(o,n.scopedSlots,u.$slots=fe(t,o)),u.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ge(o,n.scopedSlots,this.slots())}}),d&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=ge(o,n.scopedSlots,this.$slots)),c._scopeId?this._c=function(n,e,t,r){var a=Re(l,n,e,t,r,p);return a&&!i(a)&&(a.fnScopeId=c._scopeId,a.fnContext=o),a}:this._c=function(n,e,t,r){return Re(l,n,e,t,r,p)}}function gt(n,e,t,r,i){var o=vn(n);return o.fnContext=t,o.fnOptions=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function vt(n,e){for(var t in e)n[R(t)]=e[t]}function bt(n){return n.name||n.__name||n._componentTag}pe(mt.prototype);var yt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;yt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;a(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ke)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,i,o){var a=i.data.scopedSlots,s=n.$scopedSlots,l=!!(a&&!a.$stable||s!==r&&!s.$stable||a&&n.$scopedSlots.$key!==a.$key||!a&&n.$scopedSlots.$key),u=!!(o||n.$options._renderChildren||l),c=n.$vnode;n.$options._parentVnode=i,n.$vnode=i,n._vnode&&(n._vnode.parent=i),n.$options._renderChildren=o;var d=i.data.attrs||r;n._attrsProxy&&_e(n._attrsProxy,d,c.data&&c.data.attrs||r,n,"$attrs")&&(u=!0),n.$attrs=d,t=t||r;var p=n.$options._parentListeners;if(n._listenersProxy&&_e(n._listenersProxy,t,p||r,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,Xe(n,t,p),e&&n.$options.props){$n(!1);for(var f=n._props,h=n.$options._propKeys||[],m=0;m<h.length;m++){var g=h[m],v=n.$options.props;f[g]=It(g,v,e,n)}$n(!0),n.$options.propsData=e}u&&(n.$slots=fe(o,i.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,et(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,rt.push(e)):nt(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Je(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);et(e,"deactivated")}}(e,!0):e.$destroy())}},_t=Object.keys(yt);function xt(n,e,t,l,u){if(!o(n)){var d=t.$options._base;if(c(n)&&(n=d.extend(n)),"function"==typeof n){var p;if(o(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&a(n.errorComp))return n.errorComp;if(a(n.resolved))return n.resolved;var t=Ee;if(t&&a(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&a(n.loadingComp))return n.loadingComp;if(t&&!a(n.owners)){var r=n.owners=[t],i=!0,l=null,u=null;t.$on("hook:destroyed",(function(){return x(r,t)}));var d=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==u&&(clearTimeout(u),u=null))},p=L((function(t){n.resolved=ke(t,e),i?r.length=0:d(!0)})),f=L((function(e){a(n.errorComp)&&(n.error=!0,d(!0))})),h=n(p,f);return c(h)&&(m(h)?o(n.resolved)&&h.then(p,f):m(h.component)&&(h.component.then(p,f),a(h.error)&&(n.errorComp=ke(h.error,e)),a(h.loading)&&(n.loadingComp=ke(h.loading,e),0===h.delay?n.loading=!0:l=setTimeout((function(){l=null,o(n.resolved)&&o(n.error)&&(n.loading=!0,d(!1))}),h.delay||200)),a(h.timeout)&&(u=setTimeout((function(){u=null,o(n.resolved)&&f(null)}),h.timeout)))),i=!1,n.loading?n.loadingComp:n.resolved}}(p=n,d)))return function(n,e,t,r,i){var o=mn();return o.asyncFactory=n,o.asyncMeta={data:e,context:t,children:r,tag:i},o}(p,e,t,l,u);e=e||{},Yt(n),a(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var o=e.on||(e.on={}),s=o[r],l=e.model.callback;a(s)?(i(s)?-1===s.indexOf(l):s!==l)&&(o[r]=[l].concat(s)):o[r]=l}(n.options,e);var f=function(n,e,t){var r=e.options.props;if(!o(r)){var i={},s=n.attrs,l=n.props;if(a(s)||a(l))for(var u in r){var c=$(u);Gn(i,l,u,c,!0)||Gn(i,s,u,c,!1)}return i}}(e,n);if(s(n.options.functional))return function(n,e,t,o,s){var l=n.options,u={},c=l.props;if(a(c))for(var d in c)u[d]=It(d,c,e||r);else a(t.attrs)&&vt(u,t.attrs),a(t.props)&&vt(u,t.props);var p=new mt(t,u,s,o,n),f=l.render.call(null,p._c,p);if(f instanceof hn)return gt(f,t,p.parent,l,p);if(i(f)){for(var h=Xn(f)||[],m=new Array(h.length),g=0;g<h.length;g++)m[g]=gt(h[g],t,p.parent,l,p);return m}}(n,f,e,t,l);var h=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var g=e.slot;e={},g&&(e.slot=g)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<_t.length;t++){var r=_t[t],i=e[r],o=yt[r];i===o||i&&i._merged||(e[r]=i?wt(o,i):o)}}(e);var v=bt(n.options)||u;return new hn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:f,listeners:h,tag:u,children:l},p)}}}function wt(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var Et=z,kt=U.optionMergeStrategies;function Tt(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var r,i,o,a=dn?Reflect.ownKeys(e):Object.keys(e),s=0;s<a.length;s++)"__ob__"!==(r=a[s])&&(i=n[r],o=e[r],t&&E(n,r)?i!==o&&p(i)&&p(o)&&Tt(i,o):zn(n,r,o));return n}function Rt(n,e,t){return t?function(){var r=u(e)?e.call(t,t):e,i=u(n)?n.call(t,t):n;return r?Tt(r,i):i}:e?n?function(){return Tt(u(e)?e.call(this,this):e,u(n)?n.call(this,this):n)}:e:n}function Ct(n,e){var t=e?n?n.concat(e):i(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function St(n,e,t,r){var i=Object.create(n||null);return e?I(i,e):i}kt.data=function(n,e,t){return t?Rt(n,e,t):e&&"function"!=typeof e?n:Rt(n,e)},q.forEach((function(n){kt[n]=Ct})),M.forEach((function(n){kt[n+"s"]=St})),kt.watch=function(n,e,t,r){if(n===rn&&(n=void 0),e===rn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var o={};for(var a in I(o,n),e){var s=o[a],l=e[a];s&&!i(s)&&(s=[s]),o[a]=s?s.concat(l):i(l)?l:[l]}return o},kt.props=kt.methods=kt.inject=kt.computed=function(n,e,t,r){if(!n)return e;var i=Object.create(null);return I(i,n),e&&I(i,e),i},kt.provide=function(n,e){return n?function(){var t=Object.create(null);return Tt(t,u(n)?n.call(this):n),e&&Tt(t,u(e)?e.call(this):e,!1),t}:e};var $t=function(n,e){return void 0===e?n:e};function At(n,e,t){if(u(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,o,a={};if(i(t))for(r=t.length;r--;)"string"==typeof(o=t[r])&&(a[R(o)]={type:null});else if(p(t))for(var s in t)o=t[s],a[R(s)]=p(o)?o:{type:o};else 0;n.props=a}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(i(t))for(var o=0;o<t.length;o++)r[t[o]]={from:t[o]};else if(p(t))for(var a in t){var s=t[a];r[a]=p(s)?I({from:a},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];u(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=At(n,e.extends,t)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)n=At(n,e.mixins[r],t);var a,s={};for(a in n)l(a);for(a in e)E(n,a)||l(a);function l(r){var i=kt[r]||$t;s[r]=i(n[r],e[r],t,r)}return s}function Ot(n,e,t,r){if("string"==typeof t){var i=n[e];if(E(i,t))return i[t];var o=R(t);if(E(i,o))return i[o];var a=C(o);return E(i,a)?i[a]:i[t]||i[o]||i[a]}}function It(n,e,t,r){var i=e[n],o=!E(t,n),a=t[n],s=jt(Boolean,i.type);if(s>-1)if(o&&!E(i,"default"))a=!1;else if(""===a||a===$(n)){var l=jt(String,i.type);(l<0||s<l)&&(a=!0)}if(void 0===a){a=function(n,e,t){if(!E(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return u(r)&&"Function"!==zt(e.type)?r.call(n):r}(r,i,n);var c=Sn;$n(!0),In(a),$n(c)}return a}var Vt=/^\s*function (\w+)/;function zt(n){var e=n&&n.toString().match(Vt);return e?e[1]:""}function Dt(n,e){return zt(n)===zt(e)}function jt(n,e){if(!i(e))return Dt(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Dt(e[t],n))return t;return-1}var Pt={enumerable:!0,configurable:!0,get:z,set:z};function Bt(n,e,t){Pt.get=function(){return this[e][t]},Pt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Pt)}function Lt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=Pn({}),i=n.$options._propKeys=[];n.$parent&&$n(!1);var o=function(o){i.push(o);var a=It(o,e,t,n);Vn(r,o,a,void 0,!0),o in n||Bt(n,"_props",o)};for(var a in e)o(a);$n(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=ye(n);fn(n),wn();var i=Se(t,null,[n._props||Pn({}),r],n,"setup");if(En(),fn(),u(i))e.render=i;else if(c(i))if(n._setupState=i,i.__sfc){var o=n._setupProxy={};for(var a in i)"__sfc"!==a&&Mn(o,i,a)}else for(var a in i)F(a)||Mn(n,i,a);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?z:A(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;p(e=n._data=u(e)?function(n,e){wn();try{return n.call(e,e)}catch(n){return Ce(n,e,"data()"),{}}finally{En()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,i=(n.$options.methods,t.length);for(;i--;){var o=t[i];0,r&&E(r,o)||F(o)||Bt(n,"_data",o)}var a=In(e);a&&a.vmCount++}(n);else{var t=In(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=sn();for(var i in e){var o=e[i],a=u(o)?o:o.get;0,r||(t[i]=new Ye(n,a||z,z,Ht)),i in n||Mt(n,i,o)}}(n,e.computed),e.watch&&e.watch!==rn&&function(n,e){for(var t in e){var r=e[t];if(i(r))for(var o=0;o<r.length;o++)Nt(n,t,r[o]);else Nt(n,t,r)}}(n,e.watch)}var Ht={lazy:!0};function Mt(n,e,t){var r=!sn();u(t)?(Pt.get=r?qt(e):Ut(t),Pt.set=z):(Pt.get=t.get?r&&!1!==t.cache?qt(e):Ut(t.get):z,Pt.set=t.set||z),Object.defineProperty(n,e,Pt)}function qt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),_n.target&&e.depend(),e.value}}function Ut(n){return function(){return n.call(this,this)}}function Nt(n,e,t,r){return p(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Ft=0;function Yt(n){var e=n.options;if(n.super){var t=Yt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var i in t)t[i]!==r[i]&&(e||(e={}),e[i]=t[i]);return e}(n);r&&I(n.extendOptions,r),(e=n.options=At(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Wt(n){this._init(n)}function Zt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,i=n._Ctor||(n._Ctor={});if(i[r])return i[r];var o=bt(n)||bt(t.options);var a=function(n){this._init(n)};return(a.prototype=Object.create(t.prototype)).constructor=a,a.cid=e++,a.options=At(t.options,n),a.super=t,a.options.props&&function(n){var e=n.options.props;for(var t in e)Bt(n.prototype,"_props",t)}(a),a.options.computed&&function(n){var e=n.options.computed;for(var t in e)Mt(n.prototype,t,e[t])}(a),a.extend=t.extend,a.mixin=t.mixin,a.use=t.use,M.forEach((function(n){a[n]=t[n]})),o&&(a.options.components[o]=a),a.superOptions=t.options,a.extendOptions=n,a.sealedOptions=I({},a.options),i[r]=a,a}}function Gt(n){return n&&(bt(n.Ctor.options)||n.tag)}function Xt(n,e){return i(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!f(n)&&n.test(e)}function Kt(n,e){var t=n.cache,r=n.keys,i=n._vnode,o=n.$vnode;for(var a in t){var s=t[a];if(s){var l=s.name;l&&!e(l)&&Qt(t,a,r,i)}}o.componentOptions.children=void 0}function Qt(n,e,t,r){var i=n[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),n[e]=null,x(t,e)}Wt.prototype._init=function(n){var e=this;e._uid=Ft++,e._isVue=!0,e.__v_skip=!0,e._scope=new Un(!0),e._scope.parent=void 0,e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var i=r.componentOptions;t.propsData=i.propsData,t._parentListeners=i.listeners,t._renderChildren=i.children,t._componentTag=i.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=At(Yt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Xe(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,i=t&&t.context;n.$slots=fe(e._renderChildren,i),n.$scopedSlots=t?ge(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,i){return Re(n,e,t,r,i,!1)},n.$createElement=function(e,t,r,i){return Re(n,e,t,r,i,!0)};var o=t&&t.data;Vn(n,"$attrs",o&&o.attrs||r,null,!0),Vn(n,"$listeners",e._parentListeners||r,null,!0)}(e),et(e,"beforeCreate",void 0,!1),function(n){var e=ht(n.$options.inject,n);e&&($n(!1),Object.keys(e).forEach((function(t){Vn(n,t,e[t])})),$n(!0))}(e),Lt(e),function(n){var e=n.$options.provide;if(e){var t=u(e)?e.call(n):e;if(!c(t))return;for(var r=Nn(n),i=dn?Reflect.ownKeys(t):Object.keys(t),o=0;o<i.length;o++){var a=i[o];Object.defineProperty(r,a,Object.getOwnPropertyDescriptor(t,a))}}}(e),et(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=zn,n.prototype.$delete=Dn,n.prototype.$watch=function(n,e,t){if(p(e))return Nt(this,n,e,t);(t=t||{}).user=!0;var r=new Ye(this,n,e,t);if(t.immediate){var i='callback for immediate watcher "'.concat(r.expression,'"');wn(),Se(e,this,[r.value],this,i),En()}return function(){r.teardown()}}}(Wt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(i(n))for(var o=0,a=n.length;o<a;o++)r.$on(n[o],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(i(n)){for(var r=0,o=n.length;r<o;r++)t.$off(n[r],e);return t}var a,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var l=s.length;l--;)if((a=s[l])===e||a.fn===e){s.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?O(t):t;for(var r=O(arguments,1),i='event handler for "'.concat(n,'"'),o=0,a=t.length;o<a;o++)Se(t[o],e,r,e,i)}return e}}(Wt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,i=t._vnode,o=Qe(t);t._vnode=n,t.$el=i?t.__patch__(i,n):t.__patch__(t.$el,n,e,!1),o(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var a=t;a&&a.$vnode&&a.$parent&&a.$vnode===a.$parent._vnode;)a.$parent.$el=a.$el,a=a.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){et(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||x(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),et(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Wt),function(n){pe(n.prototype),n.prototype.$nextTick=function(n){return He(n,this)},n.prototype._render=function(){var n=this,e=n.$options,t=e.render,r=e._parentVnode;r&&n._isMounted&&(n.$scopedSlots=ge(n.$parent,r.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&we(n._slotsProxy,n.$scopedSlots)),n.$vnode=r;var o,a=pn,s=Ee;try{fn(n),Ee=n,o=t.call(n._renderProxy,n.$createElement)}catch(e){Ce(e,n,"render"),o=n._vnode}finally{Ee=s,fn(a)}return i(o)&&1===o.length&&(o=o[0]),o instanceof hn||(o=mn()),o.parent=r,o}}(Wt);var Jt=[String,RegExp,Array],nr={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Jt,exclude:Jt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var i=t.tag,o=t.componentInstance,a=t.componentOptions;n[r]={name:Gt(a),tag:i,componentInstance:o},e.push(r),this.max&&e.length>parseInt(this.max)&&Qt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Qt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Kt(n,(function(n){return Xt(e,n)}))})),this.$watch("exclude",(function(e){Kt(n,(function(n){return!Xt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Te(n),t=e&&e.componentOptions;if(t){var r=Gt(t),i=this.include,o=this.exclude;if(i&&(!r||!Xt(i,r))||o&&r&&Xt(o,r))return e;var a=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;a[l]?(e.componentInstance=a[l].componentInstance,x(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return U}};Object.defineProperty(n,"config",e),n.util={warn:Et,extend:I,mergeOptions:At,defineReactive:Vn},n.set=zn,n.delete=Dn,n.nextTick=He,n.observable=function(n){return In(n),n},n.options=Object.create(null),M.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,I(n.options.components,nr),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=O(arguments,1);return t.unshift(this),u(n.install)?n.install.apply(n,t):u(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=At(this.options,n),this}}(n),Zt(n),function(n){M.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&p(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&u(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Wt),Object.defineProperty(Wt.prototype,"$isServer",{get:sn}),Object.defineProperty(Wt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Wt,"FunctionalRenderContext",{value:mt}),Wt.version="2.7.16";var er=y("style,class"),tr=y("input,textarea,option,select,progress"),rr=y("contenteditable,draggable,spellcheck"),ir=y("events,caret,typing,plaintext-only"),or=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ar="http://www.w3.org/1999/xlink",sr=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},lr=function(n){return sr(n)?n.slice(6,n.length):""},ur=function(n){return null==n||!1===n};function cr(n){for(var e=n.data,t=n,r=n;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=dr(r.data,e));for(;a(t=t.parent);)t&&t.data&&(e=dr(e,t.data));return function(n,e){if(a(n)||a(e))return pr(n,fr(e));return""}(e.staticClass,e.class)}function dr(n,e){return{staticClass:pr(n.staticClass,e.staticClass),class:a(n.class)?[n.class,e.class]:e.class}}function pr(n,e){return n?e?n+" "+e:n:e||""}function fr(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,i=n.length;r<i;r++)a(e=fr(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):c(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var hr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},mr=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),gr=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),vr=function(n){return mr(n)||gr(n)};var br=Object.create(null);var yr=y("text,number,password,search,email,tel,url");var _r=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(hr[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),xr={create:function(n,e){wr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(wr(n,!0),wr(e))},destroy:function(n){wr(n,!0)}};function wr(n,e){var t=n.data.ref;if(a(t)){var r=n.context,o=n.componentInstance||n.elm,s=e?null:o,l=e?void 0:o;if(u(t))Se(t,r,[s],r,"template ref function");else{var c=n.data.refInFor,d="string"==typeof t||"number"==typeof t,p=Hn(t),f=r.$refs;if(d||p)if(c){var h=d?f[t]:t.value;e?i(h)&&x(h,o):i(h)?h.includes(o)||h.push(o):d?(f[t]=[o],Er(r,t,f[t])):t.value=[o]}else if(d){if(e&&f[t]!==o)return;f[t]=l,Er(r,t,s)}else if(p){if(e&&t.value!==o)return;t.value=s}else 0}}}function Er(n,e,t){var r=n._setupState;r&&E(r,e)&&(Hn(r[e])?r[e].value=t:r[e]=t)}var kr=new hn("",{},[]),Tr=["create","activate","update","remove","destroy"];function Rr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&a(n.data)===a(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=a(t=n.data)&&a(t=t.attrs)&&t.type,i=a(t=e.data)&&a(t=t.attrs)&&t.type;return r===i||yr(r)&&yr(i)}(n,e)||s(n.isAsyncPlaceholder)&&o(e.asyncFactory.error))}function Cr(n,e,t){var r,i,o={};for(r=e;r<=t;++r)a(i=n[r].key)&&(o[i]=r);return o}var Sr={create:$r,update:$r,destroy:function(n){$r(n,kr)}};function $r(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,i,o=n===kr,a=e===kr,s=Or(n.data.directives,n.context),l=Or(e.data.directives,e.context),u=[],c=[];for(t in l)r=s[t],i=l[t],r?(i.oldValue=r.value,i.oldArg=r.arg,Vr(i,"update",e,n),i.def&&i.def.componentUpdated&&c.push(i)):(Vr(i,"bind",e,n),i.def&&i.def.inserted&&u.push(i));if(u.length){var d=function(){for(var t=0;t<u.length;t++)Vr(u[t],"inserted",e,n)};o?Zn(e,"insert",d):d()}c.length&&Zn(e,"postpatch",(function(){for(var t=0;t<c.length;t++)Vr(c[t],"componentUpdated",e,n)}));if(!o)for(t in s)l[t]||Vr(s[t],"unbind",n,n,a)}(n,e)}var Ar=Object.create(null);function Or(n,e){var t,r,i=Object.create(null);if(!n)return i;for(t=0;t<n.length;t++){if((r=n[t]).modifiers||(r.modifiers=Ar),i[Ir(r)]=r,e._setupState&&e._setupState.__sfc){var o=r.def||Ot(e,"_setupState","v-"+r.name);r.def="function"==typeof o?{bind:o,update:o}:o}r.def=r.def||Ot(e.$options,"directives",r.name)}return i}function Ir(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function Vr(n,e,t,r,i){var o=n.def&&n.def[e];if(o)try{o(t.elm,n,t,r,i)}catch(r){Ce(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var zr=[xr,Sr];function Dr(n,e){var t=e.componentOptions;if(!(a(t)&&!1===t.Ctor.options.inheritAttrs||o(n.data.attrs)&&o(e.data.attrs))){var r,i,l=e.elm,u=n.data.attrs||{},c=e.data.attrs||{};for(r in(a(c.__ob__)||s(c._v_attr_proxy))&&(c=e.data.attrs=I({},c)),c)i=c[r],u[r]!==i&&jr(l,r,i,e.data.pre);for(r in(K||J)&&c.value!==u.value&&jr(l,"value",c.value),u)o(c[r])&&(sr(r)?l.removeAttributeNS(ar,lr(r)):rr(r)||l.removeAttribute(r))}}function jr(n,e,t,r){r||n.tagName.indexOf("-")>-1?Pr(n,e,t):or(e)?ur(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):rr(e)?n.setAttribute(e,function(n,e){return ur(e)||"false"===e?"false":"contenteditable"===n&&ir(e)?e:"true"}(e,t)):sr(e)?ur(t)?n.removeAttributeNS(ar,lr(e)):n.setAttributeNS(ar,e,t):Pr(n,e,t)}function Pr(n,e,t){if(ur(t))n.removeAttribute(e);else{if(K&&!Q&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var Br={create:Dr,update:Dr};function Lr(n,e){var t=e.elm,r=e.data,i=n.data;if(!(o(r.staticClass)&&o(r.class)&&(o(i)||o(i.staticClass)&&o(i.class)))){var s=cr(e),l=t._transitionClasses;a(l)&&(s=pr(s,fr(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var Hr,Mr={create:Lr,update:Lr};function qr(n,e,t){var r=Hr;return function i(){var o=e.apply(null,arguments);null!==o&&Fr(n,i,t,r)}}var Ur=Ie&&!(tn&&Number(tn[1])<=53);function Nr(n,e,t,r){if(Ur){var i=lt,o=e;e=o._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=i||n.timeStamp<=0||n.target.ownerDocument!==document)return o.apply(this,arguments)}}Hr.addEventListener(n,e,on?{capture:t,passive:r}:t)}function Fr(n,e,t,r){(r||Hr).removeEventListener(n,e._wrapper||e,t)}function Yr(n,e){if(!o(n.data.on)||!o(e.data.on)){var t=e.data.on||{},r=n.data.on||{};Hr=e.elm||n.elm,function(n){if(a(n.__r)){var e=K?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}a(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Wn(t,r,Nr,Fr,qr,e.context),Hr=void 0}}var Wr,Zr={create:Yr,update:Yr,destroy:function(n){return Yr(n,kr)}};function Gr(n,e){if(!o(n.data.domProps)||!o(e.data.domProps)){var t,r,i=e.elm,l=n.data.domProps||{},u=e.data.domProps||{};for(t in(a(u.__ob__)||s(u._v_attr_proxy))&&(u=e.data.domProps=I({},u)),l)t in u||(i[t]="");for(t in u){if(r=u[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===l[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=r;var c=o(r)?"":String(r);Xr(i,c)&&(i.value=c)}else if("innerHTML"===t&&gr(i.tagName)&&o(i.innerHTML)){(Wr=Wr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var d=Wr.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;d.firstChild;)i.appendChild(d.firstChild)}else if(r!==l[t])try{i[t]=r}catch(n){}}}}function Xr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(a(r)){if(r.number)return b(t)!==b(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Kr={create:Gr,update:Gr},Qr=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Jr(n){var e=ni(n.style);return n.staticStyle?I(n.staticStyle,e):e}function ni(n){return Array.isArray(n)?V(n):"string"==typeof n?Qr(n):n}var ei,ti=/^--/,ri=/\s*!important$/,ii=function(n,e,t){if(ti.test(e))n.style.setProperty(e,t);else if(ri.test(t))n.style.setProperty($(e),t.replace(ri,""),"important");else{var r=ai(e);if(Array.isArray(t))for(var i=0,o=t.length;i<o;i++)n.style[r]=t[i];else n.style[r]=t}},oi=["Webkit","Moz","ms"],ai=k((function(n){if(ei=ei||document.createElement("div").style,"filter"!==(n=R(n))&&n in ei)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<oi.length;t++){var r=oi[t]+e;if(r in ei)return r}}));function si(n,e){var t=e.data,r=n.data;if(!(o(t.staticStyle)&&o(t.style)&&o(r.staticStyle)&&o(r.style))){var i,s,l=e.elm,u=r.staticStyle,c=r.normalizedStyle||r.style||{},d=u||c,p=ni(e.data.style)||{};e.data.normalizedStyle=a(p.__ob__)?I({},p):p;var f=function(n,e){var t,r={};if(e)for(var i=n;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(t=Jr(i.data))&&I(r,t);(t=Jr(n.data))&&I(r,t);for(var o=n;o=o.parent;)o.data&&(t=Jr(o.data))&&I(r,t);return r}(e,!0);for(s in d)o(f[s])&&ii(l,s,"");for(s in f)i=f[s],ii(l,s,null==i?"":i)}}var li={create:si,update:si},ui=/\s+/;function ci(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(ui).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function di(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(ui).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function pi(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&I(e,fi(n.name||"v")),I(e,n),e}return"string"==typeof n?fi(n):void 0}}var fi=k((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),hi=G&&!Q,mi="transition",gi="transitionend",vi="animation",bi="animationend";hi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(mi="WebkitTransition",gi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(vi="WebkitAnimation",bi="webkitAnimationEnd"));var yi=G?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function _i(n){yi((function(){yi(n)}))}function xi(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),ci(n,e))}function wi(n,e){n._transitionClasses&&x(n._transitionClasses,e),di(n,e)}function Ei(n,e,t){var r=Ti(n,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return t();var s="transition"===i?gi:bi,l=0,u=function(){n.removeEventListener(s,c),t()},c=function(e){e.target===n&&++l>=a&&u()};setTimeout((function(){l<a&&u()}),o+1),n.addEventListener(s,c)}var ki=/\b(transform|all)(,|$)/;function Ti(n,e){var t,r=window.getComputedStyle(n),i=(r[mi+"Delay"]||"").split(", "),o=(r[mi+"Duration"]||"").split(", "),a=Ri(i,o),s=(r[vi+"Delay"]||"").split(", "),l=(r[vi+"Duration"]||"").split(", "),u=Ri(s,l),c=0,d=0;return"transition"===e?a>0&&(t="transition",c=a,d=o.length):"animation"===e?u>0&&(t="animation",c=u,d=l.length):d=(t=(c=Math.max(a,u))>0?a>u?"transition":"animation":null)?"transition"===t?o.length:l.length:0,{type:t,timeout:c,propCount:d,hasTransform:"transition"===t&&ki.test(r[mi+"Property"])}}function Ri(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Ci(e)+Ci(n[t])})))}function Ci(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Si(n,e){var t=n.elm;a(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=pi(n.data.transition);if(!o(r)&&!a(t._enterCb)&&1===t.nodeType){for(var i=r.css,s=r.type,l=r.enterClass,d=r.enterToClass,p=r.enterActiveClass,f=r.appearClass,h=r.appearToClass,m=r.appearActiveClass,g=r.beforeEnter,v=r.enter,y=r.afterEnter,_=r.enterCancelled,x=r.beforeAppear,w=r.appear,E=r.afterAppear,k=r.appearCancelled,T=r.duration,R=Ke,C=Ke.$vnode;C&&C.parent;)R=C.context,C=C.parent;var S=!R._isMounted||!n.isRootInsert;if(!S||w||""===w){var $=S&&f?f:l,A=S&&m?m:p,O=S&&h?h:d,I=S&&x||g,V=S&&u(w)?w:v,z=S&&E||y,D=S&&k||_,j=b(c(T)?T.enter:T);0;var P=!1!==i&&!Q,B=Oi(V),H=t._enterCb=L((function(){P&&(wi(t,O),wi(t,A)),H.cancelled?(P&&wi(t,$),D&&D(t)):z&&z(t),t._enterCb=null}));n.data.show||Zn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),V&&V(t,H)})),I&&I(t),P&&(xi(t,$),xi(t,A),_i((function(){wi(t,$),H.cancelled||(xi(t,O),B||(Ai(j)?setTimeout(H,j):Ei(t,s,H)))}))),n.data.show&&(e&&e(),V&&V(t,H)),P||B||H()}}}function $i(n,e){var t=n.elm;a(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=pi(n.data.transition);if(o(r)||1!==t.nodeType)return e();if(!a(t._leaveCb)){var i=r.css,s=r.type,l=r.leaveClass,u=r.leaveToClass,d=r.leaveActiveClass,p=r.beforeLeave,f=r.leave,h=r.afterLeave,m=r.leaveCancelled,g=r.delayLeave,v=r.duration,y=!1!==i&&!Q,_=Oi(f),x=b(c(v)?v.leave:v);0;var w=t._leaveCb=L((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(wi(t,u),wi(t,d)),w.cancelled?(y&&wi(t,l),m&&m(t)):(e(),h&&h(t)),t._leaveCb=null}));g?g(E):E()}function E(){w.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),p&&p(t),y&&(xi(t,l),xi(t,d),_i((function(){wi(t,l),w.cancelled||(xi(t,u),_||(Ai(x)?setTimeout(w,x):Ei(t,s,w)))}))),f&&f(t,w),y||_||w())}}function Ai(n){return"number"==typeof n&&!isNaN(n)}function Oi(n){if(o(n))return!1;var e=n.fns;return a(e)?Oi(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Ii(n,e){!0!==e.data.show&&Si(e)}var Vi=function(n){var e,t,r={},u=n.modules,c=n.nodeOps;for(e=0;e<Tr.length;++e)for(r[Tr[e]]=[],t=0;t<u.length;++t)a(u[t][Tr[e]])&&r[Tr[e]].push(u[t][Tr[e]]);function d(n){var e=c.parentNode(n);a(e)&&c.removeChild(e,n)}function p(n,e,t,i,o,l,u){if(a(n.elm)&&a(l)&&(n=l[u]=vn(n)),n.isRootInsert=!o,!function(n,e,t,i){var o=n.data;if(a(o)){var l=a(n.componentInstance)&&o.keepAlive;if(a(o=o.hook)&&a(o=o.init)&&o(n,!1),a(n.componentInstance))return f(n,e),h(t,n.elm,i),s(l)&&function(n,e,t,i){var o,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,a(o=s.data)&&a(o=o.transition)){for(o=0;o<r.activate.length;++o)r.activate[o](kr,s);e.push(s);break}h(t,n.elm,i)}(n,e,t,i),!0}}(n,e,t,i)){var d=n.data,p=n.children,g=n.tag;a(g)?(n.elm=n.ns?c.createElementNS(n.ns,g):c.createElement(g,n),b(n),m(n,p,e),a(d)&&v(n,e),h(t,n.elm,i)):s(n.isComment)?(n.elm=c.createComment(n.text),h(t,n.elm,i)):(n.elm=c.createTextNode(n.text),h(t,n.elm,i))}}function f(n,e){a(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,g(n)?(v(n,e),b(n)):(wr(n),e.push(n))}function h(n,e,t){a(n)&&(a(t)?c.parentNode(t)===n&&c.insertBefore(n,e,t):c.appendChild(n,e))}function m(n,e,t){if(i(e)){0;for(var r=0;r<e.length;++r)p(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&c.appendChild(n.elm,c.createTextNode(String(n.text)))}function g(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return a(n.tag)}function v(n,t){for(var i=0;i<r.create.length;++i)r.create[i](kr,n);a(e=n.data.hook)&&(a(e.create)&&e.create(kr,n),a(e.insert)&&t.push(n))}function b(n){var e;if(a(e=n.fnScopeId))c.setStyleScope(n.elm,e);else for(var t=n;t;)a(e=t.context)&&a(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e),t=t.parent;a(e=Ke)&&e!==n.context&&e!==n.fnContext&&a(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e)}function _(n,e,t,r,i,o){for(;r<=i;++r)p(t[r],o,n,e,!1,t,r)}function x(n){var e,t,i=n.data;if(a(i))for(a(e=i.hook)&&a(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(a(e=n.children))for(t=0;t<n.children.length;++t)x(n.children[t])}function w(n,e,t){for(;e<=t;++e){var r=n[e];a(r)&&(a(r.tag)?(E(r),x(r)):d(r.elm))}}function E(n,e){if(a(e)||a(n.data)){var t,i=r.remove.length+1;for(a(e)?e.listeners+=i:e=function(n,e){function t(){0==--t.listeners&&d(n)}return t.listeners=e,t}(n.elm,i),a(t=n.componentInstance)&&a(t=t._vnode)&&a(t.data)&&E(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);a(t=n.data.hook)&&a(t=t.remove)?t(n,e):e()}else d(n.elm)}function k(n,e,t,r){for(var i=t;i<r;i++){var o=e[i];if(a(o)&&Rr(n,o))return i}}function T(n,e,t,i,l,u){if(n!==e){a(e.elm)&&a(i)&&(e=i[l]=vn(e));var d=e.elm=n.elm;if(s(n.isAsyncPlaceholder))a(e.asyncFactory.resolved)?S(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var f,h=e.data;a(h)&&a(f=h.hook)&&a(f=f.prepatch)&&f(n,e);var m=n.children,v=e.children;if(a(h)&&g(e)){for(f=0;f<r.update.length;++f)r.update[f](n,e);a(f=h.hook)&&a(f=f.update)&&f(n,e)}o(e.text)?a(m)&&a(v)?m!==v&&function(n,e,t,r,i){var s,l,u,d=0,f=0,h=e.length-1,m=e[0],g=e[h],v=t.length-1,b=t[0],y=t[v],x=!i;for(0;d<=h&&f<=v;)o(m)?m=e[++d]:o(g)?g=e[--h]:Rr(m,b)?(T(m,b,r,t,f),m=e[++d],b=t[++f]):Rr(g,y)?(T(g,y,r,t,v),g=e[--h],y=t[--v]):Rr(m,y)?(T(m,y,r,t,v),x&&c.insertBefore(n,m.elm,c.nextSibling(g.elm)),m=e[++d],y=t[--v]):Rr(g,b)?(T(g,b,r,t,f),x&&c.insertBefore(n,g.elm,m.elm),g=e[--h],b=t[++f]):(o(s)&&(s=Cr(e,d,h)),o(l=a(b.key)?s[b.key]:k(b,e,d,h))?p(b,r,n,m.elm,!1,t,f):Rr(u=e[l],b)?(T(u,b,r,t,f),e[l]=void 0,x&&c.insertBefore(n,u.elm,m.elm)):p(b,r,n,m.elm,!1,t,f),b=t[++f]);d>h?_(n,o(t[v+1])?null:t[v+1].elm,t,f,v,r):f>v&&w(e,d,h)}(d,m,v,t,u):a(v)?(a(n.text)&&c.setTextContent(d,""),_(d,null,v,0,v.length-1,t)):a(m)?w(m,0,m.length-1):a(n.text)&&c.setTextContent(d,""):n.text!==e.text&&c.setTextContent(d,e.text),a(h)&&a(f=h.hook)&&a(f=f.postpatch)&&f(n,e)}}}function R(n,e,t){if(s(t)&&a(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var C=y("attrs,class,staticClass,staticStyle,key");function S(n,e,t,r){var i,o=e.tag,l=e.data,u=e.children;if(r=r||l&&l.pre,e.elm=n,s(e.isComment)&&a(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(a(l)&&(a(i=l.hook)&&a(i=i.init)&&i(e,!0),a(i=e.componentInstance)))return f(e,t),!0;if(a(o)){if(a(u))if(n.hasChildNodes())if(a(i=l)&&a(i=i.domProps)&&a(i=i.innerHTML)){if(i!==n.innerHTML)return!1}else{for(var c=!0,d=n.firstChild,p=0;p<u.length;p++){if(!d||!S(d,u[p],t,r)){c=!1;break}d=d.nextSibling}if(!c||d)return!1}else m(e,u,t);if(a(l)){var h=!1;for(var g in l)if(!C(g)){h=!0,v(e,t);break}!h&&l.class&&Ue(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,i){if(!o(e)){var l,u=!1,d=[];if(o(n))u=!0,p(e,d);else{var f=a(n.nodeType);if(!f&&Rr(n,e))T(n,e,d,null,null,i);else{if(f){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&S(n,e,d))return R(e,d,!0),n;l=n,n=new hn(c.tagName(l).toLowerCase(),{},[],void 0,l)}var h=n.elm,m=c.parentNode(h);if(p(e,d,h._leaveCb?null:m,c.nextSibling(h)),a(e.parent))for(var v=e.parent,b=g(e);v;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](v);if(v.elm=e.elm,b){for(var _=0;_<r.create.length;++_)r.create[_](kr,v);var E=v.data.hook.insert;if(E.merged)for(var k=E.fns.slice(1),C=0;C<k.length;C++)k[C]()}else wr(v);v=v.parent}a(m)?w([n],0,0):a(n.tag)&&x(n)}}return R(e,d,u),e.elm}a(n)&&x(n)}}({nodeOps:_r,modules:[Br,Mr,Zr,Kr,li,G?{create:Ii,activate:Ii,remove:function(n,e){!0!==n.data.show?$i(n,e):e()}}:{}].concat(zr)});Q&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Mi(n,"input")}));var zi={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Zn(t,"postpatch",(function(){zi.componentUpdated(n,e,t)})):Di(n,e,t.context),n._vOptions=[].map.call(n.options,Bi)):("textarea"===t.tag||yr(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",Li),n.addEventListener("compositionend",Hi),n.addEventListener("change",Hi),Q&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Di(n,e,t.context);var r=n._vOptions,i=n._vOptions=[].map.call(n.options,Bi);if(i.some((function(n,e){return!P(n,r[e])})))(n.multiple?e.value.some((function(n){return Pi(n,i)})):e.value!==e.oldValue&&Pi(e.value,i))&&Mi(n,"change")}}};function Di(n,e,t){ji(n,e,t),(K||J)&&setTimeout((function(){ji(n,e,t)}),0)}function ji(n,e,t){var r=e.value,i=n.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,l=n.options.length;s<l;s++)if(a=n.options[s],i)o=B(r,Bi(a))>-1,a.selected!==o&&(a.selected=o);else if(P(Bi(a),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));i||(n.selectedIndex=-1)}}function Pi(n,e){return e.every((function(e){return!P(e,n)}))}function Bi(n){return"_value"in n?n._value:n.value}function Li(n){n.target.composing=!0}function Hi(n){n.target.composing&&(n.target.composing=!1,Mi(n.target,"input"))}function Mi(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function qi(n){return!n.componentInstance||n.data&&n.data.transition?n:qi(n.componentInstance._vnode)}var Ui={model:zi,show:{bind:function(n,e,t){var r=e.value,i=(t=qi(t)).data&&t.data.transition,o=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&i?(t.data.show=!0,Si(t,(function(){n.style.display=o}))):n.style.display=r?o:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=qi(t)).data&&t.data.transition?(t.data.show=!0,r?Si(t,(function(){n.style.display=n.__vOriginalDisplay})):$i(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,i){i||(n.style.display=n.__vOriginalDisplay)}}},Ni={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Fi(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Fi(Te(e.children)):n}function Yi(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var i=t._parentListeners;for(var r in i)e[R(r)]=i[r];return e}function Wi(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Zi=function(n){return n.tag||me(n)},Gi=function(n){return"show"===n.name},Xi={name:"transition",props:Ni,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Zi)).length){0;var r=this.mode;0;var i=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return i;var o=Fi(i);if(!o)return i;if(this._leaving)return Wi(n,i);var a="__transition-".concat(this._uid,"-");o.key=null==o.key?o.isComment?a+"comment":a+o.tag:l(o.key)?0===String(o.key).indexOf(a)?o.key:a+o.key:o.key;var s=(o.data||(o.data={})).transition=Yi(this),u=this._vnode,c=Fi(u);if(o.data.directives&&o.data.directives.some(Gi)&&(o.data.show=!0),c&&c.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(o,c)&&!me(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var d=c.data.transition=I({},s);if("out-in"===r)return this._leaving=!0,Zn(d,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Wi(n,i);if("in-out"===r){if(me(o))return u;var p,f=function(){p()};Zn(s,"afterEnter",f),Zn(s,"enterCancelled",f),Zn(d,"delayLeave",(function(n){p=n}))}}return i}}},Ki=I({tag:String,moveClass:String},Ni);function Qi(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Ji(n){n.data.newPos=n.elm.getBoundingClientRect()}function no(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,i=e.top-t.top;if(r||i){n.data.moved=!0;var o=n.elm.style;o.transform=o.WebkitTransform="translate(".concat(r,"px,").concat(i,"px)"),o.transitionDuration="0s"}}delete Ki.mode;var eo={Transition:Xi,TransitionGroup:{props:Ki,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var i=Qe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,i(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=Yi(this),s=0;s<i.length;s++){if((c=i[s]).tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))o.push(c),t[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){var l=[],u=[];for(s=0;s<r.length;s++){var c;(c=r[s]).data.transition=a,c.data.pos=c.elm.getBoundingClientRect(),t[c.key]?l.push(c):u.push(c)}this.kept=n(e,null,l),this.removed=u}return n(e,null,o)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Qi),n.forEach(Ji),n.forEach(no),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;xi(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(gi,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(gi,n),t._moveCb=null,wi(t,e))})}})))},methods:{hasMove:function(n,e){if(!hi)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){di(t,n)})),ci(t,e),t.style.display="none",this.$el.appendChild(t);var r=Ti(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};function to(n,e){for(var t in e)n[t]=e[t];return n}Wt.config.mustUseProp=function(n,e,t){return"value"===t&&tr(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Wt.config.isReservedTag=vr,Wt.config.isReservedAttr=er,Wt.config.getTagNamespace=function(n){return gr(n)?"svg":"math"===n?"math":void 0},Wt.config.isUnknownElement=function(n){if(!G)return!0;if(vr(n))return!1;if(n=n.toLowerCase(),null!=br[n])return br[n];var e=document.createElement(n);return n.indexOf("-")>-1?br[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:br[n]=/HTMLUnknownElement/.test(e.toString())},I(Wt.options.directives,Ui),I(Wt.options.components,eo),Wt.prototype.__patch__=G?Vi:z,Wt.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=mn),et(n,"beforeMount"),r=function(){n._update(n._render(),t)},new Ye(n,r,z,{before:function(){n._isMounted&&!n._isDestroyed&&et(n,"beforeUpdate")}},!0),t=!1;var i=n._preWatchers;if(i)for(var o=0;o<i.length;o++)i[o].run();return null==n.$vnode&&(n._isMounted=!0,et(n,"mounted")),n}(this,n=n&&G?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},G&&setTimeout((function(){U.devtools&&ln&&ln.emit("init",Wt)}),0);var ro=/[!'()*]/g,io=function(n){return"%"+n.charCodeAt(0).toString(16)},oo=/%2C/g,ao=function(n){return encodeURIComponent(n).replace(ro,io).replace(oo,",")};function so(n){try{return decodeURIComponent(n)}catch(n){0}return n}var lo=function(n){return null==n||"object"==typeof n?n:String(n)};function uo(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=so(t.shift()),i=t.length>0?so(t.join("=")):null;void 0===e[r]?e[r]=i:Array.isArray(e[r])?e[r].push(i):e[r]=[e[r],i]})),e):e}function co(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return ao(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(ao(e)):r.push(ao(e)+"="+ao(n)))})),r.join("&")}return ao(e)+"="+ao(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var po=/\/?$/;function fo(n,e,t,r){var i=r&&r.options.stringifyQuery,o=e.query||{};try{o=ho(o)}catch(n){}var a={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:o,params:e.params||{},fullPath:vo(e,i),matched:n?go(n):[]};return t&&(a.redirectedFrom=vo(t,i)),Object.freeze(a)}function ho(n){if(Array.isArray(n))return n.map(ho);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=ho(n[t]);return e}return n}var mo=fo(null,{path:"/"});function go(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function vo(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var i=n.hash;return void 0===i&&(i=""),(t||"/")+(e||co)(r)+i}function bo(n,e,t){return e===mo?n===e:!!e&&(n.path&&e.path?n.path.replace(po,"")===e.path.replace(po,"")&&(t||n.hash===e.hash&&yo(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&yo(n.query,e.query)&&yo(n.params,e.params))))}function yo(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,i){var o=n[t];if(r[i]!==t)return!1;var a=e[t];return null==o||null==a?o===a:"object"==typeof o&&"object"==typeof a?yo(o,a):String(o)===String(a)}))}function _o(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var i=t.instances[r],o=t.enteredCbs[r];if(i&&o){delete t.enteredCbs[r];for(var a=0;a<o.length;a++)i._isBeingDestroyed||o[a](i)}}}}var xo={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,i=e.parent,o=e.data;o.routerView=!0;for(var a=i.$createElement,s=t.name,l=i.$route,u=i._routerViewCache||(i._routerViewCache={}),c=0,d=!1;i&&i._routerRoot!==i;){var p=i.$vnode?i.$vnode.data:{};p.routerView&&c++,p.keepAlive&&i._directInactive&&i._inactive&&(d=!0),i=i.$parent}if(o.routerViewDepth=c,d){var f=u[s],h=f&&f.component;return h?(f.configProps&&wo(h,o,f.route,f.configProps),a(h,o,r)):a()}var m=l.matched[c],g=m&&m.components[s];if(!m||!g)return u[s]=null,a();u[s]={component:g},o.registerRouteInstance=function(n,e){var t=m.instances[s];(e&&t!==n||!e&&t===n)&&(m.instances[s]=e)},(o.hook||(o.hook={})).prepatch=function(n,e){m.instances[s]=e.componentInstance},o.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==m.instances[s]&&(m.instances[s]=n.componentInstance),_o(l)};var v=m.props&&m.props[s];return v&&(to(u[s],{route:l,configProps:v}),wo(g,o,l,v)),a(g,o,r)}};function wo(n,e,t,r){var i=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(i){i=e.props=to({},i);var o=e.attrs=e.attrs||{};for(var a in i)n.props&&a in n.props||(o[a]=i[a],delete i[a])}}function Eo(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var i=e.split("/");t&&i[i.length-1]||i.pop();for(var o=n.replace(/^\//,"").split("/"),a=0;a<o.length;a++){var s=o[a];".."===s?i.pop():"."!==s&&i.push(s)}return""!==i[0]&&i.unshift(""),i.join("/")}function ko(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var To=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},Ro=Ho,Co=Io,So=function(n,e){return zo(Io(n,e),e)},$o=zo,Ao=Lo,Oo=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Io(n,e){for(var t,r=[],i=0,o=0,a="",s=e&&e.delimiter||"/";null!=(t=Oo.exec(n));){var l=t[0],u=t[1],c=t.index;if(a+=n.slice(o,c),o=c+l.length,u)a+=u[1];else{var d=n[o],p=t[2],f=t[3],h=t[4],m=t[5],g=t[6],v=t[7];a&&(r.push(a),a="");var b=null!=p&&null!=d&&d!==p,y="+"===g||"*"===g,_="?"===g||"*"===g,x=t[2]||s,w=h||m;r.push({name:f||i++,prefix:p||"",delimiter:x,optional:_,repeat:y,partial:b,asterisk:!!v,pattern:w?jo(w):v?".*":"[^"+Do(x)+"]+?"})}}return o<n.length&&(a+=n.substr(o)),a&&r.push(a),r}function Vo(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function zo(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",Bo(e)));return function(e,r){for(var i="",o=e||{},a=(r||{}).pretty?Vo:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var u,c=o[l.name];if(null==c){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(To(c)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(c)+"`");if(0===c.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var d=0;d<c.length;d++){if(u=a(c[d]),!t[s].test(u))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(u)+"`");i+=(0===d?l.prefix:l.delimiter)+u}}else{if(u=l.asterisk?encodeURI(c).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):a(c),!t[s].test(u))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+u+'"');i+=l.prefix+u}}else i+=l}return i}}function Do(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function jo(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Po(n,e){return n.keys=e,n}function Bo(n){return n&&n.sensitive?"":"i"}function Lo(n,e,t){To(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,i=!1!==t.end,o="",a=0;a<n.length;a++){var s=n[a];if("string"==typeof s)o+=Do(s);else{var l=Do(s.prefix),u="(?:"+s.pattern+")";e.push(s),s.repeat&&(u+="(?:"+l+u+")*"),o+=u=s.optional?s.partial?l+"("+u+")?":"(?:"+l+"("+u+"))?":l+"("+u+")"}}var c=Do(t.delimiter||"/"),d=o.slice(-c.length)===c;return r||(o=(d?o.slice(0,-c.length):o)+"(?:"+c+"(?=$))?"),o+=i?"$":r&&d?"":"(?="+c+"|$)",Po(new RegExp("^"+o,Bo(t)),e)}function Ho(n,e,t){return To(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Po(n,e)}(n,e):To(n)?function(n,e,t){for(var r=[],i=0;i<n.length;i++)r.push(Ho(n[i],e,t).source);return Po(new RegExp("(?:"+r.join("|")+")",Bo(t)),e)}(n,e,t):function(n,e,t){return Lo(Io(n,t),e,t)}(n,e,t)}Ro.parse=Co,Ro.compile=So,Ro.tokensToFunction=$o,Ro.tokensToRegExp=Ao;var Mo=Object.create(null);function qo(n,e,t){e=e||{};try{var r=Mo[n]||(Mo[n]=Ro.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Uo(n,e,t,r){var i="string"==typeof n?{path:n}:n;if(i._normalized)return i;if(i.name){var o=(i=to({},n)).params;return o&&"object"==typeof o&&(i.params=to({},o)),i}if(!i.path&&i.params&&e){(i=to({},i))._normalized=!0;var a=to(to({},e.params),i.params);if(e.name)i.name=e.name,i.params=a;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;i.path=qo(s,a,e.path)}else 0;return i}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var i=n.indexOf("?");return i>=0&&(t=n.slice(i+1),n=n.slice(0,i)),{path:n,query:t,hash:e}}(i.path||""),u=e&&e.path||"/",c=l.path?Eo(l.path,u,t||i.append):u,d=function(n,e,t){void 0===e&&(e={});var r,i=t||uo;try{r=i(n||"")}catch(n){r={}}for(var o in e){var a=e[o];r[o]=Array.isArray(a)?a.map(lo):lo(a)}return r}(l.query,i.query,r&&r.options.parseQuery),p=i.hash||l.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:c,query:d,hash:p}}var No,Fo=function(){},Yo={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,i=t.resolve(this.to,r,this.append),o=i.location,a=i.route,s=i.href,l={},u=t.options.linkActiveClass,c=t.options.linkExactActiveClass,d=null==u?"router-link-active":u,p=null==c?"router-link-exact-active":c,f=null==this.activeClass?d:this.activeClass,h=null==this.exactActiveClass?p:this.exactActiveClass,m=a.redirectedFrom?fo(null,Uo(a.redirectedFrom),null,t):a;l[h]=bo(r,m,this.exactPath),l[f]=this.exact||this.exactPath?l[h]:function(n,e){return 0===n.path.replace(po,"/").indexOf(e.path.replace(po,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,m);var g=l[h]?this.ariaCurrentValue:null,v=function(n){Wo(n)&&(e.replace?t.replace(o,Fo):t.push(o,Fo))},b={click:Wo};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:l},_=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:a,navigate:v,isActive:l[f],isExactActive:l[h]});if(_){if(1===_.length)return _[0];if(_.length>1||!_.length)return 0===_.length?n():n("span",{},_)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":g};else{var x=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(x){x.isStatic=!1;var w=x.data=to({},x.data);for(var E in w.on=w.on||{},w.on){var k=w.on[E];E in b&&(w.on[E]=Array.isArray(k)?k:[k])}for(var T in b)T in w.on?w.on[T].push(b[T]):w.on[T]=v;var R=x.data.attrs=to({},x.data.attrs);R.href=s,R["aria-current"]=g}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Wo(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Zo="undefined"!=typeof window;function Go(n,e,t,r,i){var o=e||[],a=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,i,o,a){var s=i.path,l=i.name;0;var u=i.pathToRegexpOptions||{},c=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ko(e.path+"/"+n)}(s,o,u.strict);"boolean"==typeof i.caseSensitive&&(u.sensitive=i.caseSensitive);var d={path:c,regex:Xo(c,u),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:l,parent:o,matchAs:a,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var o=a?ko(a+"/"+i.path):void 0;n(e,t,r,i,d,o)}));t[d.path]||(e.push(d.path),t[d.path]=d);if(void 0!==i.alias)for(var p=Array.isArray(i.alias)?i.alias:[i.alias],f=0;f<p.length;++f){0;var h={path:p[f],children:i.children};n(e,t,r,h,o,d.path||"/")}l&&(r[l]||(r[l]=d))}(o,a,s,n,i)}));for(var l=0,u=o.length;l<u;l++)"*"===o[l]&&(o.push(o.splice(l,1)[0]),u--,l--);return{pathList:o,pathMap:a,nameMap:s}}function Xo(n,e){return Ro(n,[],e)}function Ko(n,e){var t=Go(n),r=t.pathList,i=t.pathMap,o=t.nameMap;function a(n,t,a){var s=Uo(n,t,!1,e),u=s.name;if(u){var c=o[u];if(!c)return l(null,s);var d=c.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&d.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=qo(c.path,s.params),l(c,s,a)}if(s.path){s.params={};for(var f=0;f<r.length;f++){var h=r[f],m=i[h];if(Qo(m.regex,s.path,s.params))return l(m,s,a)}}return l(null,s)}function s(n,t){var r=n.redirect,i="function"==typeof r?r(fo(n,t,null,e)):r;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return l(null,t);var s=i,u=s.name,c=s.path,d=t.query,p=t.hash,f=t.params;if(d=s.hasOwnProperty("query")?s.query:d,p=s.hasOwnProperty("hash")?s.hash:p,f=s.hasOwnProperty("params")?s.params:f,u){o[u];return a({_normalized:!0,name:u,query:d,hash:p,params:f},void 0,t)}if(c){var h=function(n,e){return Eo(n,e.parent?e.parent.path:"/",!0)}(c,n);return a({_normalized:!0,path:qo(h,f),query:d,hash:p},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=a({_normalized:!0,path:qo(t,e.params)});if(r){var i=r.matched,o=i[i.length-1];return e.params=r.params,l(o,e)}return l(null,e)}(0,t,n.matchAs):fo(n,t,r,e)}return{match:a,addRoute:function(n,e){var t="object"!=typeof n?o[n]:void 0;Go([e||n],r,i,o,t),t&&t.alias.length&&Go(t.alias.map((function(n){return{path:n,children:[e]}})),r,i,o,t)},getRoutes:function(){return r.map((function(n){return i[n]}))},addRoutes:function(n){Go(n,r,i,o)}}}function Qo(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var i=1,o=r.length;i<o;++i){var a=n.keys[i-1];a&&(t[a.name||"pathMatch"]="string"==typeof r[i]?so(r[i]):r[i])}return!0}var Jo=Zo&&window.performance&&window.performance.now?window.performance:Date;function na(){return Jo.now().toFixed(3)}var ea=na();function ta(){return ea}function ra(n){return ea=n}var ia=Object.create(null);function oa(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=to({},window.history.state);return t.key=ta(),window.history.replaceState(t,"",e),window.addEventListener("popstate",la),function(){window.removeEventListener("popstate",la)}}function aa(n,e,t,r){if(n.app){var i=n.options.scrollBehavior;i&&n.app.$nextTick((function(){var o=function(){var n=ta();if(n)return ia[n]}(),a=i.call(n,e,t,r?o:null);a&&("function"==typeof a.then?a.then((function(n){fa(n,o)})).catch((function(n){0})):fa(a,o))}))}}function sa(){var n=ta();n&&(ia[n]={x:window.pageXOffset,y:window.pageYOffset})}function la(n){sa(),n.state&&n.state.key&&ra(n.state.key)}function ua(n){return da(n.x)||da(n.y)}function ca(n){return{x:da(n.x)?n.x:window.pageXOffset,y:da(n.y)?n.y:window.pageYOffset}}function da(n){return"number"==typeof n}var pa=/^#\d/;function fa(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var i=pa.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(i){var o=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(i,o={x:da((t=o).x)?t.x:0,y:da(t.y)?t.y:0})}else ua(n)&&(e=ca(n))}else r&&ua(n)&&(e=ca(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var ha,ma=Zo&&((-1===(ha=window.navigator.userAgent).indexOf("Android 2.")&&-1===ha.indexOf("Android 4.0")||-1===ha.indexOf("Mobile Safari")||-1!==ha.indexOf("Chrome")||-1!==ha.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function ga(n,e){sa();var t=window.history;try{if(e){var r=to({},t.state);r.key=ta(),t.replaceState(r,"",n)}else t.pushState({key:ra(na())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function va(n){ga(n,!0)}var ba={redirected:2,aborted:4,cancelled:8,duplicated:16};function ya(n,e){return xa(n,e,ba.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return wa.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function _a(n,e){return xa(n,e,ba.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function xa(n,e,t,r){var i=new Error(r);return i._isRouter=!0,i.from=n,i.to=e,i.type=t,i}var wa=["params","query","hash"];function Ea(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function ka(n,e){return Ea(n)&&n._isRouter&&(null==e||n.type===e)}function Ta(n,e,t){var r=function(i){i>=n.length?t():n[i]?e(n[i],(function(){r(i+1)})):r(i+1)};r(0)}function Ra(n){return function(e,t,r){var i=!1,o=0,a=null;Ca(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){i=!0,o++;var l,u=Aa((function(e){var i;((i=e).__esModule||$a&&"Module"===i[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:No.extend(e),t.components[s]=e,--o<=0&&r()})),c=Aa((function(n){var e="Failed to resolve async component "+s+": "+n;a||(a=Ea(n)?n:new Error(e),r(a))}));try{l=n(u,c)}catch(n){c(n)}if(l)if("function"==typeof l.then)l.then(u,c);else{var d=l.component;d&&"function"==typeof d.then&&d.then(u,c)}}})),i||r()}}function Ca(n,e){return Sa(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Sa(n){return Array.prototype.concat.apply([],n)}var $a="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Aa(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var Oa=function(n,e){this.router=n,this.base=function(n){if(!n)if(Zo){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=mo,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Ia(n,e,t,r){var i=Ca(n,(function(n,r,i,o){var a=function(n,e){"function"!=typeof n&&(n=No.extend(n));return n.options[e]}(n,e);if(a)return Array.isArray(a)?a.map((function(n){return t(n,r,i,o)})):t(a,r,i,o)}));return Sa(r?i.reverse():i)}function Va(n,e){if(e)return function(){return n.apply(e,arguments)}}Oa.prototype.listen=function(n){this.cb=n},Oa.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Oa.prototype.onError=function(n){this.errorCbs.push(n)},Oa.prototype.transitionTo=function(n,e,t){var r,i=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var o=this.current;this.confirmTransition(r,(function(){i.updateRoute(r),e&&e(r),i.ensureURL(),i.router.afterHooks.forEach((function(n){n&&n(r,o)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!i.ready&&(ka(n,ba.redirected)&&o===mo||(i.ready=!0,i.readyErrorCbs.forEach((function(e){e(n)}))))}))},Oa.prototype.confirmTransition=function(n,e,t){var r=this,i=this.current;this.pending=n;var o,a,s=function(n){!ka(n)&&Ea(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,u=i.matched.length-1;if(bo(n,i)&&l===u&&n.matched[l]===i.matched[u])return this.ensureURL(),n.hash&&aa(this.router,i,n,!1),s(((a=xa(o=i,n,ba.duplicated,'Avoided redundant navigation to current location: "'+o.fullPath+'".')).name="NavigationDuplicated",a));var c=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),d=c.updated,p=c.deactivated,f=c.activated,h=[].concat(function(n){return Ia(n,"beforeRouteLeave",Va,!0)}(p),this.router.beforeHooks,function(n){return Ia(n,"beforeRouteUpdate",Va)}(d),f.map((function(n){return n.beforeEnter})),Ra(f)),m=function(e,t){if(r.pending!==n)return s(_a(i,n));try{e(n,i,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return xa(n,e,ba.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(i,n))):Ea(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(ya(i,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Ta(h,m,(function(){Ta(function(n){return Ia(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,i,o){return n(r,i,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),o(n)}))}}(n,t,r)}))}(f).concat(r.router.resolveHooks),m,(function(){if(r.pending!==n)return s(_a(i,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){_o(n)}))}))}))},Oa.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Oa.prototype.setupListeners=function(){},Oa.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=mo,this.pending=null};var za=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Da(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=ma&&t;r&&this.listeners.push(oa());var i=function(){var t=n.current,i=Da(n.base);n.current===mo&&i===n._startLocation||n.transitionTo(i,(function(n){r&&aa(e,n,t,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){ga(ko(r.base+n.fullPath)),aa(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){va(ko(r.base+n.fullPath)),aa(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Da(this.base)!==this.current.fullPath){var e=ko(this.base+this.current.fullPath);n?ga(e):va(e)}},e.prototype.getCurrentLocation=function(){return Da(this.base)},e}(Oa);function Da(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ko(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var ja=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=Da(n);if(!/^\/#/.test(e))return window.location.replace(ko(n+"/#"+e)),!0}(this.base)||Pa()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=ma&&e;t&&this.listeners.push(oa());var r=function(){var e=n.current;Pa()&&n.transitionTo(Ba(),(function(r){t&&aa(n.router,r,e,!0),ma||Ma(r.fullPath)}))},i=ma?"popstate":"hashchange";window.addEventListener(i,r),this.listeners.push((function(){window.removeEventListener(i,r)}))}},e.prototype.push=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){Ha(n.fullPath),aa(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){Ma(n.fullPath),aa(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Ba()!==e&&(n?Ha(e):Ma(e))},e.prototype.getCurrentLocation=function(){return Ba()},e}(Oa);function Pa(){var n=Ba();return"/"===n.charAt(0)||(Ma("/"+n),!1)}function Ba(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function La(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Ha(n){ma?ga(La(n)):window.location.hash=n}function Ma(n){ma?va(La(n)):window.location.replace(La(n))}var qa=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){ka(n,ba.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Oa),Ua=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ko(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!ma&&!1!==n.fallback,this.fallback&&(e="hash"),Zo||(e="abstract"),this.mode=e,e){case"history":this.history=new za(this,n.base);break;case"hash":this.history=new ja(this,n.base,this.fallback);break;case"abstract":this.history=new qa(this,n.base);break;default:0}},Na={currentRoute:{configurable:!0}};Ua.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Na.currentRoute.get=function(){return this.history&&this.history.current},Ua.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof za||t instanceof ja){var r=function(n){t.setupListeners(),function(n){var r=t.current,i=e.options.scrollBehavior;ma&&i&&"fullPath"in n&&aa(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Ua.prototype.beforeEach=function(n){return Ya(this.beforeHooks,n)},Ua.prototype.beforeResolve=function(n){return Ya(this.resolveHooks,n)},Ua.prototype.afterEach=function(n){return Ya(this.afterHooks,n)},Ua.prototype.onReady=function(n,e){this.history.onReady(n,e)},Ua.prototype.onError=function(n){this.history.onError(n)},Ua.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Ua.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Ua.prototype.go=function(n){this.history.go(n)},Ua.prototype.back=function(){this.go(-1)},Ua.prototype.forward=function(){this.go(1)},Ua.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Ua.prototype.resolve=function(n,e,t){var r=Uo(n,e=e||this.history.current,t,this),i=this.match(r,e),o=i.redirectedFrom||i.fullPath;return{location:r,route:i,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ko(n+"/"+r):r}(this.history.base,o,this.mode),normalizedTo:r,resolved:i}},Ua.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ua.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==mo&&this.history.transitionTo(this.history.getCurrentLocation())},Ua.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==mo&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ua.prototype,Na);var Fa=Ua;function Ya(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Ua.install=function n(e){if(!n.installed||No!==e){n.installed=!0,No=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",xo),e.component("RouterLink",Yo);var i=e.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},Ua.version="3.6.5",Ua.isNavigationFailure=ka,Ua.NavigationFailureType=ba,Ua.START_LOCATION=mo,Zo&&window.Vue&&window.Vue.use(Ua);t(155),t(22),t(164);t(165),t(45);var Wa={NotFound:()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,369)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,368))},Za={"v-72a9ee7c":()=>t.e(6).then(t.bind(null,371)),"v-c2184f54":()=>t.e(7).then(t.bind(null,372)),"v-4a1eacb6":()=>t.e(8).then(t.bind(null,373)),"v-56bac38c":()=>t.e(9).then(t.bind(null,374)),"v-3e99d850":()=>t.e(10).then(t.bind(null,375)),"v-3b89e5c1":()=>t.e(11).then(t.bind(null,376)),"v-4cd14734":()=>t.e(12).then(t.bind(null,377)),"v-2e6c17e3":()=>t.e(13).then(t.bind(null,378)),"v-3ebe77ee":()=>t.e(15).then(t.bind(null,379)),"v-7fd48428":()=>t.e(16).then(t.bind(null,380)),"v-1d3661da":()=>t.e(14).then(t.bind(null,381)),"v-bfeb2552":()=>t.e(17).then(t.bind(null,382)),"v-12f412e4":()=>t.e(18).then(t.bind(null,383)),"v-a3179a3e":()=>t.e(20).then(t.bind(null,384)),"v-03ff47ee":()=>t.e(22).then(t.bind(null,385)),"v-42f8cede":()=>t.e(19).then(t.bind(null,386)),"v-3042a0fd":()=>t.e(21).then(t.bind(null,387)),"v-709769d8":()=>t.e(23).then(t.bind(null,388)),"v-6df42ea1":()=>t.e(24).then(t.bind(null,389)),"v-a6e17e70":()=>t.e(25).then(t.bind(null,390)),"v-3a3d840e":()=>t.e(26).then(t.bind(null,391)),"v-14e5d69d":()=>t.e(27).then(t.bind(null,392)),"v-515c41e0":()=>t.e(28).then(t.bind(null,393)),"v-5317f8e4":()=>t.e(29).then(t.bind(null,394)),"v-77764576":()=>t.e(30).then(t.bind(null,395)),"v-55094428":()=>t.e(32).then(t.bind(null,396)),"v-6491116a":()=>t.e(33).then(t.bind(null,397)),"v-1c601009":()=>t.e(31).then(t.bind(null,398)),"v-63fd00de":()=>t.e(35).then(t.bind(null,399)),"v-31a3f241":()=>t.e(34).then(t.bind(null,400)),"v-216d0ffc":()=>t.e(36).then(t.bind(null,401)),"v-083db654":()=>t.e(37).then(t.bind(null,402)),"v-c852c146":()=>t.e(38).then(t.bind(null,403)),"v-0308fa66":()=>t.e(40).then(t.bind(null,404)),"v-1edcd662":()=>t.e(41).then(t.bind(null,405)),"v-24399f35":()=>t.e(39).then(t.bind(null,406)),"v-7fc5fd71":()=>t.e(42).then(t.bind(null,407)),"v-73af1190":()=>t.e(44).then(t.bind(null,408)),"v-7ba2c0e8":()=>t.e(45).then(t.bind(null,409)),"v-c0694bec":()=>t.e(46).then(t.bind(null,410)),"v-b39a1cd8":()=>t.e(47).then(t.bind(null,370)),"v-7952917a":()=>t.e(43).then(t.bind(null,411)),"v-7c408435":()=>t.e(48).then(t.bind(null,412)),"v-58b44ebe":()=>t.e(50).then(t.bind(null,413)),"v-01b5feb6":()=>t.e(49).then(t.bind(null,414)),"v-c9bd4b28":()=>t.e(51).then(t.bind(null,415))};function Ga(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Xa=/-(\w)/g,Ka=Ga(n=>n.replace(Xa,(n,e)=>e?e.toUpperCase():"")),Qa=/\B([A-Z])/g,Ja=Ga(n=>n.replace(Qa,"-$1").toLowerCase()),ns=Ga(n=>n.charAt(0).toUpperCase()+n.slice(1));function es(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(ns(Ka(e))):n(ns(e))||n(Ja(e))}const ts=Object.assign({},Wa,Za),rs=n=>ts[n],is=n=>Za[n],os=n=>Wa[n],as=n=>Wt.component(n);function ss(n){return es(is,n)}function ls(n){return es(os,n)}function us(n){return es(rs,n)}function cs(n){return es(as,n)}function ds(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!cs(n)&&us(n)){const e=await us(n)();Wt.component(n,e.default)}}))}function ps(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var fs=t(123),hs=t.n(fs),ms={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${n[t]}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=vs(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=bs(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return hs()([{name:"description",content:this.$description}],n,this.siteMeta,ys)},updateCanonicalLink(){gs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",vs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){bs(null,this.currentMetaTags),gs()}};function gs(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function vs(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function bs(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function ys(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}t(126);var _s=t(69),xs={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(_s)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+t;for(let n=0;n<e.length;n++){const o=e[n],a=e[n+1],s=0===n&&0===t||t>=o.parentElement.offsetTop+10&&(!a||t<a.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(o.hash)){const t=o;if(i===r)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},ws=t(44),Es=t.n(ws),ks={mounted(){Es.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Wt.component(n.name)||Es.a.start(),t()}),this.$router.afterEach(()=>{Es.a.done(),this.isSidebarOpen=!1})}};t(274),t(275);class Ts{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var Rs={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new Ts).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}},Cs="auto",Ss="zoom-in",$s="zoom-out",As="grab",Os="move";function Is(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i={passive:!1};r?n.addEventListener(e,t,i):n.removeEventListener(e,t,i)}function Vs(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function zs(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Ds(n,e,t){!function(n){var e=js,t=Ps;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var i=n.transform;delete n.transform,n[t]=i}}(e);var r=n.style,i={};for(var o in e)t&&(i[o]=r[o]||""),r[o]=e[o];return i}var js="transition",Ps="transform",Bs="transform",Ls="transitionend";var Hs=function(){},Ms={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Hs,onClose:Hs,onGrab:Hs,onMove:Hs,onRelease:Hs,onBeforeOpen:Hs,onBeforeClose:Hs,onBeforeGrab:Hs,onBeforeRelease:Hs,onImageLoading:Hs,onImageLoaded:Hs},qs={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Ns(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,i=this.lastScrollPosition.y-t,o=this.options.scrollThreshold;(Math.abs(i)>=o||Math.abs(r)>=o)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Us(n)&&!Ns(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Us(n)&&!Ns(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Us(n){return 0===n.button}function Ns(n){return n.metaKey||n.ctrlKey}var Fs={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Ds(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Is(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Ds(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Ys="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Ws=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Zs=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Gs={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=zs(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,i=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?As:$s,transition:Bs+"\n        "+r+"s\n        "+i,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Ds(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Ds(this.el,{transform:"none"})},grab:function(n,e,t){var r=Xs(),i=r.x-n,o=r.y-e;Ds(this.el,{cursor:Os,transform:"translate3d(\n        "+(this.translate.x+i)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=Xs(),i=r.x-n,o=r.y-e;Ds(this.el,{transition:Bs,transform:"translate3d(\n        "+(this.translate.x+i)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Ds(this.el,this.styleClose)},restoreOpenStyle:function(){Ds(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=Xs(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,i=r.customSize,o=r.scaleBase;if(!i&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(i&&"object"===(void 0===i?"undefined":Ys(i)))return{x:i.width/this.rect.width,y:i.height/this.rect.height};var a=this.rect.width/2,s=this.rect.height/2,l=Xs(),u={x:l.x-a,y:l.y-s},c=u.x/a,d=u.y/s,p=o+Math.min(c,d);if(i&&"string"==typeof i){var f=t||this.el.naturalWidth,h=e||this.el.naturalHeight,m=parseFloat(i)*f/(100*this.rect.width),g=parseFloat(i)*h/(100*this.rect.height);if(p>m||p>g)return{x:m,y:g}}return{x:p,y:p}}};function Xs(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Ks(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Is(n,r,e[r],t)}))}var Qs=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Gs),this.overlay=Object.create(Fs),this.handler=Object.create(qs),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Zs({},Ms,e),this.overlay.init(this),this.handler.init(this)}return Ws(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Ss,Is(n,"click",this.handler.click),this.options.preloadImage&&Vs(zs(n)));return this}},{key:"config",value:function(n){return n?(Zs(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var i=this.target.srcOriginal;null!=i&&(this.options.onImageLoading(r),Vs(i,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Is(document,"scroll",this.handler.scroll),Is(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Is(window,"resize",this.handler.resizeWindow);var o=function n(){Is(r,Ls,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Ks(document,e.handler,!0),t(r)};return Is(r,Ls,o),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Cs,this.overlay.fadeOut(),this.target.zoomOut(),Is(document,"scroll",this.handler.scroll,!1),Is(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Is(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Is(t,Ls,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Ks(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Is(t,Ls,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var i=this.target.el;this.options.onBeforeGrab(i),this.released=!1,this.target.grab(n,e,t);var o=function n(){Is(i,Ls,n,!1),r(i)};return Is(i,Ls,o),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Os,this.target.move(n,e,t);var i=this.target.el,o=function n(){Is(i,Ls,n,!1),r(i)};return Is(i,Ls,o),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Cs,this.target.restoreOpenStyle();var r=function r(){Is(t,Ls,r,!1),n.lock=!1,n.released=!0,e(t)};return Is(t,Ls,r),this}}}]),n}();const Js=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),nl=Number("500");class el{constructor(){this.instance=new Qs(Js)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=nl){setTimeout(()=>this.update(n),e)}}var tl={watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new el,this.$vuepress.zooming.updateDelay()}},rl=(t(276),t(277),t(278),[ms,xs,ks,Rs,tl,{}]),il={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ps("layout",n),Wt.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},ol=t(0),al=Object(ol.a)(il,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(al,"mixins",rl);const sl=[{name:"v-72a9ee7c",path:"/pages/Notes/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-72a9ee7c").then(t)}},{path:"/pages/Notes/index.html",redirect:"/pages/Notes/"},{path:"/00.目录页/Notes.html",redirect:"/pages/Notes/"},{name:"v-c2184f54",path:"/pages/Projects/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-c2184f54").then(t)}},{path:"/pages/Projects/index.html",redirect:"/pages/Projects/"},{path:"/00.目录页/Projects.html",redirect:"/pages/Projects/"},{name:"v-4a1eacb6",path:"/pages/Teasting/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-4a1eacb6").then(t)}},{path:"/pages/Teasting/index.html",redirect:"/pages/Teasting/"},{path:"/00.目录页/Teasting.html",redirect:"/pages/Teasting/"},{name:"v-56bac38c",path:"/pages/Verilog_01/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-56bac38c").then(t)}},{path:"/pages/Verilog_01/index.html",redirect:"/pages/Verilog_01/"},{path:"/01.Verilog/01.Verilog HDL基本要素.html",redirect:"/pages/Verilog_01/"},{name:"v-3e99d850",path:"/pages/Verilog_02/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-3e99d850").then(t)}},{path:"/pages/Verilog_02/index.html",redirect:"/pages/Verilog_02/"},{path:"/01.Verilog/02.Verilog HDL基本数据类型.html",redirect:"/pages/Verilog_02/"},{name:"v-3b89e5c1",path:"/pages/Verilog_03/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-3b89e5c1").then(t)}},{path:"/pages/Verilog_03/index.html",redirect:"/pages/Verilog_03/"},{path:"/01.Verilog/03.Verilog运算符和表达式.html",redirect:"/pages/Verilog_03/"},{name:"v-4cd14734",path:"/pages/Verilog_04/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-4cd14734").then(t)}},{path:"/pages/Verilog_04/index.html",redirect:"/pages/Verilog_04/"},{path:"/01.Verilog/04.Verilog HDL的模块.html",redirect:"/pages/Verilog_04/"},{name:"v-2e6c17e3",path:"/pages/Verilog_05/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-2e6c17e3").then(t)}},{path:"/pages/Verilog_05/index.html",redirect:"/pages/Verilog_05/"},{path:"/01.Verilog/05.VerilogHDL程序设计和描述方式.html",redirect:"/pages/Verilog_05/"},{name:"v-3ebe77ee",path:"/pages/Verilog_07/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-3ebe77ee").then(t)}},{path:"/pages/Verilog_07/index.html",redirect:"/pages/Verilog_07/"},{path:"/01.Verilog/07.Verilog HDL组合电路设计的方法.html",redirect:"/pages/Verilog_07/"},{name:"v-7fd48428",path:"/pages/Verilog_08/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-7fd48428").then(t)}},{path:"/pages/Verilog_08/index.html",redirect:"/pages/Verilog_08/"},{path:"/01.Verilog/08.verilog HDL组合电路之数字加法器.html",redirect:"/pages/Verilog_08/"},{name:"v-1d3661da",path:"/pages/Verilog_06/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-1d3661da").then(t)}},{path:"/pages/Verilog_06/index.html",redirect:"/pages/Verilog_06/"},{path:"/01.Verilog/06.Verilog HDL程序设计思想概览.html",redirect:"/pages/Verilog_06/"},{name:"v-bfeb2552",path:"/pages/Verilog_09/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-bfeb2552").then(t)}},{path:"/pages/Verilog_09/index.html",redirect:"/pages/Verilog_09/"},{path:"/01.Verilog/09.Verilog HDL组合电路之数据比较器.html",redirect:"/pages/Verilog_09/"},{name:"v-12f412e4",path:"/pages/Verilog_10/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-12f412e4").then(t)}},{path:"/pages/Verilog_10/index.html",redirect:"/pages/Verilog_10/"},{path:"/01.Verilog/10.Verilog HDL组合电路之数据选择器.html",redirect:"/pages/Verilog_10/"},{name:"v-a3179a3e",path:"/pages/Verilog_12/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-a3179a3e").then(t)}},{path:"/pages/Verilog_12/index.html",redirect:"/pages/Verilog_12/"},{path:"/01.Verilog/12.verilog HDL组合电路之数字译码器.html",redirect:"/pages/Verilog_12/"},{name:"v-03ff47ee",path:"/pages/Verilog_14/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-03ff47ee").then(t)}},{path:"/pages/Verilog_14/index.html",redirect:"/pages/Verilog_14/"},{path:"/01.Verilog/14.Verilog HDL时序电路设计基础.html",redirect:"/pages/Verilog_14/"},{name:"v-42f8cede",path:"/pages/Verilog_11/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-42f8cede").then(t)}},{path:"/pages/Verilog_11/index.html",redirect:"/pages/Verilog_11/"},{path:"/01.Verilog/11.verilog HDL组合电路之数字编码器.html",redirect:"/pages/Verilog_11/"},{name:"v-3042a0fd",path:"/pages/Verilog_13/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-3042a0fd").then(t)}},{path:"/pages/Verilog_13/index.html",redirect:"/pages/Verilog_13/"},{path:"/01.Verilog/13.verilog HDL组合电路之奇偶校验器.html",redirect:"/pages/Verilog_13/"},{name:"v-709769d8",path:"/pages/Verilog_15/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-709769d8").then(t)}},{path:"/pages/Verilog_15/index.html",redirect:"/pages/Verilog_15/"},{path:"/01.Verilog/15.Verilog HDL时序电路之基本触发器.html",redirect:"/pages/Verilog_15/"},{name:"v-6df42ea1",path:"/pages/Verilog_16/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-6df42ea1").then(t)}},{path:"/pages/Verilog_16/index.html",redirect:"/pages/Verilog_16/"},{path:"/01.Verilog/16.Verilog HDL时序逻辑电路之计数器.html",redirect:"/pages/Verilog_16/"},{name:"v-a6e17e70",path:"/pages/Verilog_17/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-a6e17e70").then(t)}},{path:"/pages/Verilog_17/index.html",redirect:"/pages/Verilog_17/"},{path:"/01.Verilog/17.Verilog HDL时序逻辑电路之移位寄存器.html",redirect:"/pages/Verilog_17/"},{name:"v-3a3d840e",path:"/pages/Verilog_18/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-3a3d840e").then(t)}},{path:"/pages/Verilog_18/index.html",redirect:"/pages/Verilog_18/"},{path:"/01.Verilog/18.Verilog HDL时序逻辑电路之信号发生器.html",redirect:"/pages/Verilog_18/"},{name:"v-14e5d69d",path:"/pages/Verilog_19/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-14e5d69d").then(t)}},{path:"/pages/Verilog_19/index.html",redirect:"/pages/Verilog_19/"},{path:"/01.Verilog/19.Verilog HDL有限状态机（FSM）设计基础.html",redirect:"/pages/Verilog_19/"},{name:"v-515c41e0",path:"/pages/Rust_00/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-515c41e0").then(t)}},{path:"/pages/Rust_00/index.html",redirect:"/pages/Rust_00/"},{path:"/02.Rust/00.Rust的基本素养.html",redirect:"/pages/Rust_00/"},{name:"v-5317f8e4",path:"/pages/Rust_01/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-5317f8e4").then(t)}},{path:"/pages/Rust_01/index.html",redirect:"/pages/Rust_01/"},{path:"/02.Rust/01.Rust的变量与可变性.html",redirect:"/pages/Rust_01/"},{name:"v-77764576",path:"/pages/Rust_02/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-77764576").then(t)}},{path:"/pages/Rust_02/index.html",redirect:"/pages/Rust_02/"},{path:"/02.Rust/02.Rust的数据类型.html",redirect:"/pages/Rust_02/"},{name:"v-55094428",path:"/pages/Rust_04/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-55094428").then(t)}},{path:"/pages/Rust_04/index.html",redirect:"/pages/Rust_04/"},{path:"/02.Rust/04.Rust的控制流.html",redirect:"/pages/Rust_04/"},{name:"v-6491116a",path:"/pages/Rust_05/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-6491116a").then(t)}},{path:"/pages/Rust_05/index.html",redirect:"/pages/Rust_05/"},{path:"/02.Rust/05.Rust的所有权概念.html",redirect:"/pages/Rust_05/"},{name:"v-1c601009",path:"/pages/Rust_03/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-1c601009").then(t)}},{path:"/pages/Rust_03/index.html",redirect:"/pages/Rust_03/"},{path:"/02.Rust/03.Rust的函数和注释.html",redirect:"/pages/Rust_03/"},{name:"v-63fd00de",path:"/pages/Rust_07/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-63fd00de").then(t)}},{path:"/pages/Rust_07/index.html",redirect:"/pages/Rust_07/"},{path:"/02.Rust/07.Rust的Slice类型.html",redirect:"/pages/Rust_07/"},{name:"v-31a3f241",path:"/pages/Rust_06/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-31a3f241").then(t)}},{path:"/pages/Rust_06/index.html",redirect:"/pages/Rust_06/"},{path:"/02.Rust/06.Rust的引用和借用.html",redirect:"/pages/Rust_06/"},{name:"v-216d0ffc",path:"/pages/Rust_08/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-216d0ffc").then(t)}},{path:"/pages/Rust_08/index.html",redirect:"/pages/Rust_08/"},{path:"/02.Rust/08.Rust的结构体类型.html",redirect:"/pages/Rust_08/"},{name:"v-083db654",path:"/pages/Rust_09/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-083db654").then(t)}},{path:"/pages/Rust_09/index.html",redirect:"/pages/Rust_09/"},{path:"/02.Rust/09.Rust的结构体的打印与调试.html",redirect:"/pages/Rust_09/"},{name:"v-c852c146",path:"/pages/Rust_10/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-c852c146").then(t)}},{path:"/pages/Rust_10/index.html",redirect:"/pages/Rust_10/"},{path:"/02.Rust/10.Rust的方法.html",redirect:"/pages/Rust_10/"},{name:"v-0308fa66",path:"/pages/Rust_12/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-0308fa66").then(t)}},{path:"/pages/Rust_12/index.html",redirect:"/pages/Rust_12/"},{path:"/02.Rust/12.Rust的match控制流结构.html",redirect:"/pages/Rust_12/"},{name:"v-1edcd662",path:"/pages/Rust_13/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-1edcd662").then(t)}},{path:"/pages/Rust_13/index.html",redirect:"/pages/Rust_13/"},{path:"/02.Rust/13.Rust的语法糖-iflet.html",redirect:"/pages/Rust_13/"},{name:"v-24399f35",path:"/pages/Rust_11/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-24399f35").then(t)}},{path:"/pages/Rust_11/index.html",redirect:"/pages/Rust_11/"},{path:"/02.Rust/11.Rust的枚举.html",redirect:"/pages/Rust_11/"},{name:"v-7fc5fd71",path:"/pages/Rust_14/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-7fc5fd71").then(t)}},{path:"/pages/Rust_14/index.html",redirect:"/pages/Rust_14/"},{path:"/02.Rust/14.Rust的模块系统.html",redirect:"/pages/Rust_14/"},{name:"v-73af1190",path:"/pages/Rust_16/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-73af1190").then(t)}},{path:"/pages/Rust_16/index.html",redirect:"/pages/Rust_16/"},{path:"/02.Rust/16.Rust的String类型基本原理.html",redirect:"/pages/Rust_16/"},{name:"v-7ba2c0e8",path:"/pages/Rust_17/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-7ba2c0e8").then(t)}},{path:"/pages/Rust_17/index.html",redirect:"/pages/Rust_17/"},{path:"/02.Rust/17.Rust的HashMap.html",redirect:"/pages/Rust_17/"},{name:"v-c0694bec",path:"/pages/Rust_18/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-c0694bec").then(t)}},{path:"/pages/Rust_18/index.html",redirect:"/pages/Rust_18/"},{path:"/02.Rust/18.Rust基础部分的学习总结.html",redirect:"/pages/Rust_18/"},{name:"v-b39a1cd8",path:"/pages/DP_00/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-b39a1cd8").then(t)}},{path:"/pages/DP_00/index.html",redirect:"/pages/DP_00/"},{path:"/03.DP/00.深度学习的基本原理.html",redirect:"/pages/DP_00/"},{name:"v-7952917a",path:"/pages/Rust_15/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-7952917a").then(t)}},{path:"/pages/Rust_15/index.html",redirect:"/pages/Rust_15/"},{path:"/02.Rust/15.Rust的Vector.html",redirect:"/pages/Rust_15/"},{name:"v-7c408435",path:"/pages/DP_01/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-7c408435").then(t)}},{path:"/pages/DP_01/index.html",redirect:"/pages/DP_01/"},{path:"/03.DP/01.线性回归.html",redirect:"/pages/DP_01/"},{name:"v-58b44ebe",path:"/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-58b44ebe").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-01b5feb6",path:"/archives/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-01b5feb6").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-c9bd4b28",path:"/message-board/",component:al,beforeEnter:(n,e,t)=>{ds("Layout","v-c9bd4b28").then(t)}},{path:"/message-board/index.html",redirect:"/message-board/"},{path:"/message_board/留言板.html",redirect:"/message-board/"},{path:"*",component:al}],ll={title:"原码纪事",description:"vdoing博客主题模板",base:"/",headTags:[["link",{rel:"icon",href:"https://cdn.jsdelivr.net/gh/eryajf/tu/img/image_20220720_132133.ico"}],["meta",{name:"keywords",content:"猎户f,golang,vue,go-web,go-admin,go-ldap-admin"}],["meta",{name:"theme-color",content:"#11a8cd"}],["meta",{name:"referrer",content:"no-referrer-when-downgrade"}],["script",{language:"javascript",type:"text/javascript",src:"/js/pgmanor-self.js"}],["script",{async:!0,src:"https://www.googletagmanager.com/gtag/js?id=G-LPRG9SPLFF"}],["script",{},"\n      window.dataLayer = window.dataLayer || [];\n      function gtag(){dataLayer.push(arguments);}\n      gtag('js', new Date());\n      gtag('config', 'G-LPRG9SPLFF');\n    "]],pages:[{title:"博客笔记",frontmatter:{title:"博客笔记",date:"2025-07-08T11:41:49.000Z",permalink:"/pages/Notes/"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/Notes.html",relativePath:"00.目录页/Notes.md",key:"v-72a9ee7c",path:"/pages/Notes/",headers:[{level:2,title:"Verilog",slug:"verilog",normalizedTitle:"verilog",charIndex:11},{level:2,title:"Rust",slug:"rust",normalizedTitle:"rust",charIndex:581},{level:2,title:"deep learning",slug:"deep-learning",normalizedTitle:"deep learning",charIndex:974}],headersStr:"Verilog Rust deep learning",content:"# 博客笔记\n\n\n# Verilog\n\n * 01.Verilog HDL语言基本要素\n * 02.Verilog HDL基本数据类型\n * 03.Verilog HDL运算符和表达式\n * 04.Verilog HDL模块\n * 05.Verilog HDL程序设计和描述方式\n * 06.Verilog HDL程序设计思想概览\n * 07.Verilog HDL组合电路设计的方法\n * 08.Verilog HDL组合电路之数字加法器\n * 09.Verilog HDL组合电路之数值比较器\n * 10.Verilog HDL组合电路之数据选择器\n * 11.Verilog HDL组合电路之数字编码器\n * 12.Verilog HDL组合电路之数字译码器\n * 13.Verilog HDL组合电路之奇偶校验器\n * 14.Verilog HDL时序电路设计基础\n * 15.Verilog HDL时序电路之基本触发器\n * 16.Verilog HDL时序逻辑电路之计数器\n * 17.Verilog HDL时序逻辑电路之移位寄存器\n * 18.Verilog HDL时序逻辑电路之信号发生器\n * 19.Verilog HDL有限状态机（FSM）设计基础\n\n----------------------------------------\n\n\n# Rust\n\n * 00.Rust的基本素养\n * 01.Rust的变量与可变性\n * 02.Rust的数据类型\n * 03.Rust的函数和注释\n * 04.Rust的控制流\n * 05.Rust的所有权概念\n * 06.Rust的引用和借用\n * 07.Rust的Slice类型\n * 08.Rust的结构体类型\n * 09.Rust的结构体的打印与调试\n * 10.Rust的方法\n * 11.Rust的枚举\n * 12.Rust的match控制流结构\n * 13.Rust的语法糖-iflet\n * 14.Rust的模块系统\n * 15.Rust的Vector\n * 16.Rust的String类型基本原理\n * 17.Rust的HashMap\n * 18.Rust基础部分的学习总结\n\n----------------------------------------\n\n\n# deep learning\n\n * 00.深度学习的基本原理\n * 01.线性回归\n\n----------------------------------------\n\n留言板",normalizedContent:"# 博客笔记\n\n\n# verilog\n\n * 01.verilog hdl语言基本要素\n * 02.verilog hdl基本数据类型\n * 03.verilog hdl运算符和表达式\n * 04.verilog hdl模块\n * 05.verilog hdl程序设计和描述方式\n * 06.verilog hdl程序设计思想概览\n * 07.verilog hdl组合电路设计的方法\n * 08.verilog hdl组合电路之数字加法器\n * 09.verilog hdl组合电路之数值比较器\n * 10.verilog hdl组合电路之数据选择器\n * 11.verilog hdl组合电路之数字编码器\n * 12.verilog hdl组合电路之数字译码器\n * 13.verilog hdl组合电路之奇偶校验器\n * 14.verilog hdl时序电路设计基础\n * 15.verilog hdl时序电路之基本触发器\n * 16.verilog hdl时序逻辑电路之计数器\n * 17.verilog hdl时序逻辑电路之移位寄存器\n * 18.verilog hdl时序逻辑电路之信号发生器\n * 19.verilog hdl有限状态机（fsm）设计基础\n\n----------------------------------------\n\n\n# rust\n\n * 00.rust的基本素养\n * 01.rust的变量与可变性\n * 02.rust的数据类型\n * 03.rust的函数和注释\n * 04.rust的控制流\n * 05.rust的所有权概念\n * 06.rust的引用和借用\n * 07.rust的slice类型\n * 08.rust的结构体类型\n * 09.rust的结构体的打印与调试\n * 10.rust的方法\n * 11.rust的枚举\n * 12.rust的match控制流结构\n * 13.rust的语法糖-iflet\n * 14.rust的模块系统\n * 15.rust的vector\n * 16.rust的string类型基本原理\n * 17.rust的hashmap\n * 18.rust基础部分的学习总结\n\n----------------------------------------\n\n\n# deep learning\n\n * 00.深度学习的基本原理\n * 01.线性回归\n\n----------------------------------------\n\n留言板",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"项目",frontmatter:{title:"项目",date:"2025-07-08T11:41:49.000Z",permalink:"/pages/Projects/"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/Projects.html",relativePath:"00.目录页/Projects.md",key:"v-c2184f54",path:"/pages/Projects/",headersStr:null,content:"# 项目\n\n留言板",normalizedContent:"# 项目\n\n留言板",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"吐槽",frontmatter:{title:"吐槽",date:"2025-08-17T21:35:00.000Z",permalink:"/pages/Teasting/"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/Teasting.html",relativePath:"00.目录页/Teasting.md",key:"v-4a1eacb6",path:"/pages/Teasting/",headersStr:null,content:"# 吐槽\n\n留言板",normalizedContent:"# 吐槽\n\n留言板",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"01.Verilog HDL语言基本要素",frontmatter:{title:"01.Verilog HDL语言基本要素",date:"2025-07-12T17:00:49.000Z",permalink:"/pages/Verilog_01/"},regularPath:"/01.Verilog/01.Verilog%20HDL%E5%9F%BA%E6%9C%AC%E8%A6%81%E7%B4%A0.html",relativePath:"01.Verilog/01.Verilog HDL基本要素.md",key:"v-56bac38c",path:"/pages/Verilog_01/",headers:[{level:2,title:"1、空白符",slug:"_1、空白符",normalizedTitle:"1、空白符",charIndex:24},{level:2,title:"2、注释",slug:"_2、注释",normalizedTitle:"2、注释",charIndex:279},{level:2,title:"3、标识符（给变量/模块起名字）",slug:"_3、标识符-给变量-模块起名字",normalizedTitle:"3、标识符（给变量/模块起名字）",charIndex:716},{level:2,title:"4、关键字",slug:"_4、关键字",normalizedTitle:"4、关键字",charIndex:1418},{level:2,title:"5、数字（如何表示0、1、不定、高阻态？）",slug:"_5、数字-如何表示0、1、不定、高阻态",normalizedTitle:"5、数字（如何表示0、1、不定、高阻态？）",charIndex:1763}],headersStr:"1、空白符 2、注释 3、标识符（给变量/模块起名字） 4、关键字 5、数字（如何表示0、1、不定、高阻态？）",content:"# Verilog HDL语言基本要素\n\n\n# 1、空白符\n\n * 包括空格符（\\b）、制表符（\\t）、换行符和换页符，编译时被忽略。\n\n * 示例：\n   \n   initial begin a = 3'b100; b = 3'b010; end\n   \n   \n   1\n   \n\n * 在加入空白符之后，代码变得更加可读：\n   \n   initial \n   begin \n       a = 3'b100; \n       b = 3'b010; \n   end\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n\n# 2、注释\n\n * 作用：用来写说明文字，不会被编译，是给可爱的同学们看的笔记，防止一觉睡醒看不懂了（汇编程序员的痛）。\n\n * 两种写法：\n   \n   * 单行注释：用 //，直到行尾都算注释。\n     \n     assign a = b & c;  // 这是单行注释：计算a等于b和c的按位与\n     \n     \n     1\n     \n   \n   * 多行注释：用 /* */，中间可以跨多行。\n     \n     /* 这是多行注释：\n        可以写很长的说明，\n        比如这个模块的功能是XXX */**重要规则**：\n     \n     \n     1\n     2\n     3\n     \n   \n   * 重要规则\n     \n     * 多行注释不能嵌套！比如 /* 注释1 /* 注释2 */ 注释1 */ 会报错。\n     \n     * 但多行注释里可以包含单行注释：/* // 这是合法的 */。\n\n\n# 3、标识符（给变量/模块起名字）\n\n作为一个类C语言，verilog十分有素养，所以它的标识符命名方式以及注意点和C语言的变量几乎没有区别\n\n * 组成：字母、数字、$、_，区分大小写，首字符必须为字母或下划线。\n\n * 示例：count、_CC_G5（合法）；30count、out*（非法）。\n\n * 转义标识符：以 \\ 开头，以空白结尾，可包含任意可打印字符（如 \\a+b=c）。\n\n * 合法示例：\n   \n   counter    // 纯字母\n   _data_in   // 下划线开头\n   $signal    // 美元符号开头（较少用）\n   \n   \n   1\n   2\n   3\n   \n\n * 非法示例：\n   \n   3state     // 数字开头\n   out#put    // 包含非法字符#\n   a+b        // 包含运算符+\n   \n   \n   1\n   2\n   3\n   \n\n * 特殊技巧：转义标识符\n   \n   * 如果非要起一个奇怪的名字（比如包含空格、符号），可以用 \\ 开头，空格结尾。\n   \n   * 示例：\n     \n     \\7400      // 实际名字是 \"7400\"（通常用于和传统电路编号兼容）\n     \\a+b=c     // 实际名字是 \"a+b=c\"\n     \\***       // 实际名字是 \"***\"\n     \n     \n     1\n     2\n     3\n     \n   \n   * 但不建议滥用，尽量用常规命名（如 and_gate 而不是 \\a&b）。\n\n\n# 4、关键字\n\n就是说verilog里面已经用于设计的“标识符”不能让它换工作，这就是关键字，这点和C语言没有任何区别。总之有点：咱们是兄弟，你的就是我的，我的还是我的，那种味儿……\n\n * 特点：\n   \n   * 全部是小写，比如 always 是关键字，但 ALWAYS 不是。\n   * 不能用来起名字！比如定义一个变量叫 module 会报错。\n\n * 常见关键字列表（不止这点，因为我用的框架不行）：\n   \n   关键字      作用\n   module   定义模块开头\n   input    声明输入端口\n   output   声明输出端口\n   reg      声明寄存器变量\n   wire     声明连线\n   always   描述时序/组合逻辑\n\n\n# 5、数字（如何表示0、1、不定、高阻态？）\n\n四种基本逻辑状态：\n\n状态    含义\n0     低电平、逻辑0或假\n1     高电平、逻辑1或真\nx/X   不确定或未知状态\nz/Z   高阻态\n\n * 整数表示法：<位宽>'<基数><数值>\n   \n   * 位宽：二进制位的总数（如 4'b1011 表示4位二进制数）。\n   \n   * 基数：\n     \n     基数符号   进制     合法字符\n     b/B    二进制    0,1,x,X,z,Z,?, _（下划线可忽略）\n     o/O    八进制    0-7,x,X,z,Z,?, _\n     d/D    十进制    0-9, _\n     h/H    十六进制   0-9, a-f, A-F, x,X,z,Z,?, _\n   \n   * 示例：\n     \n     8'b1010_1101    // 8位二进制，下划线提高可读性\n     16'hFF00        // 16位十六进制，等于65535\n     4'd10           // 4位十进制，实际存储为1010\n     3'b1x0          // 3位二进制，第二位未知\n     \n     \n     1\n     2\n     3\n     4\n     \n   \n   * 易错点：\n     \n     * 位宽不能是表达式：(2+2)'b11 ❌\n     * 负号必须在最左边：-4'd3 ✅，4'd-3 ❌\n\n * 实数（浮点数）表示法：\n   * 两种写法：\n     1. 直接写小数：3.14、0.5（注意：.5 是错的，必须写 0.5）。\n     2. 科学计数法：2.5e3（=2500）、1E-6（=0.000001）。",normalizedContent:"# verilog hdl语言基本要素\n\n\n# 1、空白符\n\n * 包括空格符（\\b）、制表符（\\t）、换行符和换页符，编译时被忽略。\n\n * 示例：\n   \n   initial begin a = 3'b100; b = 3'b010; end\n   \n   \n   1\n   \n\n * 在加入空白符之后，代码变得更加可读：\n   \n   initial \n   begin \n       a = 3'b100; \n       b = 3'b010; \n   end\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n\n# 2、注释\n\n * 作用：用来写说明文字，不会被编译，是给可爱的同学们看的笔记，防止一觉睡醒看不懂了（汇编程序员的痛）。\n\n * 两种写法：\n   \n   * 单行注释：用 //，直到行尾都算注释。\n     \n     assign a = b & c;  // 这是单行注释：计算a等于b和c的按位与\n     \n     \n     1\n     \n   \n   * 多行注释：用 /* */，中间可以跨多行。\n     \n     /* 这是多行注释：\n        可以写很长的说明，\n        比如这个模块的功能是xxx */**重要规则**：\n     \n     \n     1\n     2\n     3\n     \n   \n   * 重要规则\n     \n     * 多行注释不能嵌套！比如 /* 注释1 /* 注释2 */ 注释1 */ 会报错。\n     \n     * 但多行注释里可以包含单行注释：/* // 这是合法的 */。\n\n\n# 3、标识符（给变量/模块起名字）\n\n作为一个类c语言，verilog十分有素养，所以它的标识符命名方式以及注意点和c语言的变量几乎没有区别\n\n * 组成：字母、数字、$、_，区分大小写，首字符必须为字母或下划线。\n\n * 示例：count、_cc_g5（合法）；30count、out*（非法）。\n\n * 转义标识符：以 \\ 开头，以空白结尾，可包含任意可打印字符（如 \\a+b=c）。\n\n * 合法示例：\n   \n   counter    // 纯字母\n   _data_in   // 下划线开头\n   $signal    // 美元符号开头（较少用）\n   \n   \n   1\n   2\n   3\n   \n\n * 非法示例：\n   \n   3state     // 数字开头\n   out#put    // 包含非法字符#\n   a+b        // 包含运算符+\n   \n   \n   1\n   2\n   3\n   \n\n * 特殊技巧：转义标识符\n   \n   * 如果非要起一个奇怪的名字（比如包含空格、符号），可以用 \\ 开头，空格结尾。\n   \n   * 示例：\n     \n     \\7400      // 实际名字是 \"7400\"（通常用于和传统电路编号兼容）\n     \\a+b=c     // 实际名字是 \"a+b=c\"\n     \\***       // 实际名字是 \"***\"\n     \n     \n     1\n     2\n     3\n     \n   \n   * 但不建议滥用，尽量用常规命名（如 and_gate 而不是 \\a&b）。\n\n\n# 4、关键字\n\n就是说verilog里面已经用于设计的“标识符”不能让它换工作，这就是关键字，这点和c语言没有任何区别。总之有点：咱们是兄弟，你的就是我的，我的还是我的，那种味儿……\n\n * 特点：\n   \n   * 全部是小写，比如 always 是关键字，但 always 不是。\n   * 不能用来起名字！比如定义一个变量叫 module 会报错。\n\n * 常见关键字列表（不止这点，因为我用的框架不行）：\n   \n   关键字      作用\n   module   定义模块开头\n   input    声明输入端口\n   output   声明输出端口\n   reg      声明寄存器变量\n   wire     声明连线\n   always   描述时序/组合逻辑\n\n\n# 5、数字（如何表示0、1、不定、高阻态？）\n\n四种基本逻辑状态：\n\n状态    含义\n0     低电平、逻辑0或假\n1     高电平、逻辑1或真\nx/x   不确定或未知状态\nz/z   高阻态\n\n * 整数表示法：<位宽>'<基数><数值>\n   \n   * 位宽：二进制位的总数（如 4'b1011 表示4位二进制数）。\n   \n   * 基数：\n     \n     基数符号   进制     合法字符\n     b/b    二进制    0,1,x,x,z,z,?, _（下划线可忽略）\n     o/o    八进制    0-7,x,x,z,z,?, _\n     d/d    十进制    0-9, _\n     h/h    十六进制   0-9, a-f, a-f, x,x,z,z,?, _\n   \n   * 示例：\n     \n     8'b1010_1101    // 8位二进制，下划线提高可读性\n     16'hff00        // 16位十六进制，等于65535\n     4'd10           // 4位十进制，实际存储为1010\n     3'b1x0          // 3位二进制，第二位未知\n     \n     \n     1\n     2\n     3\n     4\n     \n   \n   * 易错点：\n     \n     * 位宽不能是表达式：(2+2)'b11 ❌\n     * 负号必须在最左边：-4'd3 ✅，4'd-3 ❌\n\n * 实数（浮点数）表示法：\n   * 两种写法：\n     1. 直接写小数：3.14、0.5（注意：.5 是错的，必须写 0.5）。\n     2. 科学计数法：2.5e3（=2500）、1e-6（=0.000001）。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"02.Verilog HDL基本数据类型",frontmatter:{title:"02.Verilog HDL基本数据类型",date:"2025-07-18T16:00:49.000Z",permalink:"/pages/Verilog_02/"},regularPath:"/01.Verilog/02.Verilog%20HDL%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",relativePath:"01.Verilog/02.Verilog HDL基本数据类型.md",key:"v-3e99d850",path:"/pages/Verilog_02/",headers:[{level:2,title:"1. 物理数据类型：硬件电路的“材料”",slug:"_1-物理数据类型-硬件电路的-材料",normalizedTitle:"1. 物理数据类型：硬件电路的“材料”",charIndex:24},{level:3,title:"1.1 连线型（Net Type）—— 相当于“电线”",slug:"_1-1-连线型-net-type-相当于-电线",normalizedTitle:"1.1 连线型（net type）—— 相当于“电线”",charIndex:135},{level:3,title:"1.2 寄存器型（Register Type）—— 相当于“存储单元”",slug:"_1-2-寄存器型-register-type-相当于-存储单元",normalizedTitle:"1.2 寄存器型（register type）—— 相当于“存储单元”",charIndex:825},{level:2,title:"2. 存储器型（Memory）—— 相当于“RAM/ROM”",slug:"_2-存储器型-memory-相当于-ram-rom",normalizedTitle:"2. 存储器型（memory）—— 相当于“ram/rom”",charIndex:1536},{level:2,title:"3. 抽象数据类型：辅助设计的“工具”",slug:"_3-抽象数据类型-辅助设计的-工具",normalizedTitle:"3. 抽象数据类型：辅助设计的“工具”",charIndex:2069},{level:3,title:"3.1 整型（`integer`）",slug:"_3-1-整型-integer",normalizedTitle:"3.1 整型（<code>integer</code>）",charIndex:null},{level:3,title:"3.2 时间型（`time`）",slug:"_3-2-时间型-time",normalizedTitle:"3.2 时间型（<code>time</code>）",charIndex:null},{level:3,title:"3.3 实型（`real`）",slug:"_3-3-实型-real",normalizedTitle:"3.3 实型（<code>real</code>）",charIndex:null},{level:3,title:"3.4 参数型（`parameter`）—— 相当于“常量”",slug:"_3-4-参数型-parameter-相当于-常量",normalizedTitle:"3.4 参数型（<code>parameter</code>）—— 相当于“常量”",charIndex:null},{level:3,title:"总结：数据类型的选择指南",slug:"总结-数据类型的选择指南",normalizedTitle:"总结：数据类型的选择指南",charIndex:3110}],headersStr:"1. 物理数据类型：硬件电路的“材料” 1.1 连线型（Net Type）—— 相当于“电线” 1.2 寄存器型（Register Type）—— 相当于“存储单元” 2. 存储器型（Memory）—— 相当于“RAM/ROM” 3. 抽象数据类型：辅助设计的“工具” 3.1 整型（`integer`） 3.2 时间型（`time`） 3.3 实型（`real`） 3.4 参数型（`parameter`）—— 相当于“常量” 总结：数据类型的选择指南",content:"# Verilog HDL基本数据类型\n\n\n# 1. 物理数据类型：硬件电路的“材料”\n\n核心思想：Verilog的数据类型是对实际硬件电路的抽象，比如电线、寄存器、存储器等。\n\n----------------------------------------\n\n\n# 1.1 连线型（Net Type）—— 相当于“电线”\n\n * 作用：表示电路中的物理连接，不能存储数据，只能传递信号。\n\n * 常见类型：\n   \n   类型            功能说明            现实类比\n   wire          普通导线（默认类型）      铜线\n   tri           三态导线（可高阻态）      带开关的线\n   wor/trior     多驱动时，实现“线或”逻辑   多个开关并联\n   wand/triand   多驱动时，实现“线与”逻辑   多个开关串联\n   supply1       电源线（恒定高电平）      VCC（+5V）\n   supply0       地线（恒定低电平）       GND（0V）\n\n * 声明格式：\n   \n   wire [位宽] 变量名;       // 普通连线\n   tri [7:0] bus;          // 8位三态总线\n   supply1 vdd;            // 电源线\n   \n   \n   1\n   2\n   3\n   \n\n * 关键特性：\n   \n   * 默认初值为 z（高阻态）。\n   \n   * 需要用 assign 或模块输出驱动：\n     \n     wire a;\n     assign a = 1'b1;  // 给电线a赋值高电平\n     \n     \n     1\n     2\n     \n\n----------------------------------------\n\n\n# 1.2 寄存器型（Register Type）—— 相当于“存储单元”\n\n * 作用：表示可以存储数据的硬件元件（如触发器、锁存器）。\n\n * 关键字：reg\n\n * 声明格式：\n   \n   reg [位宽] 变量名;  \n   \n   \n   1\n   \n\n * 示例：\n   \n   reg q;          // 1位寄存器（存储1bit数据）\n   reg [7:0] data; // 8位寄存器（存储一个字节）\n   \n   \n   1\n   2\n   \n\n * 关键特性：\n   \n   * 默认初值为 x（未知状态）。\n   \n   * 必须在 always 或 initial 块中赋值：\n     \n     always @(posedge clk) begin\n       q <= din;  // 在时钟上升沿存储din的值\n     end\n     \n     \n     1\n     2\n     3\n     \n   \n   * 注意：\n     \n     * reg 不一定是实际的寄存器！综合工具可能将其优化为组合逻辑。\n     \n     * 若需要明确符号，可用 reg signed：\n       \n       reg signed [3:0] num; // 4位有符号数（范围-8到7）\n       num = -2;             // 存储为1110（补码）\n       \n       \n       1\n       2\n       \n\n----------------------------------------\n\n\n# 2. 存储器型（Memory）—— 相当于“RAM/ROM”\n\n * 作用：描述硬件中的存储阵列（如内存、寄存器堆）。\n\n * 本质：一组 reg 的集合。\n\n * 声明格式：\n   \n   reg [数据位宽] 存储器名 [地址数量];  \n   \n   \n   1\n   \n\n * 示例：\n   \n   reg [7:0] ram [0:255]; // 256个8位存储单元（地址0~255）\n   reg [31:0] rom [0:1023]; // 1KB的32位ROM\n   \n   \n   1\n   2\n   \n\n * 操作方式：\n   \n   * 按地址读写：\n     \n     ram[0] = 8'hFF;  // 给地址0写入255\n     data_out = rom[5]; // 读取地址5的数据\n     \n     \n     1\n     2\n     \n   \n   * 重要限制：\n     \n     * 不能一次性读写整个存储器！必须逐个地址操作。\n     * 综合时可能被映射为FPGA的Block RAM或寄存器堆。\n\n----------------------------------------\n\n\n# 3. 抽象数据类型：辅助设计的“工具”\n\n\n# 3.1 整型（integer）\n\n * 作用：用于仿真时的数学运算（不直接对应硬件）。\n\n * 特点：\n   \n   * 32位有符号整数（范围 -2^31 到 2^31-1）。\n   * 常用于循环计数器、临时计算。\n\n * 示例：\n   \n   integer i;\n   for (i=0; i<10; i=i+1) begin // 循环10次\n     // 执行操作\n   end\n   \n   \n   1\n   2\n   3\n   4\n   \n\n\n# 3.2 时间型（time）\n\n * 作用：记录仿真时间（如测试延迟）。\n\n * 特点：\n   \n   * 64位无符号整数，单位由 ``timescale定义（如1ns`）。\n   * 常与 $time 系统函数配合使用。\n\n * 示例\n   \n   time start_time;\n   initial begin\n     start_time = $time; // 记录当前仿真时间\n     #10;               // 延迟10个时间单位\n     $display(\"耗时：%t\", $time - start_time);\n   end\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n\n# 3.3 实型（real）\n\n * 作用：仿真时的浮点数计算（如模拟电路参数）。\n\n * 示例：\n   \n   real voltage;\n   voltage = 3.3; // 表示3.3V电压\n   \n   \n   1\n   2\n   \n\n\n# 3.4 参数型（parameter）—— 相当于“常量”\n\n * 作用：定义模块中的固定值（如位宽、延迟时间）。\n\n * 特点：\n   \n   * 仿真前确定，运行时不可修改。\n   * 提高代码可读性和可维护性。\n\n * 示例：\n   \n   parameter WIDTH = 8;       // 定义位宽为8\n   parameter DELAY = 10;      // 定义延迟10ns\n   reg [WIDTH-1:0] data;      // 实际声明为reg [7:0] data\n   \n   \n   1\n   2\n   3\n   \n\n----------------------------------------\n\n\n# 总结：数据类型的选择指南\n\n类型      关键字            适用场景        硬件对应物\n连线型     wire           模块间信号连接     导线\n寄存器型    reg            时序逻辑存储      触发器/锁存器\n存储器型    reg [] []      RAM/ROM建模   存储阵列\n整型/实型   integer/real   仿真计算        无直接对应\n参数型     parameter      常量定义（如位宽）   硬件配置参数\n\n黄金法则：\n\n 1. 连线用 wire，存储用 reg。\n 2. 存储器本质是 reg 数组，按地址访问。\n 3. integer/real 仅用于仿真，不生成实际电路。\n\n常见错误：\n\n * 错误1：对 wire 用过程赋值（=）。\n   \n   wire a;\n   always @(*) a = b; // 错！wire必须用assign驱动\n   \n   \n   1\n   2\n   \n\n * 错误2：试图整体操作存储器。\n   \n   reg [7:0] mem [0:255];\n   mem = 0; // 错！必须逐个地址初始化\n   \n   \n   1\n   2\n   ",normalizedContent:"# verilog hdl基本数据类型\n\n\n# 1. 物理数据类型：硬件电路的“材料”\n\n核心思想：verilog的数据类型是对实际硬件电路的抽象，比如电线、寄存器、存储器等。\n\n----------------------------------------\n\n\n# 1.1 连线型（net type）—— 相当于“电线”\n\n * 作用：表示电路中的物理连接，不能存储数据，只能传递信号。\n\n * 常见类型：\n   \n   类型            功能说明            现实类比\n   wire          普通导线（默认类型）      铜线\n   tri           三态导线（可高阻态）      带开关的线\n   wor/trior     多驱动时，实现“线或”逻辑   多个开关并联\n   wand/triand   多驱动时，实现“线与”逻辑   多个开关串联\n   supply1       电源线（恒定高电平）      vcc（+5v）\n   supply0       地线（恒定低电平）       gnd（0v）\n\n * 声明格式：\n   \n   wire [位宽] 变量名;       // 普通连线\n   tri [7:0] bus;          // 8位三态总线\n   supply1 vdd;            // 电源线\n   \n   \n   1\n   2\n   3\n   \n\n * 关键特性：\n   \n   * 默认初值为 z（高阻态）。\n   \n   * 需要用 assign 或模块输出驱动：\n     \n     wire a;\n     assign a = 1'b1;  // 给电线a赋值高电平\n     \n     \n     1\n     2\n     \n\n----------------------------------------\n\n\n# 1.2 寄存器型（register type）—— 相当于“存储单元”\n\n * 作用：表示可以存储数据的硬件元件（如触发器、锁存器）。\n\n * 关键字：reg\n\n * 声明格式：\n   \n   reg [位宽] 变量名;  \n   \n   \n   1\n   \n\n * 示例：\n   \n   reg q;          // 1位寄存器（存储1bit数据）\n   reg [7:0] data; // 8位寄存器（存储一个字节）\n   \n   \n   1\n   2\n   \n\n * 关键特性：\n   \n   * 默认初值为 x（未知状态）。\n   \n   * 必须在 always 或 initial 块中赋值：\n     \n     always @(posedge clk) begin\n       q <= din;  // 在时钟上升沿存储din的值\n     end\n     \n     \n     1\n     2\n     3\n     \n   \n   * 注意：\n     \n     * reg 不一定是实际的寄存器！综合工具可能将其优化为组合逻辑。\n     \n     * 若需要明确符号，可用 reg signed：\n       \n       reg signed [3:0] num; // 4位有符号数（范围-8到7）\n       num = -2;             // 存储为1110（补码）\n       \n       \n       1\n       2\n       \n\n----------------------------------------\n\n\n# 2. 存储器型（memory）—— 相当于“ram/rom”\n\n * 作用：描述硬件中的存储阵列（如内存、寄存器堆）。\n\n * 本质：一组 reg 的集合。\n\n * 声明格式：\n   \n   reg [数据位宽] 存储器名 [地址数量];  \n   \n   \n   1\n   \n\n * 示例：\n   \n   reg [7:0] ram [0:255]; // 256个8位存储单元（地址0~255）\n   reg [31:0] rom [0:1023]; // 1kb的32位rom\n   \n   \n   1\n   2\n   \n\n * 操作方式：\n   \n   * 按地址读写：\n     \n     ram[0] = 8'hff;  // 给地址0写入255\n     data_out = rom[5]; // 读取地址5的数据\n     \n     \n     1\n     2\n     \n   \n   * 重要限制：\n     \n     * 不能一次性读写整个存储器！必须逐个地址操作。\n     * 综合时可能被映射为fpga的block ram或寄存器堆。\n\n----------------------------------------\n\n\n# 3. 抽象数据类型：辅助设计的“工具”\n\n\n# 3.1 整型（integer）\n\n * 作用：用于仿真时的数学运算（不直接对应硬件）。\n\n * 特点：\n   \n   * 32位有符号整数（范围 -2^31 到 2^31-1）。\n   * 常用于循环计数器、临时计算。\n\n * 示例：\n   \n   integer i;\n   for (i=0; i<10; i=i+1) begin // 循环10次\n     // 执行操作\n   end\n   \n   \n   1\n   2\n   3\n   4\n   \n\n\n# 3.2 时间型（time）\n\n * 作用：记录仿真时间（如测试延迟）。\n\n * 特点：\n   \n   * 64位无符号整数，单位由 ``timescale定义（如1ns`）。\n   * 常与 $time 系统函数配合使用。\n\n * 示例\n   \n   time start_time;\n   initial begin\n     start_time = $time; // 记录当前仿真时间\n     #10;               // 延迟10个时间单位\n     $display(\"耗时：%t\", $time - start_time);\n   end\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n\n# 3.3 实型（real）\n\n * 作用：仿真时的浮点数计算（如模拟电路参数）。\n\n * 示例：\n   \n   real voltage;\n   voltage = 3.3; // 表示3.3v电压\n   \n   \n   1\n   2\n   \n\n\n# 3.4 参数型（parameter）—— 相当于“常量”\n\n * 作用：定义模块中的固定值（如位宽、延迟时间）。\n\n * 特点：\n   \n   * 仿真前确定，运行时不可修改。\n   * 提高代码可读性和可维护性。\n\n * 示例：\n   \n   parameter width = 8;       // 定义位宽为8\n   parameter delay = 10;      // 定义延迟10ns\n   reg [width-1:0] data;      // 实际声明为reg [7:0] data\n   \n   \n   1\n   2\n   3\n   \n\n----------------------------------------\n\n\n# 总结：数据类型的选择指南\n\n类型      关键字            适用场景        硬件对应物\n连线型     wire           模块间信号连接     导线\n寄存器型    reg            时序逻辑存储      触发器/锁存器\n存储器型    reg [] []      ram/rom建模   存储阵列\n整型/实型   integer/real   仿真计算        无直接对应\n参数型     parameter      常量定义（如位宽）   硬件配置参数\n\n黄金法则：\n\n 1. 连线用 wire，存储用 reg。\n 2. 存储器本质是 reg 数组，按地址访问。\n 3. integer/real 仅用于仿真，不生成实际电路。\n\n常见错误：\n\n * 错误1：对 wire 用过程赋值（=）。\n   \n   wire a;\n   always @(*) a = b; // 错！wire必须用assign驱动\n   \n   \n   1\n   2\n   \n\n * 错误2：试图整体操作存储器。\n   \n   reg [7:0] mem [0:255];\n   mem = 0; // 错！必须逐个地址初始化\n   \n   \n   1\n   2\n   ",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"03.Verilog HDL运算符和表达式",frontmatter:{title:"03.Verilog HDL运算符和表达式",date:"2025-07-19T08:00:49.000Z",permalink:"/pages/Verilog_03/"},regularPath:"/01.Verilog/03.Verilog%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",relativePath:"01.Verilog/03.Verilog运算符和表达式.md",key:"v-3b89e5c1",path:"/pages/Verilog_03/",headers:[{level:2,title:"1、算术运算符：加减乘除",slug:"_1、算术运算符-加减乘除",normalizedTitle:"1、算术运算符：加减乘除",charIndex:14},{level:2,title:"2. 关系运算符：比较大小",slug:"_2-关系运算符-比较大小",normalizedTitle:"2. 关系运算符：比较大小",charIndex:565},{level:2,title:"3. 相等运算符：判等",slug:"_3-相等运算符-判等",normalizedTitle:"3. 相等运算符：判等",charIndex:947},{level:2,title:"4. 逻辑运算符：真/假判断",slug:"_4-逻辑运算符-真-假判断",normalizedTitle:"4. 逻辑运算符：真/假判断",charIndex:1440},{level:2,title:"5. 按位运算符：逐bit操作",slug:"_5-按位运算符-逐bit操作",normalizedTitle:"5. 按位运算符：逐bit操作",charIndex:1919},{level:2,title:"6. 移位运算符：左移/右移",slug:"_6-移位运算符-左移-右移",normalizedTitle:"6. 移位运算符：左移/右移",charIndex:2466},{level:2,title:"7. 条件运算符：简化的if-else",slug:"_7-条件运算符-简化的if-else",normalizedTitle:"7. 条件运算符：简化的if-else",charIndex:2889},{level:2,title:"8. 连接与复制运算符：合并信号",slug:"_8-连接与复制运算符-合并信号",normalizedTitle:"8. 连接与复制运算符：合并信号",charIndex:3309},{level:3,title:"总结：运算符优先级表",slug:"总结-运算符优先级表",normalizedTitle:"总结：运算符优先级表",charIndex:3774}],headersStr:"1、算术运算符：加减乘除 2. 关系运算符：比较大小 3. 相等运算符：判等 4. 逻辑运算符：真/假判断 5. 按位运算符：逐bit操作 6. 移位运算符：左移/右移 7. 条件运算符：简化的if-else 8. 连接与复制运算符：合并信号 总结：运算符优先级表",content:'# 运算符和表达式\n\n\n# 1、算术运算符：加减乘除\n\n符号：+、-、*、/、%（取模） 作用：数学运算，注意位宽规则！\n\nmodule arithmetic;\n  reg [3:0] a = 4\'b1100; // 12\n  reg [2:0] b = 3\'b011;  // 3\n  \n  initial begin\n    $display("a + b = %b", a + b); // 12+3=15 → 4\'b1111\n    $display("a - b = %b", a - b); // 12-3=9 → 4\'b1001\n    $display("a * b = %b", a * b); // 12*3=36 → 但a只有4位，截断后=4\'b0100（36%16=4）\n    $display("a / b = %b", a / b); // 12/3=4 → 4\'b0100\n    $display("a %% b = %b", a % b); // 12%3=0 → 4\'b0000\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 结果位宽 = 操作数的最大位宽（如4位+3位=4位结果）。\n * 除法/取模会舍去小数（如 7/3=2）\n\n\n# 2. 关系运算符：比较大小\n\n符号：>、<、>=、<= 输出：1（真）、0（假）、x（未知）\n\nmodule compare;\n  reg [3:0] x = 4\'b1010; // 10\n  reg [3:0] y = 4\'b0011; // 3\n  \n  initial begin\n    $display("x > y? %b", x > y);  // 10>3 → 1\n    $display("x < y? %b", x < y);  // 10<3 → 0\n    $display("x >=10? %b", x >= 4\'d10); // 10>=10 → 1\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意：若操作数含 x，结果可能是 x（如 4\'b101x > 4\'b0000 → x）。\n\n\n# 3. 相等运算符：判等\n\n符号：\n\n * ==（等于）、!=（不等）→ 可能返回 x\n * ===（全等）、!==（非全等）→ 严格比较（包括 x 和 z）\n\nmodule equality;\n  reg [3:0] p = 4\'b101x;\n  reg [3:0] q = 4\'b1010;\n  \n  initial begin\n    $display("p == q? %b", p == q);  // 101x == 1010 → x（不确定）\n    $display("p === q? %b", p === q); // 101x === 1010 → 0（严格不等）\n    $display("p != q? %b", p != q);  // 101x != 1010 → x\n    $display("p !== q? %b", p !== q); // 101x !== 1010 → 1（确实不等）\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n何时用 ===？ 测试中精确匹配高阻态 z 或未知态 x。\n\n\n# 4. 逻辑运算符：真/假判断\n\n符号：&&（与）、||（或）、!（非） 规则：非0即真（0=假，1/x/z=真）\n\nmodule logical;\n  reg a = 1\'b1;\n  reg b = 1\'b0;\n  reg c = 1\'bx;\n  \n  initial begin\n    $display("a && b = %b", a && b); // 1 && 0 → 0\n    $display("a || b = %b", a || b); // 1 || 0 → 1\n    $display("!a = %b", !a);         // !1 → 0\n    $display("a && c = %b", a && c); // 1 && x → x（不确定）\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n易错点：逻辑运算符会先化简操作数为1位（如 4\'b1011 当作 1\'b1）。\n\n----------------------------------------\n\n\n# 5. 按位运算符：逐bit操作\n\n符号：&（与）、|（或）、^（异或）、~（非）\n\nmodule bitwise;\n  reg [3:0] m = 4\'b1100;\n  reg [3:0] n = 4\'b1010;\n  \n  initial begin\n    $display("m & n = %b", m & n); // 1100 & 1010 → 1000\n    $display("m | n = %b", m | n); // 1100 | 1010 → 1110\n    $display("m ^ n = %b", m ^ n); // 1100 ^ 1010 → 0110（相同为0，不同为1）\n    $display("~m = %b", ~m);       // ~1100 → 0011\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n对比逻辑运算符：\n\n * & 是逐位与，&& 是整体逻辑与。\n * 示例：4\'b1100 && 4\'b1010 → 1（非0即真），但 4\'b1100 & 4\'b1010 → 4\'b1000。\n\n----------------------------------------\n\n\n# 6. 移位运算符：左移/右移\n\n符号：<<（左移）、>>（右移） 规则：空位补 0，不循环移位！\n\nmodule shift;\n  reg [3:0] num = 4\'b1101; // 13\n  \n  initial begin\n    $display("num << 1 = %b", num << 1); // 1101→1010（高位1丢弃，低位补0）\n    $display("num >> 2 = %b", num >> 2); // 1101→0011（低位01丢弃，高位补0）\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n应用场景：\n\n * 左移1位 ≈ 乘以2（4\'b0011<<1 → 4\'b0110，即3→6）。\n * 右移2位 ≈ 除以4（4\'b1100>>2 → 4\'b0011，即12→3）。\n\n----------------------------------------\n\n\n# 7. 条件运算符：简化的if-else\n\n符号：条件 ? 表达式1 : 表达式2\n\nmodule conditional;\n  reg sel = 1\'b1;\n  reg [3:0] in1 = 4\'b1010;\n  reg [3:0] in2 = 4\'b0101;\n  wire [3:0] out;\n  \n  assign out = sel ? in1 : in2; // sel为1选in1，否则选in2\n  \n  initial begin\n    $display("out = %b", out); // sel=1 → out=1010\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n等效代码：\n\nif (sel) out = in1;\nelse out = in2;\n\n\n1\n2\n\n\n----------------------------------------\n\n\n# 8. 连接与复制运算符：合并信号\n\n符号：\n\n * 连接 {a, b}：将多个信号拼接。\n * 复制 {n{a}}：重复信号n次。\n\nmodule concat;\n  reg [1:0] a = 2\'b10;\n  reg [2:0] b = 3\'b110;\n  \n  initial begin\n    $display("{a, b} = %b", {a, b}); // 10 + 110 → 5\'b10110\n    $display("{3{a}} = %b", {3{a}}); // 10重复3次 → 6\'b101010\n    $display("{2{a}, 1\'b0, b} = %b", {2{a}, 1\'b0, b}); // 1010 + 0 + 110 → 7\'b1010110\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n典型用途：\n\n * 扩展位宽：{4{1\'b1}} 生成 4\'b1111。\n * 组合总线：{addr, data} 合并地址和数据。\n\n\n# 总结：运算符优先级表\n\n优先级   运算符             描述              \n最高    ! ~             逻辑非、按位非         \n      * / %           乘、除、取模          \n      + -             加、减             \n      << >>           移位              \n      < <= > >=       关系比较            \n      == != === !==   相等判断            \n      &               按位与             \n      ^ ^~            按位异或、同或         \n      |               按位或             \n      &&              逻辑与             \n      最低              | |       逻辑或   \n\n黄金法则：\n\n 1. 不确定优先级时，加括号！如 (a & b) || c。\n 2. 按位操作 vs 逻辑操作：看是否需要逐bit处理。\n 3. 移位运算的空位永远补 0。',normalizedContent:'# 运算符和表达式\n\n\n# 1、算术运算符：加减乘除\n\n符号：+、-、*、/、%（取模） 作用：数学运算，注意位宽规则！\n\nmodule arithmetic;\n  reg [3:0] a = 4\'b1100; // 12\n  reg [2:0] b = 3\'b011;  // 3\n  \n  initial begin\n    $display("a + b = %b", a + b); // 12+3=15 → 4\'b1111\n    $display("a - b = %b", a - b); // 12-3=9 → 4\'b1001\n    $display("a * b = %b", a * b); // 12*3=36 → 但a只有4位，截断后=4\'b0100（36%16=4）\n    $display("a / b = %b", a / b); // 12/3=4 → 4\'b0100\n    $display("a %% b = %b", a % b); // 12%3=0 → 4\'b0000\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 结果位宽 = 操作数的最大位宽（如4位+3位=4位结果）。\n * 除法/取模会舍去小数（如 7/3=2）\n\n\n# 2. 关系运算符：比较大小\n\n符号：>、<、>=、<= 输出：1（真）、0（假）、x（未知）\n\nmodule compare;\n  reg [3:0] x = 4\'b1010; // 10\n  reg [3:0] y = 4\'b0011; // 3\n  \n  initial begin\n    $display("x > y? %b", x > y);  // 10>3 → 1\n    $display("x < y? %b", x < y);  // 10<3 → 0\n    $display("x >=10? %b", x >= 4\'d10); // 10>=10 → 1\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意：若操作数含 x，结果可能是 x（如 4\'b101x > 4\'b0000 → x）。\n\n\n# 3. 相等运算符：判等\n\n符号：\n\n * ==（等于）、!=（不等）→ 可能返回 x\n * ===（全等）、!==（非全等）→ 严格比较（包括 x 和 z）\n\nmodule equality;\n  reg [3:0] p = 4\'b101x;\n  reg [3:0] q = 4\'b1010;\n  \n  initial begin\n    $display("p == q? %b", p == q);  // 101x == 1010 → x（不确定）\n    $display("p === q? %b", p === q); // 101x === 1010 → 0（严格不等）\n    $display("p != q? %b", p != q);  // 101x != 1010 → x\n    $display("p !== q? %b", p !== q); // 101x !== 1010 → 1（确实不等）\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n何时用 ===？ 测试中精确匹配高阻态 z 或未知态 x。\n\n\n# 4. 逻辑运算符：真/假判断\n\n符号：&&（与）、||（或）、!（非） 规则：非0即真（0=假，1/x/z=真）\n\nmodule logical;\n  reg a = 1\'b1;\n  reg b = 1\'b0;\n  reg c = 1\'bx;\n  \n  initial begin\n    $display("a && b = %b", a && b); // 1 && 0 → 0\n    $display("a || b = %b", a || b); // 1 || 0 → 1\n    $display("!a = %b", !a);         // !1 → 0\n    $display("a && c = %b", a && c); // 1 && x → x（不确定）\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n易错点：逻辑运算符会先化简操作数为1位（如 4\'b1011 当作 1\'b1）。\n\n----------------------------------------\n\n\n# 5. 按位运算符：逐bit操作\n\n符号：&（与）、|（或）、^（异或）、~（非）\n\nmodule bitwise;\n  reg [3:0] m = 4\'b1100;\n  reg [3:0] n = 4\'b1010;\n  \n  initial begin\n    $display("m & n = %b", m & n); // 1100 & 1010 → 1000\n    $display("m | n = %b", m | n); // 1100 | 1010 → 1110\n    $display("m ^ n = %b", m ^ n); // 1100 ^ 1010 → 0110（相同为0，不同为1）\n    $display("~m = %b", ~m);       // ~1100 → 0011\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n对比逻辑运算符：\n\n * & 是逐位与，&& 是整体逻辑与。\n * 示例：4\'b1100 && 4\'b1010 → 1（非0即真），但 4\'b1100 & 4\'b1010 → 4\'b1000。\n\n----------------------------------------\n\n\n# 6. 移位运算符：左移/右移\n\n符号：<<（左移）、>>（右移） 规则：空位补 0，不循环移位！\n\nmodule shift;\n  reg [3:0] num = 4\'b1101; // 13\n  \n  initial begin\n    $display("num << 1 = %b", num << 1); // 1101→1010（高位1丢弃，低位补0）\n    $display("num >> 2 = %b", num >> 2); // 1101→0011（低位01丢弃，高位补0）\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n应用场景：\n\n * 左移1位 ≈ 乘以2（4\'b0011<<1 → 4\'b0110，即3→6）。\n * 右移2位 ≈ 除以4（4\'b1100>>2 → 4\'b0011，即12→3）。\n\n----------------------------------------\n\n\n# 7. 条件运算符：简化的if-else\n\n符号：条件 ? 表达式1 : 表达式2\n\nmodule conditional;\n  reg sel = 1\'b1;\n  reg [3:0] in1 = 4\'b1010;\n  reg [3:0] in2 = 4\'b0101;\n  wire [3:0] out;\n  \n  assign out = sel ? in1 : in2; // sel为1选in1，否则选in2\n  \n  initial begin\n    $display("out = %b", out); // sel=1 → out=1010\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n等效代码：\n\nif (sel) out = in1;\nelse out = in2;\n\n\n1\n2\n\n\n----------------------------------------\n\n\n# 8. 连接与复制运算符：合并信号\n\n符号：\n\n * 连接 {a, b}：将多个信号拼接。\n * 复制 {n{a}}：重复信号n次。\n\nmodule concat;\n  reg [1:0] a = 2\'b10;\n  reg [2:0] b = 3\'b110;\n  \n  initial begin\n    $display("{a, b} = %b", {a, b}); // 10 + 110 → 5\'b10110\n    $display("{3{a}} = %b", {3{a}}); // 10重复3次 → 6\'b101010\n    $display("{2{a}, 1\'b0, b} = %b", {2{a}, 1\'b0, b}); // 1010 + 0 + 110 → 7\'b1010110\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n典型用途：\n\n * 扩展位宽：{4{1\'b1}} 生成 4\'b1111。\n * 组合总线：{addr, data} 合并地址和数据。\n\n\n# 总结：运算符优先级表\n\n优先级   运算符             描述              \n最高    ! ~             逻辑非、按位非         \n      * / %           乘、除、取模          \n      + -             加、减             \n      << >>           移位              \n      < <= > >=       关系比较            \n      == != === !==   相等判断            \n      &               按位与             \n      ^ ^~            按位异或、同或         \n      |               按位或             \n      &&              逻辑与             \n      最低              | |       逻辑或   \n\n黄金法则：\n\n 1. 不确定优先级时，加括号！如 (a & b) || c。\n 2. 按位操作 vs 逻辑操作：看是否需要逐bit处理。\n 3. 移位运算的空位永远补 0。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"04.Verilog HDL模块",frontmatter:{title:"04.Verilog HDL模块",date:"2025-07-25T15:00:00.000Z",permalink:"/pages/Verilog_04/"},regularPath:"/01.Verilog/04.Verilog%20HDL%E7%9A%84%E6%A8%A1%E5%9D%97.html",relativePath:"01.Verilog/04.Verilog HDL的模块.md",key:"v-4cd14734",path:"/pages/Verilog_04/",headers:[{level:2,title:"1. 模块是什么？",slug:"_1-模块是什么",normalizedTitle:"1. 模块是什么？",charIndex:33},{level:2,title:"2. 模块的四大组成部分",slug:"_2-模块的四大组成部分",normalizedTitle:"2. 模块的四大组成部分",charIndex:177},{level:2,title:"3. 模块的端口定义",slug:"_3-模块的端口定义",normalizedTitle:"3. 模块的端口定义",charIndex:561},{level:2,title:"4. 模块的实例化：调用“积木”",slug:"_4-模块的实例化-调用-积木",normalizedTitle:"4. 模块的实例化：调用“积木”",charIndex:892},{level:2,title:"5. 模块的层次化设计",slug:"_5-模块的层次化设计",normalizedTitle:"5. 模块的层次化设计",charIndex:1584},{level:2,title:"6. 模块的测试：Testbench",slug:"_6-模块的测试-testbench",normalizedTitle:"6. 模块的测试：testbench",charIndex:2376},{level:3,title:"总结：模块设计要点",slug:"总结-模块设计要点",normalizedTitle:"总结：模块设计要点",charIndex:3159}],headersStr:"1. 模块是什么？ 2. 模块的四大组成部分 3. 模块的端口定义 4. 模块的实例化：调用“积木” 5. 模块的层次化设计 6. 模块的测试：Testbench 总结：模块设计要点",content:'# 模块（Module）—— Verilog的“积木块”\n\n\n# 1. 模块是什么？\n\n核心概念：模块是Verilog的基本设计单元，相当于电路中的一个功能盒子。\n\n * 现实类比：就像乐高积木，每个模块实现特定功能（如计数器、加法器），通过拼接构建复杂系统。\n\n----------------------------------------\n\n\n# 2. 模块的四大组成部分\n\n每个模块都包含以下结构（以D触发器为例）：\n\n// 1. 模块声明（定义"盒子"的名字和接口）\nmodule dff (\n  input      clk,    // 2. 端口定义：输入时钟\n  input      din,    //         输入数据\n  output reg q       //         输出数据（用reg存储）\n);\n\n  // 3. 逻辑功能描述：当时钟上升沿到来时，存储din的值\n  always @(posedge clk) begin\n    q <= din;  \n  end\n\nendmodule // 4. 模块结束\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n----------------------------------------\n\n\n# 3. 模块的端口定义\n\n端口类型：\n\n类型       方向         示例\ninput    输入信号       input clk;\noutput   输出信号       output q;\ninout    双向信号（少见）   inout data_bus;\n\n端口数据类型：\n\n * 默认是 wire 型（如 input clk 等价于 input wire clk）。\n\n * 若输出需存储（如时序逻辑），需显式声明为 reg：\n   \n   output reg q;  // 输出q需要在always块中赋值\n   \n   \n   1\n   \n\n----------------------------------------\n\n\n# 4. 模块的实例化：调用“积木”\n\n场景：在顶层模块中调用子模块（如用两个D触发器构建移位寄存器）。\n\n# 方法1：顺序连接（按位置对应）\n\nmodule top;\n  wire clk, data_in;\n  wire stage1, stage2;\n  \n  // 实例化第一个D触发器（端口顺序必须与模块定义一致！）\n  dff dff1 (clk, data_in, stage1); \n  \n  // 实例化第二个D触发器\n  dff dff2 (clk, stage1, stage2);  \nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n风险：若模块端口顺序变更，所有实例化需同步修改！\n\n# 方法2：命名连接（推荐！）\n\nmodule top;\n  wire clk, data_in;\n  wire stage1, stage2;\n  \n  // 通过.端口名(信号名)明确对应关系\n  dff dff1 (\n    .clk(clk), \n    .din(data_in), \n    .q(stage1)\n  );\n  \n  dff dff2 (\n    .clk(clk), \n    .din(stage1), \n    .q(stage2)\n  );\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n优势：\n\n * 顺序无关，可读性强。\n * 避免因模块定义修改导致错误。\n\n----------------------------------------\n\n\n# 5. 模块的层次化设计\n\n关键思想：自顶向下拆分功能，逐步细化。\n\n示例：构建一个4位加法器\n\n 1. 顶层模块：定义输入输出\n    \n    module adder_4bit (\n      input  [3:0] a, b,\n      output [3:0] sum,\n      output carry\n    );\n      // 调用子模块（全加器）\n      full_adder fa0 (a[0], b[0], 1\'b0, sum[0], c1);\n      full_adder fa1 (a[1], b[1], c1,  sum[1], c2);\n      full_adder fa2 (a[2], b[2], c2,  sum[2], c3);\n      full_adder fa3 (a[3], b[3], c3,  sum[3], carry);\n    endmodule\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    \n\n 2. 子模块：实现全加器\n    \n    module full_adder (\n      input  a, b, cin,\n      output sum, cout\n    );\n      assign sum  = a ^ b ^ cin;\n      assign cout = (a & b) | (cin & (a ^ b));\n    endmodule\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    \n\n----------------------------------------\n\n\n# 6. 模块的测试：Testbench\n\n作用：模拟输入信号，验证模块功能。\n\n示例：测试D触发器\n\nmodule testbench;\n  reg  clk, din;  // 测试输入（用reg驱动）\n  wire q;         // 测试输出\n  \n  // 1. 实例化被测模块\n  dff uut (.clk(clk), .din(din), .q(q));\n  \n  // 2. 生成时钟（周期=10ns）\n  initial begin\n    clk = 0;\n    forever #5 clk = ~clk; // 每5ns翻转一次\n  end\n  \n  // 3. 提供测试激励\n  initial begin\n    din = 0;\n    #10 din = 1;  // 10ns后输入变1\n    #10 din = 0;\n    #20 $finish;  // 40ns后结束仿真\n  end\n  \n  // 4. 打印结果\n  initial begin\n    $monitor("Time=%t, din=%b, q=%b", $time, din, q);\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n输出结果：\n\nTime=0, din=0, q=x  \nTime=5, din=0, q=0  // 第一个时钟上升沿  \nTime=15, din=1, q=1  // 第二个时钟上升沿  \nTime=25, din=0, q=0  // 第三个时钟上升沿  \n\n\n1\n2\n3\n4\n\n\n----------------------------------------\n\n\n# 总结：模块设计要点\n\n 1. 模块声明：module 模块名(端口列表);\n 2. 端口方向：input/output/inout，输出可声明为 reg。\n 3. 实例化：推荐用命名连接（.端口名(信号名)）。\n 4. 测试方法：\n    * 用Testbench生成时钟和激励。\n    * 通过 $monitor 或波形图观察输出。\n\n常见错误：\n\n * 错误1：在 always 块中对 wire 赋值 → 应改用 reg。\n * 错误2：模块实例化时端口顺序不匹配 → 用命名连接避免。',normalizedContent:'# 模块（module）—— verilog的“积木块”\n\n\n# 1. 模块是什么？\n\n核心概念：模块是verilog的基本设计单元，相当于电路中的一个功能盒子。\n\n * 现实类比：就像乐高积木，每个模块实现特定功能（如计数器、加法器），通过拼接构建复杂系统。\n\n----------------------------------------\n\n\n# 2. 模块的四大组成部分\n\n每个模块都包含以下结构（以d触发器为例）：\n\n// 1. 模块声明（定义"盒子"的名字和接口）\nmodule dff (\n  input      clk,    // 2. 端口定义：输入时钟\n  input      din,    //         输入数据\n  output reg q       //         输出数据（用reg存储）\n);\n\n  // 3. 逻辑功能描述：当时钟上升沿到来时，存储din的值\n  always @(posedge clk) begin\n    q <= din;  \n  end\n\nendmodule // 4. 模块结束\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n----------------------------------------\n\n\n# 3. 模块的端口定义\n\n端口类型：\n\n类型       方向         示例\ninput    输入信号       input clk;\noutput   输出信号       output q;\ninout    双向信号（少见）   inout data_bus;\n\n端口数据类型：\n\n * 默认是 wire 型（如 input clk 等价于 input wire clk）。\n\n * 若输出需存储（如时序逻辑），需显式声明为 reg：\n   \n   output reg q;  // 输出q需要在always块中赋值\n   \n   \n   1\n   \n\n----------------------------------------\n\n\n# 4. 模块的实例化：调用“积木”\n\n场景：在顶层模块中调用子模块（如用两个d触发器构建移位寄存器）。\n\n# 方法1：顺序连接（按位置对应）\n\nmodule top;\n  wire clk, data_in;\n  wire stage1, stage2;\n  \n  // 实例化第一个d触发器（端口顺序必须与模块定义一致！）\n  dff dff1 (clk, data_in, stage1); \n  \n  // 实例化第二个d触发器\n  dff dff2 (clk, stage1, stage2);  \nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n风险：若模块端口顺序变更，所有实例化需同步修改！\n\n# 方法2：命名连接（推荐！）\n\nmodule top;\n  wire clk, data_in;\n  wire stage1, stage2;\n  \n  // 通过.端口名(信号名)明确对应关系\n  dff dff1 (\n    .clk(clk), \n    .din(data_in), \n    .q(stage1)\n  );\n  \n  dff dff2 (\n    .clk(clk), \n    .din(stage1), \n    .q(stage2)\n  );\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n优势：\n\n * 顺序无关，可读性强。\n * 避免因模块定义修改导致错误。\n\n----------------------------------------\n\n\n# 5. 模块的层次化设计\n\n关键思想：自顶向下拆分功能，逐步细化。\n\n示例：构建一个4位加法器\n\n 1. 顶层模块：定义输入输出\n    \n    module adder_4bit (\n      input  [3:0] a, b,\n      output [3:0] sum,\n      output carry\n    );\n      // 调用子模块（全加器）\n      full_adder fa0 (a[0], b[0], 1\'b0, sum[0], c1);\n      full_adder fa1 (a[1], b[1], c1,  sum[1], c2);\n      full_adder fa2 (a[2], b[2], c2,  sum[2], c3);\n      full_adder fa3 (a[3], b[3], c3,  sum[3], carry);\n    endmodule\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    \n\n 2. 子模块：实现全加器\n    \n    module full_adder (\n      input  a, b, cin,\n      output sum, cout\n    );\n      assign sum  = a ^ b ^ cin;\n      assign cout = (a & b) | (cin & (a ^ b));\n    endmodule\n    \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    \n\n----------------------------------------\n\n\n# 6. 模块的测试：testbench\n\n作用：模拟输入信号，验证模块功能。\n\n示例：测试d触发器\n\nmodule testbench;\n  reg  clk, din;  // 测试输入（用reg驱动）\n  wire q;         // 测试输出\n  \n  // 1. 实例化被测模块\n  dff uut (.clk(clk), .din(din), .q(q));\n  \n  // 2. 生成时钟（周期=10ns）\n  initial begin\n    clk = 0;\n    forever #5 clk = ~clk; // 每5ns翻转一次\n  end\n  \n  // 3. 提供测试激励\n  initial begin\n    din = 0;\n    #10 din = 1;  // 10ns后输入变1\n    #10 din = 0;\n    #20 $finish;  // 40ns后结束仿真\n  end\n  \n  // 4. 打印结果\n  initial begin\n    $monitor("time=%t, din=%b, q=%b", $time, din, q);\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n输出结果：\n\ntime=0, din=0, q=x  \ntime=5, din=0, q=0  // 第一个时钟上升沿  \ntime=15, din=1, q=1  // 第二个时钟上升沿  \ntime=25, din=0, q=0  // 第三个时钟上升沿  \n\n\n1\n2\n3\n4\n\n\n----------------------------------------\n\n\n# 总结：模块设计要点\n\n 1. 模块声明：module 模块名(端口列表);\n 2. 端口方向：input/output/inout，输出可声明为 reg。\n 3. 实例化：推荐用命名连接（.端口名(信号名)）。\n 4. 测试方法：\n    * 用testbench生成时钟和激励。\n    * 通过 $monitor 或波形图观察输出。\n\n常见错误：\n\n * 错误1：在 always 块中对 wire 赋值 → 应改用 reg。\n * 错误2：模块实例化时端口顺序不匹配 → 用命名连接避免。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"05.Verilog HDL程序设计和描述方式",frontmatter:{title:"05.Verilog HDL程序设计和描述方式",date:"2025-08-02T16:00:49.000Z",permalink:"/pages/Verilog_05/"},regularPath:"/01.Verilog/05.VerilogHDL%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8F%8F%E8%BF%B0%E6%96%B9%E5%BC%8F.html",relativePath:"01.Verilog/05.VerilogHDL程序设计和描述方式.md",key:"v-2e6c17e3",path:"/pages/Verilog_05/",headers:[{level:2,title:"一、数据流建模",slug:"一、数据流建模",normalizedTitle:"一、数据流建模",charIndex:22},{level:2,title:"二、行为级建模",slug:"二、行为级建模",normalizedTitle:"二、行为级建模",charIndex:2005},{level:2,title:"三、 结构化建模是啥？",slug:"三、-结构化建模是啥",normalizedTitle:"三、 结构化建模是啥？",charIndex:4310},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:6336}],headersStr:"一、数据流建模 二、行为级建模 三、 结构化建模是啥？ 总结",content:'# Verilog HDL程序设计\n\n\n# 一、数据流建模\n\n# 1. 数据流建模是啥？\n\n核心思想：用“电线连接”的方式描述电路，直接表示信号如何从输入流动到输出。 类比：就像画电路图，用导线把各个元件连起来，比如 A和B接个与门，输出Y。\n\n# 2. 核心工具：连续赋值语句（assign）\n\n作用：告诉Verilog“这根线（wire）的值等于某个表达式的结果”。\n\n# 2.1 显式连续赋值\n\n * 语法：\n   \n   wire Y;          // 先声明线网\n   assign Y = A & B; // 再用assign赋值\n   \n   \n   1\n   2\n   \n\n * 带延迟的例子：\n   \n   assign #3 Y = A & B; // 计算A&B后，延迟3个单位时间再赋值给Y\n   \n   \n   1\n   \n\n# 2.2 隐式连续赋值\n\n * 语法（声明时直接赋值）：\n   \n   wire Y = A & B;      // 声明时直接赋值\n   wire #(2,3,4) Z = X; // 带延迟（上升2，下降3，关断4）\n   \n   \n   1\n   2\n   \n\n * 带驱动强度的例子：\n   \n   wire (strong1, weak0) Y = A | B; // 输出1时强驱动，0时弱驱动\n   \n   \n   1\n   \n\n----------------------------------------\n\n# 3. 连续赋值的特点\n\n 1. 目标必须是wire：\n    \n    * 不能给reg类型赋值！\n    \n    * 示例：\n      \n      wire Y;    // 正确\n      reg Y;     // 错误！assign不能用于reg\n      assign Y = A;\n      \n      \n      1\n      2\n      3\n      \n\n 2. 实时更新：\n    \n    * 只要右边的信号（如A或B）变化，立刻重新计算并赋值。\n    \n    * 示例：\n      \n      assign Y = A + B; // A或B一变，Y立刻更新\n      \n      \n      1\n      \n\n 3. 并行执行：\n    \n    * 所有assign语句同时工作，和代码顺序无关。\n    \n    * 示例：\n      \n      assign Y = A & B;\n      assign Z = C | D; // 这两行并行执行\n      \n      \n      1\n      2\n      \n\n 4. 延迟是“惯性延时”：\n    \n    * 短于延迟的脉冲会被过滤掉。\n    \n    * 示例：\n      \n      assign #5 Y = A; // 如果A的脉冲宽度<5，Y不会变化\n      \n      \n      1\n      \n\n----------------------------------------\n\n# 4. 实际代码示例\n\n# 4.1 显式赋值（带延迟）\n\nmodule example1(input [3:0] A, B, output [3:0] Y);\n  wire [3:0] Y;\n  assign #(3,2,4) Y = A & B; // 上升延迟3，下降2，关断4\nendmodule\n\n\n1\n2\n3\n4\n\n\n# 4.2 隐式赋值（带驱动强度）\n\nmodule example2(input [3:0] M, N, output [3:0] W);\n  wire (strong0, weak1) [3:0] W = (M ^ N) & (M | N);\nendmodule\n\n\n1\n2\n3\n\n\n----------------------------------------\n\n# 5. 常见问题\n\n 1. 什么时候用连续赋值？\n    \n    * 描述组合逻辑（如与门、加法器、多路选择器）。\n    * 不适合时序逻辑（如触发器要用always块）。\n\n 2. 忘记写assign会怎样？\n    \n    * 直接写 wire Y = A; 是隐式赋值，合法。\n    \n    * 但分开写时漏掉assign会报错：\n      \n      wire Y;\n      Y = A; // 错误！缺少assign\n      \n      \n      1\n      2\n      \n\n 3. 能用在always块里吗？\n    \n    * 不能！ assign是并行语句，always是过程块，两者不兼容。\n\n\n# 二、行为级建模\n\n# 1. 行为级建模是啥？\n\n核心思想：用"软件思维"描述硬件行为，重点关注电路做什么（功能），而不是具体怎么连线。 类比：就像写剧本告诉演员怎么演，而不是设计舞台的每个螺丝钉。\n\n# 2. 核心工具：过程块（always/initial）\n\n# 2.1 initial块 - 一次性剧本\n\n * 特点：只执行一次，主要用于仿真初始化。\n\n * 示例：\n   \n   initial begin\n     clk = 0;      // 初始时钟为0\n     reset = 1;    // 复位信号置1\n     #50 reset = 0;// 50单位时间后取消复位\n   end\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n# 2.2 always块 - 循环剧本\n\n * 特点：不断重复执行，是硬件行为的核心描述方式。\n\n * 敏感列表：决定何时触发：\n   \n   // 组合逻辑：输入变化就执行\n   always @(a or b or sel) \n   \n   // 时序逻辑：时钟边沿触发\n   always @(posedge clk)\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n# 3. 过程赋值：硬件界的"变量赋值"\n\n# 3.1 阻塞赋值（=） - 顺序执行\n\n * 特点：像普通编程语言，一步完成计算和赋值。\n\n * 适用场景：组合逻辑设计。\n\n * 示例：\n   \n   always @(a or b) begin\n     temp = a & b;  // 立即计算并赋值\n     y = temp | c;  // 使用更新后的temp\n   end\n   \n   \n   1\n   2\n   3\n   4\n   \n\n# 3.2 非阻塞赋值（<=） - 并行执行\n\n * 特点：先计算右边，等时间步结束才统一赋值。\n\n * 适用场景：时序逻辑设计（触发器）。\n\n * 示例：\n   \n   always @(posedge clk) begin\n     q1 <= d;   // 这三个赋值\n     q2 <= q1;  // 是同时进行的\n     q3 <= q2;  // 构成移位寄存器\n   end\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n----------------------------------------\n\n# 4. 流程控制：硬件版的"if-else"\n\n# 4.1 if-else语句\n\n * 特点：带优先级的选择结构。\n\n * 示例：\n   \n   always @(sel or a or b) begin\n     if (sel == 1\'b1)\n       y = a;    // sel为1选a\n     else \n       y = b;    // 否则选b\n   end\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n# 4.2 case语句\n\n * 特点：多路分支，无优先级。\n\n * 特殊形式：\n   \n   * casez：忽略z(高阻)和?（无关位）\n   * casex：忽略x(未知)、z和?\n\n * 示例（BCD译码器）：\n   \n   case(num)\n     4\'d0: seg = 7\'b1111110;  // 显示数字0\n     4\'d1: seg = 7\'b0110000;  // 显示数字1\n     default: seg = 7\'bx;     // 其他情况输出未知\n   endcase\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n----------------------------------------\n\n# 5. 循环语句：硬件也能"循环"？\n\n# 5.1 for循环 - 可综合的循环\n\n * 特点：编译时会展开为硬件结构。\n\n * 示例（位反转）：\n   \n   for(i=0; i<8; i=i+1)\n     rev[7-i] = data[i];  // 生成8个并行的连线\n   \n   \n   1\n   2\n   \n\n# 5.2 其他循环（仿真用）\n\n * forever：无限循环（如生成时钟）\n   \n   initial forever #10 clk = ~clk;  // 每10ns翻转\n   \n   \n   1\n   \n\n * repeat：固定次数循环\n   \n   repeat(5) @(posedge clk);  // 等待5个时钟周期\n   \n   \n   1\n   \n\n----------------------------------------\n\n# 6. 关键注意事项\n\n 1. reg不一定生成寄存器：\n    \n    * 在always块中用=赋值可能生成组合逻辑\n    * 只有时钟触发的<=才会生成触发器\n\n 2. 敏感列表要完整：\n    \n    // 组合逻辑必须列出所有输入！\n    always @(a or b or sel) // 漏掉sel会导致bug\n    \n    \n    1\n    2\n    \n\n 3. 避免锁存器：\n    \n    * if缺少else分支\n    * case缺少default\n    * 解决办法：确保所有路径都有赋值\n\n\n# 三、 结构化建模是啥？\n\n核心思想：像搭积木一样用现成的模块/门电路来构建系统，直接对应硬件层次结构，说白了就是面向对象设计。\n\n类比：\n\n * 模块级：用现成的CPU、内存等大组件拼电脑\n * 门级：用与门、或门等小零件搭电路\n * 开关级：用晶体管构建最基础的逻辑门\n\n# 2. 模块级建模：调用现成模块\n\n# 2.1 基本调用方式\n\n// 定义子模块（积木）\nmodule AND_gate(input a, b, output y);\n  assign y = a & b;\nendmodule\n\n// 顶层模块（拼积木）\nmodule TOP(input x1, x2, output z);\n  wire w;\n  // 实例化子模块（两种方式）\n  AND_gate U1(x1, x2, w);  // 方式1：按顺序连接\n  AND_gate U2(.a(w), .b(x1), .y(z)); // 方式2：按名称连接（推荐！）\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n# 2.2 参数化模块\n\nmodule #(parameter WIDTH=4) \n  Adder(input [WIDTH-1:0] a,b, output [WIDTH:0] sum);\n  assign sum = a + b;\nendmodule\n\n// 调用时修改参数\nAdder #(8) U3(a_8bit, b_8bit, sum_8bit); // 8位加法器\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 3. 门级建模：调用基本逻辑门\n\n# 3.1 Verilog内置门类型\n\n门类型     关键字      示例\n与门      and      and U1(out, a, b);\n或门      or       or U2(out, a, b, c);\n非门      not      not U3(out, in);\n三态缓冲器   bufif1   bufif1 U4(out, in, ctrl);\n\n# 3.2 实际案例：2-4译码器\n\nmodule decoder(\n  input [1:0] sel,\n  input en,\n  output [3:0] y\n);\n  wire not_sel0, not_sel1;\n  \n  // 基本门调用\n  not U1(not_sel0, sel[0]);\n  not U2(not_sel1, sel[1]);\n  \n  nand U3(y[0], en, not_sel1, not_sel0);\n  nand U4(y[1], en, not_sel1, sel[0]);\n  nand U5(y[2], en, sel[1], not_sel0);\n  nand U6(y[3], en, sel[1], sel[0]);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n----------------------------------------\n\n# 4. 开关级建模：晶体管级描述\n\n# 4.1 MOS开关类型\n\n类型     关键字    功能\nNMOS   nmos   控制=1时导通\nPMOS   pmos   控制=0时导通\nCMOS   cmos   双控制（nctrl和pctrl互补）\n双向开关   tran   两端直接连通\n\n# 4.2 CMOS与非门实现\n\nmodule NAND(\n  input a, b,\n  output y\n);\n  supply1 VDD;  // 电源\n  supply0 GND;  // 地\n  \n  pmos P1(y, VDD, a);\n  pmos P2(y, VDD, b);\n  nmos N1(y, mid, a);\n  nmos N2(mid, GND, b);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n# 5. 关键注意事项\n\n 1. 端口连接陷阱：\n    \n    // 危险！容易接反\n    Sub_module U1(a, b);  \n    // 安全推荐\n    Sub_module U1(.port_a(a), .port_b(b));\n    \n    \n    1\n    2\n    3\n    4\n    \n\n 2. 参数传递优先级：\n    \n    * #(参数)直接传递 > defparam语句\n\n 3. 开关级设计限制：\n    \n    * 通常只用于ASIC设计\n    * FPGA综合经常忽略开关级细节\n\n----------------------------------------\n\n\n# 总结\n\n * 核心价值：\n   * 模块化设计：提高代码复用性\n   * 贴近物理实现：适合性能优化\n   * 混合使用：高层用行为级，底层用结构化\n * 典型应用：\n   * 数字IP核集成（如调用现成的存储器、PLL）\n   * 标准单元库开发\n   * 晶体管级电路设计',normalizedContent:'# verilog hdl程序设计\n\n\n# 一、数据流建模\n\n# 1. 数据流建模是啥？\n\n核心思想：用“电线连接”的方式描述电路，直接表示信号如何从输入流动到输出。 类比：就像画电路图，用导线把各个元件连起来，比如 a和b接个与门，输出y。\n\n# 2. 核心工具：连续赋值语句（assign）\n\n作用：告诉verilog“这根线（wire）的值等于某个表达式的结果”。\n\n# 2.1 显式连续赋值\n\n * 语法：\n   \n   wire y;          // 先声明线网\n   assign y = a & b; // 再用assign赋值\n   \n   \n   1\n   2\n   \n\n * 带延迟的例子：\n   \n   assign #3 y = a & b; // 计算a&b后，延迟3个单位时间再赋值给y\n   \n   \n   1\n   \n\n# 2.2 隐式连续赋值\n\n * 语法（声明时直接赋值）：\n   \n   wire y = a & b;      // 声明时直接赋值\n   wire #(2,3,4) z = x; // 带延迟（上升2，下降3，关断4）\n   \n   \n   1\n   2\n   \n\n * 带驱动强度的例子：\n   \n   wire (strong1, weak0) y = a | b; // 输出1时强驱动，0时弱驱动\n   \n   \n   1\n   \n\n----------------------------------------\n\n# 3. 连续赋值的特点\n\n 1. 目标必须是wire：\n    \n    * 不能给reg类型赋值！\n    \n    * 示例：\n      \n      wire y;    // 正确\n      reg y;     // 错误！assign不能用于reg\n      assign y = a;\n      \n      \n      1\n      2\n      3\n      \n\n 2. 实时更新：\n    \n    * 只要右边的信号（如a或b）变化，立刻重新计算并赋值。\n    \n    * 示例：\n      \n      assign y = a + b; // a或b一变，y立刻更新\n      \n      \n      1\n      \n\n 3. 并行执行：\n    \n    * 所有assign语句同时工作，和代码顺序无关。\n    \n    * 示例：\n      \n      assign y = a & b;\n      assign z = c | d; // 这两行并行执行\n      \n      \n      1\n      2\n      \n\n 4. 延迟是“惯性延时”：\n    \n    * 短于延迟的脉冲会被过滤掉。\n    \n    * 示例：\n      \n      assign #5 y = a; // 如果a的脉冲宽度<5，y不会变化\n      \n      \n      1\n      \n\n----------------------------------------\n\n# 4. 实际代码示例\n\n# 4.1 显式赋值（带延迟）\n\nmodule example1(input [3:0] a, b, output [3:0] y);\n  wire [3:0] y;\n  assign #(3,2,4) y = a & b; // 上升延迟3，下降2，关断4\nendmodule\n\n\n1\n2\n3\n4\n\n\n# 4.2 隐式赋值（带驱动强度）\n\nmodule example2(input [3:0] m, n, output [3:0] w);\n  wire (strong0, weak1) [3:0] w = (m ^ n) & (m | n);\nendmodule\n\n\n1\n2\n3\n\n\n----------------------------------------\n\n# 5. 常见问题\n\n 1. 什么时候用连续赋值？\n    \n    * 描述组合逻辑（如与门、加法器、多路选择器）。\n    * 不适合时序逻辑（如触发器要用always块）。\n\n 2. 忘记写assign会怎样？\n    \n    * 直接写 wire y = a; 是隐式赋值，合法。\n    \n    * 但分开写时漏掉assign会报错：\n      \n      wire y;\n      y = a; // 错误！缺少assign\n      \n      \n      1\n      2\n      \n\n 3. 能用在always块里吗？\n    \n    * 不能！ assign是并行语句，always是过程块，两者不兼容。\n\n\n# 二、行为级建模\n\n# 1. 行为级建模是啥？\n\n核心思想：用"软件思维"描述硬件行为，重点关注电路做什么（功能），而不是具体怎么连线。 类比：就像写剧本告诉演员怎么演，而不是设计舞台的每个螺丝钉。\n\n# 2. 核心工具：过程块（always/initial）\n\n# 2.1 initial块 - 一次性剧本\n\n * 特点：只执行一次，主要用于仿真初始化。\n\n * 示例：\n   \n   initial begin\n     clk = 0;      // 初始时钟为0\n     reset = 1;    // 复位信号置1\n     #50 reset = 0;// 50单位时间后取消复位\n   end\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n# 2.2 always块 - 循环剧本\n\n * 特点：不断重复执行，是硬件行为的核心描述方式。\n\n * 敏感列表：决定何时触发：\n   \n   // 组合逻辑：输入变化就执行\n   always @(a or b or sel) \n   \n   // 时序逻辑：时钟边沿触发\n   always @(posedge clk)\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n# 3. 过程赋值：硬件界的"变量赋值"\n\n# 3.1 阻塞赋值（=） - 顺序执行\n\n * 特点：像普通编程语言，一步完成计算和赋值。\n\n * 适用场景：组合逻辑设计。\n\n * 示例：\n   \n   always @(a or b) begin\n     temp = a & b;  // 立即计算并赋值\n     y = temp | c;  // 使用更新后的temp\n   end\n   \n   \n   1\n   2\n   3\n   4\n   \n\n# 3.2 非阻塞赋值（<=） - 并行执行\n\n * 特点：先计算右边，等时间步结束才统一赋值。\n\n * 适用场景：时序逻辑设计（触发器）。\n\n * 示例：\n   \n   always @(posedge clk) begin\n     q1 <= d;   // 这三个赋值\n     q2 <= q1;  // 是同时进行的\n     q3 <= q2;  // 构成移位寄存器\n   end\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n----------------------------------------\n\n# 4. 流程控制：硬件版的"if-else"\n\n# 4.1 if-else语句\n\n * 特点：带优先级的选择结构。\n\n * 示例：\n   \n   always @(sel or a or b) begin\n     if (sel == 1\'b1)\n       y = a;    // sel为1选a\n     else \n       y = b;    // 否则选b\n   end\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n# 4.2 case语句\n\n * 特点：多路分支，无优先级。\n\n * 特殊形式：\n   \n   * casez：忽略z(高阻)和?（无关位）\n   * casex：忽略x(未知)、z和?\n\n * 示例（bcd译码器）：\n   \n   case(num)\n     4\'d0: seg = 7\'b1111110;  // 显示数字0\n     4\'d1: seg = 7\'b0110000;  // 显示数字1\n     default: seg = 7\'bx;     // 其他情况输出未知\n   endcase\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n----------------------------------------\n\n# 5. 循环语句：硬件也能"循环"？\n\n# 5.1 for循环 - 可综合的循环\n\n * 特点：编译时会展开为硬件结构。\n\n * 示例（位反转）：\n   \n   for(i=0; i<8; i=i+1)\n     rev[7-i] = data[i];  // 生成8个并行的连线\n   \n   \n   1\n   2\n   \n\n# 5.2 其他循环（仿真用）\n\n * forever：无限循环（如生成时钟）\n   \n   initial forever #10 clk = ~clk;  // 每10ns翻转\n   \n   \n   1\n   \n\n * repeat：固定次数循环\n   \n   repeat(5) @(posedge clk);  // 等待5个时钟周期\n   \n   \n   1\n   \n\n----------------------------------------\n\n# 6. 关键注意事项\n\n 1. reg不一定生成寄存器：\n    \n    * 在always块中用=赋值可能生成组合逻辑\n    * 只有时钟触发的<=才会生成触发器\n\n 2. 敏感列表要完整：\n    \n    // 组合逻辑必须列出所有输入！\n    always @(a or b or sel) // 漏掉sel会导致bug\n    \n    \n    1\n    2\n    \n\n 3. 避免锁存器：\n    \n    * if缺少else分支\n    * case缺少default\n    * 解决办法：确保所有路径都有赋值\n\n\n# 三、 结构化建模是啥？\n\n核心思想：像搭积木一样用现成的模块/门电路来构建系统，直接对应硬件层次结构，说白了就是面向对象设计。\n\n类比：\n\n * 模块级：用现成的cpu、内存等大组件拼电脑\n * 门级：用与门、或门等小零件搭电路\n * 开关级：用晶体管构建最基础的逻辑门\n\n# 2. 模块级建模：调用现成模块\n\n# 2.1 基本调用方式\n\n// 定义子模块（积木）\nmodule and_gate(input a, b, output y);\n  assign y = a & b;\nendmodule\n\n// 顶层模块（拼积木）\nmodule top(input x1, x2, output z);\n  wire w;\n  // 实例化子模块（两种方式）\n  and_gate u1(x1, x2, w);  // 方式1：按顺序连接\n  and_gate u2(.a(w), .b(x1), .y(z)); // 方式2：按名称连接（推荐！）\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n# 2.2 参数化模块\n\nmodule #(parameter width=4) \n  adder(input [width-1:0] a,b, output [width:0] sum);\n  assign sum = a + b;\nendmodule\n\n// 调用时修改参数\nadder #(8) u3(a_8bit, b_8bit, sum_8bit); // 8位加法器\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 3. 门级建模：调用基本逻辑门\n\n# 3.1 verilog内置门类型\n\n门类型     关键字      示例\n与门      and      and u1(out, a, b);\n或门      or       or u2(out, a, b, c);\n非门      not      not u3(out, in);\n三态缓冲器   bufif1   bufif1 u4(out, in, ctrl);\n\n# 3.2 实际案例：2-4译码器\n\nmodule decoder(\n  input [1:0] sel,\n  input en,\n  output [3:0] y\n);\n  wire not_sel0, not_sel1;\n  \n  // 基本门调用\n  not u1(not_sel0, sel[0]);\n  not u2(not_sel1, sel[1]);\n  \n  nand u3(y[0], en, not_sel1, not_sel0);\n  nand u4(y[1], en, not_sel1, sel[0]);\n  nand u5(y[2], en, sel[1], not_sel0);\n  nand u6(y[3], en, sel[1], sel[0]);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n----------------------------------------\n\n# 4. 开关级建模：晶体管级描述\n\n# 4.1 mos开关类型\n\n类型     关键字    功能\nnmos   nmos   控制=1时导通\npmos   pmos   控制=0时导通\ncmos   cmos   双控制（nctrl和pctrl互补）\n双向开关   tran   两端直接连通\n\n# 4.2 cmos与非门实现\n\nmodule nand(\n  input a, b,\n  output y\n);\n  supply1 vdd;  // 电源\n  supply0 gnd;  // 地\n  \n  pmos p1(y, vdd, a);\n  pmos p2(y, vdd, b);\n  nmos n1(y, mid, a);\n  nmos n2(mid, gnd, b);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n# 5. 关键注意事项\n\n 1. 端口连接陷阱：\n    \n    // 危险！容易接反\n    sub_module u1(a, b);  \n    // 安全推荐\n    sub_module u1(.port_a(a), .port_b(b));\n    \n    \n    1\n    2\n    3\n    4\n    \n\n 2. 参数传递优先级：\n    \n    * #(参数)直接传递 > defparam语句\n\n 3. 开关级设计限制：\n    \n    * 通常只用于asic设计\n    * fpga综合经常忽略开关级细节\n\n----------------------------------------\n\n\n# 总结\n\n * 核心价值：\n   * 模块化设计：提高代码复用性\n   * 贴近物理实现：适合性能优化\n   * 混合使用：高层用行为级，底层用结构化\n * 典型应用：\n   * 数字ip核集成（如调用现成的存储器、pll）\n   * 标准单元库开发\n   * 晶体管级电路设计',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"07.Verilog HDL组合电路设计的方法",frontmatter:{title:"07.Verilog HDL组合电路设计的方法",date:"2025-08-05T12:38:00.000Z",permalink:"/pages/Verilog_07/"},regularPath:"/01.Verilog/07.Verilog%20HDL%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%96%B9%E6%B3%95.html",relativePath:"01.Verilog/07.Verilog HDL组合电路设计的方法.md",key:"v-3ebe77ee",path:"/pages/Verilog_07/",headers:[{level:2,title:"1. 真值表描述法",slug:"_1-真值表描述法",normalizedTitle:"1. 真值表描述法",charIndex:190},{level:3,title:"特点",slug:"特点",normalizedTitle:"特点",charIndex:62},{level:3,title:"示例：3裁判表决电路",slug:"示例-3裁判表决电路",normalizedTitle:"示例：3裁判表决电路",charIndex:254},{level:2,title:"2. 逻辑代数描述法",slug:"_2-逻辑代数描述法",normalizedTitle:"2. 逻辑代数描述法",charIndex:727},{level:3,title:"特点",slug:"特点-2",normalizedTitle:"特点",charIndex:62},{level:3,title:"示例：同一表决电路",slug:"示例-同一表决电路",normalizedTitle:"示例：同一表决电路",charIndex:791},{level:2,title:"3. 结构描述法",slug:"_3-结构描述法",normalizedTitle:"3. 结构描述法",charIndex:1030},{level:3,title:"特点",slug:"特点-3",normalizedTitle:"特点",charIndex:62},{level:3,title:"示例：表决电路门级实现",slug:"示例-表决电路门级实现",normalizedTitle:"示例：表决电路门级实现",charIndex:1088},{level:2,title:"4. 抽象描述法",slug:"_4-抽象描述法",normalizedTitle:"4. 抽象描述法",charIndex:1382},{level:3,title:"特点",slug:"特点-4",normalizedTitle:"特点",charIndex:62},{level:3,title:"示例：表决电路行为级描述",slug:"示例-表决电路行为级描述",normalizedTitle:"示例：表决电路行为级描述",charIndex:1442}],headersStr:"1. 真值表描述法 特点 示例：3裁判表决电路 2. 逻辑代数描述法 特点 示例：同一表决电路 3. 结构描述法 特点 示例：表决电路门级实现 4. 抽象描述法 特点 示例：表决电路行为级描述",content:"# Verilog组合电路设计：四种实现方法详解\n\n数字电路设计中，组合逻辑电路是最基础也是最重要的组成部分之一。组合电路的特点是输出仅取决于当前输入，与电路历史状态无关。本文将详细介绍Verilog HDL中实现组合电路的四种经典方法，并通过实际代码示例展示它们的应用场景和优劣对比。\n\n----------------------------------------\n\n\n# 1. 真值表描述法\n\n\n# 特点\n\n * 最直观的设计方法\n * 直接映射功能需求到代码\n * 适合输入变量较少的情况\n\n\n# 示例：3裁判表决电路\n\nmodule voter_case(OUT, A, B, C);\n  output OUT;\n  input A, B, C;\n  reg OUT;\n  \n  always @(A or B or C) begin\n    case({A,B,C})\n      3'b000: OUT = 0;\n      3'b001: OUT = 0;\n      3'b010: OUT = 0; \n      3'b100: OUT = 0;\n      3'b011: OUT = 1;\n      3'b101: OUT = 1;\n      3'b110: OUT = 1;\n      3'b111: OUT = 1;\n    endcase\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n优点：逻辑清晰，易于理解 缺点：输入变量多时代码冗长\n\n----------------------------------------\n\n\n# 2. 逻辑代数描述法\n\n\n# 特点\n\n * 基于布尔代数表达式\n * 需要人工进行逻辑化简\n * 生成的电路通常更优化\n\n\n# 示例：同一表决电路\n\nmodule voter_assign(OUT, A, B, C);\n  output OUT;\n  input A, B, C;\n  \n  assign OUT = (A&B) | (B&C) | (A&C);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n\n\n优化原理：通过卡诺图化简得到最简表达式 优点：电路结构精简，延迟小 缺点：需要手动推导逻辑表达式\n\n----------------------------------------\n\n\n# 3. 结构描述法\n\n\n# 特点\n\n * 直接实例化逻辑门\n * 完全控制电路结构\n * 类似原理图设计方式\n\n\n# 示例：表决电路门级实现\n\nmodule voter_struct(OUT, A, B, C);\n  output OUT;\n  input A, B, C;\n  wire w1, w2, w3;\n  \n  and U1(w1, A, B);\n  and U2(w2, B, C);\n  and U3(w3, A, C);\n  or U4(OUT, w1, w2, w3);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n优点：精确控制门级连接 缺点：代码量大，维护成本高\n\n----------------------------------------\n\n\n# 4. 抽象描述法\n\n\n# 特点\n\n * 从功能角度描述电路\n * 不关注具体实现细节\n * 利用运算符简化设计\n\n\n# 示例：表决电路行为级描述\n\nmodule voter_abstract(OUT, A, B, C);\n  output OUT;\n  input A, B, C;\n  reg OUT;\n  \n  always @(*) begin\n    OUT = (A + B + C) >= 2;  // 统计\"1\"的个数\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n优点：代码简洁，设计效率高 缺点：综合结果可能不如预期优化",normalizedContent:"# verilog组合电路设计：四种实现方法详解\n\n数字电路设计中，组合逻辑电路是最基础也是最重要的组成部分之一。组合电路的特点是输出仅取决于当前输入，与电路历史状态无关。本文将详细介绍verilog hdl中实现组合电路的四种经典方法，并通过实际代码示例展示它们的应用场景和优劣对比。\n\n----------------------------------------\n\n\n# 1. 真值表描述法\n\n\n# 特点\n\n * 最直观的设计方法\n * 直接映射功能需求到代码\n * 适合输入变量较少的情况\n\n\n# 示例：3裁判表决电路\n\nmodule voter_case(out, a, b, c);\n  output out;\n  input a, b, c;\n  reg out;\n  \n  always @(a or b or c) begin\n    case({a,b,c})\n      3'b000: out = 0;\n      3'b001: out = 0;\n      3'b010: out = 0; \n      3'b100: out = 0;\n      3'b011: out = 1;\n      3'b101: out = 1;\n      3'b110: out = 1;\n      3'b111: out = 1;\n    endcase\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n优点：逻辑清晰，易于理解 缺点：输入变量多时代码冗长\n\n----------------------------------------\n\n\n# 2. 逻辑代数描述法\n\n\n# 特点\n\n * 基于布尔代数表达式\n * 需要人工进行逻辑化简\n * 生成的电路通常更优化\n\n\n# 示例：同一表决电路\n\nmodule voter_assign(out, a, b, c);\n  output out;\n  input a, b, c;\n  \n  assign out = (a&b) | (b&c) | (a&c);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n\n\n优化原理：通过卡诺图化简得到最简表达式 优点：电路结构精简，延迟小 缺点：需要手动推导逻辑表达式\n\n----------------------------------------\n\n\n# 3. 结构描述法\n\n\n# 特点\n\n * 直接实例化逻辑门\n * 完全控制电路结构\n * 类似原理图设计方式\n\n\n# 示例：表决电路门级实现\n\nmodule voter_struct(out, a, b, c);\n  output out;\n  input a, b, c;\n  wire w1, w2, w3;\n  \n  and u1(w1, a, b);\n  and u2(w2, b, c);\n  and u3(w3, a, c);\n  or u4(out, w1, w2, w3);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n优点：精确控制门级连接 缺点：代码量大，维护成本高\n\n----------------------------------------\n\n\n# 4. 抽象描述法\n\n\n# 特点\n\n * 从功能角度描述电路\n * 不关注具体实现细节\n * 利用运算符简化设计\n\n\n# 示例：表决电路行为级描述\n\nmodule voter_abstract(out, a, b, c);\n  output out;\n  input a, b, c;\n  reg out;\n  \n  always @(*) begin\n    out = (a + b + c) >= 2;  // 统计\"1\"的个数\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n优点：代码简洁，设计效率高 缺点：综合结果可能不如预期优化",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"08.verilog HDL组合电路之数字加法器",frontmatter:{title:"08.verilog HDL组合电路之数字加法器",date:"2025-08-06T10:51:00.000Z",permalink:"/pages/Verilog_08/"},regularPath:"/01.Verilog/08.verilog%20HDL%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF%E4%B9%8B%E6%95%B0%E5%AD%97%E5%8A%A0%E6%B3%95%E5%99%A8.html",relativePath:"01.Verilog/08.verilog HDL组合电路之数字加法器.md",key:"v-7fd48428",path:"/pages/Verilog_08/",headers:[{level:2,title:"1. 半加器（Half Adder）",slug:"_1-半加器-half-adder",normalizedTitle:"1. 半加器（half adder）",charIndex:20},{level:3,title:"真值表",slug:"真值表",normalizedTitle:"真值表",charIndex:76},{level:3,title:"逻辑表达式",slug:"逻辑表达式",normalizedTitle:"逻辑表达式",charIndex:169},{level:3,title:"Verilog代码",slug:"verilog代码",normalizedTitle:"verilog代码",charIndex:219},{level:2,title:"2. 全加器（Full Adder）",slug:"_2-全加器-full-adder",normalizedTitle:"2. 全加器（full adder）",charIndex:427},{level:3,title:"真值表",slug:"真值表-2",normalizedTitle:"真值表",charIndex:76},{level:3,title:"逻辑表达式",slug:"逻辑表达式-2",normalizedTitle:"逻辑表达式",charIndex:169},{level:3,title:"Verilog代码",slug:"verilog代码-2",normalizedTitle:"verilog代码",charIndex:219}],headersStr:"1. 半加器（Half Adder） 真值表 逻辑表达式 Verilog代码 2. 全加器（Full Adder） 真值表 逻辑表达式 Verilog代码",content:"# 数字加法器：半加器与全加器\n\n\n# 1. 半加器（Half Adder）\n\n功能：计算两个1位二进制数的和（sum）和进位（carry）。\n\n\n# 真值表\n\nA   B   SUM   CARRY\n0   0   0     0\n0   1   1     0\n1   0   1     0\n1   1   0     1\n\n\n# 逻辑表达式\n\n * sum = A ⊕ B（异或）\n * carry = A & B（与）\n\n\n# Verilog代码\n\nmodule half_adder (\n    input A, B,\n    output sum, carry\n);\n    assign sum = A ^ B;   // 异或\n    assign carry = A & B; // 与\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n----------------------------------------\n\n\n# 2. 全加器（Full Adder）\n\n功能：计算两个1位二进制数的和（sum）和进位（carry），并考虑来自低位的进位（c_in）。\n\n\n# 真值表\n\nA   B   C_IN   SUM   C_OUT\n0   0   0      0     0\n0   0   1      1     0\n0   1   0      1     0\n0   1   1      0     1\n1   0   0      1     0\n1   0   1      0     1\n1   1   0      0     1\n1   1   1      1     1\n\n\n# 逻辑表达式\n\n * sum = A ⊕ B ⊕ c_in\n * c_out = (A & B) | ((A ⊕ B) & c_in)\n\n\n# Verilog代码\n\nmodule full_adder (\n    input A, B, c_in,\n    output sum, c_out\n);\n    assign sum = A ^ B ^ c_in;\n    assign c_out = (A & B) | ((A ^ B) & c_in);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n",normalizedContent:"# 数字加法器：半加器与全加器\n\n\n# 1. 半加器（half adder）\n\n功能：计算两个1位二进制数的和（sum）和进位（carry）。\n\n\n# 真值表\n\na   b   sum   carry\n0   0   0     0\n0   1   1     0\n1   0   1     0\n1   1   0     1\n\n\n# 逻辑表达式\n\n * sum = a ⊕ b（异或）\n * carry = a & b（与）\n\n\n# verilog代码\n\nmodule half_adder (\n    input a, b,\n    output sum, carry\n);\n    assign sum = a ^ b;   // 异或\n    assign carry = a & b; // 与\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n----------------------------------------\n\n\n# 2. 全加器（full adder）\n\n功能：计算两个1位二进制数的和（sum）和进位（carry），并考虑来自低位的进位（c_in）。\n\n\n# 真值表\n\na   b   c_in   sum   c_out\n0   0   0      0     0\n0   0   1      1     0\n0   1   0      1     0\n0   1   1      0     1\n1   0   0      1     0\n1   0   1      0     1\n1   1   0      0     1\n1   1   1      1     1\n\n\n# 逻辑表达式\n\n * sum = a ⊕ b ⊕ c_in\n * c_out = (a & b) | ((a ⊕ b) & c_in)\n\n\n# verilog代码\n\nmodule full_adder (\n    input a, b, c_in,\n    output sum, c_out\n);\n    assign sum = a ^ b ^ c_in;\n    assign c_out = (a & b) | ((a ^ b) & c_in);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"06.Verilog HDL程序设计思想概览",frontmatter:{title:"06.Verilog HDL程序设计思想概览",date:"2025-08-05T12:30:00.000Z",permalink:"/pages/Verilog_06/"},regularPath:"/01.Verilog/06.Verilog%20HDL%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E6%A6%82%E8%A7%88.html",relativePath:"01.Verilog/06.Verilog HDL程序设计思想概览.md",key:"v-1d3661da",path:"/pages/Verilog_06/",headers:[{level:2,title:"1. 可综合设计的基本原则",slug:"_1-可综合设计的基本原则",normalizedTitle:"1. 可综合设计的基本原则",charIndex:286},{level:2,title:"2. 示例对比：模256计数器",slug:"_2-示例对比-模256计数器",normalizedTitle:"2. 示例对比：模256计数器",charIndex:505},{level:3,title:"(a) 可综合的实现方式",slug:"a-可综合的实现方式",normalizedTitle:"(a) 可综合的实现方式",charIndex:525},{level:3,title:"(b) 常见的错误描述",slug:"b-常见的错误描述",normalizedTitle:"(b) 常见的错误描述",charIndex:954},{level:2,title:"3. 设计多样性：多路选择器（MUX）的实现",slug:"_3-设计多样性-多路选择器-mux-的实现",normalizedTitle:"3. 设计多样性：多路选择器（mux）的实现",charIndex:1531},{level:3,title:"(1) 真值表形式（行为描述）",slug:"_1-真值表形式-行为描述",normalizedTitle:"(1) 真值表形式（行为描述）",charIndex:1599},{level:3,title:"(2) 逻辑表达式形式（数据流描述）",slug:"_2-逻辑表达式形式-数据流描述",normalizedTitle:"(2) 逻辑表达式形式（数据流描述）",charIndex:1966},{level:3,title:"(3) 结构性描述（门级建模）",slug:"_3-结构性描述-门级建模",normalizedTitle:"(3) 结构性描述（门级建模）",charIndex:2321},{level:2,title:"4. 关键总结",slug:"_4-关键总结",normalizedTitle:"4. 关键总结",charIndex:2788},{level:2,title:"5. 延伸思考",slug:"_5-延伸思考",normalizedTitle:"5. 延伸思考",charIndex:3087}],headersStr:"1. 可综合设计的基本原则 2. 示例对比：模256计数器 (a) 可综合的实现方式 (b) 常见的错误描述 3. 设计多样性：多路选择器（MUX）的实现 (1) 真值表形式（行为描述） (2) 逻辑表达式形式（数据流描述） (3) 结构性描述（门级建模） 4. 关键总结 5. 延伸思考",content:"# Verilog HDL 设计思想与可综合特性：从计数器到多路选择器\n\n在数字电路设计中，Verilog HDL 是一种强大的硬件描述语言，能够以多种方式描述电路功能。然而，并非所有代码都能被综合工具正确转换为实际硬件电路。本文将围绕 Verilog 的设计思想和可综合特性，通过典型示例（如计数器、多路选择器）对比 可综合代码 和 常见错误，帮助读者掌握高效、可靠的 Verilog 设计方法。\n\n下面出现的代码在初学阶段没必要完全掌握，读者只需了解一下基本的代码架构即可。\n\n----------------------------------------\n\n\n# 1. 可综合设计的基本原则\n\n可综合的 Verilog 代码需满足：\n\n * 明确硬件映射：代码应直接对应实际的逻辑门、触发器或组合电路。\n * 避免不可综合语法：如 for 循环的滥用、initial 块（部分场景不支持）、复杂的动态操作。\n * 时序控制清晰：同步设计推荐使用 always @(posedge clk)，避免混合边沿触发。\n\n----------------------------------------\n\n\n# 2. 示例对比：模256计数器\n\n\n# (a) 可综合的实现方式\n\nmodule counter (count, clk, reset);\n  output [7:0] count;\n  input clk, reset;\n  reg [7:0] count;\n\n  always @(posedge clk) begin\n    if (!reset) \n      count <= 0;          // 同步复位\n    else if (count == 8'b11111111) \n      count <= 0;          // 计数到255归零\n    else \n      count <= count + 1;  // 正常计数\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n特点：\n\n * 仅使用时钟上升沿触发，明确时序逻辑。\n * 复位和计数逻辑清晰，综合工具可识别为标准的计数器结构。\n\n\n# (b) 常见的错误描述\n\nmodule counter (count, clk, reset);\n  output [7:0] count;\n  input clk, reset;\n  reg [7:0] count;\n  integer i;\n\n  always @(posedge clk, reset) begin  // 混合边沿触发（错误！）\n    if (!reset) \n      count <= 0;\n    else \n      for (i = 0; i <= 255; i = i + 1)  // for循环不可综合为硬件\n        count <= count + 1;             // 非阻塞赋值在循环中无效\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n问题分析：\n\n 1. 敏感列表错误：always @(posedge clk, reset) 混合了时钟和复位信号边沿，可能导致综合结果不符合预期。\n 2. 不可综合的 for 循环：综合工具无法将其展开为并行硬件逻辑。\n 3. 非阻塞赋值在循环中无效：实际硬件无法实现循环内的逐步更新。\n\n----------------------------------------\n\n\n# 3. 设计多样性：多路选择器（MUX）的实现\n\nVerilog 支持多种风格描述同一功能，以下是三种常见的 MUX 实现方式：\n\n\n# (1) 真值表形式（行为描述）\n\nmodule MUX (out, data, sel);\n  output out;\n  input [3:0] data;\n  input [1:0] sel;\n  reg out;\n\n  always @(data or sel) begin\n    case (sel)\n      2'b00: out <= data[0];\n      2'b01: out <= data[1];\n      2'b10: out <= data[2];\n      2'b11: out <= data[3];\n    endcase\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n优点：直观，类似软件编程，适合复杂条件逻辑。\n\n\n# (2) 逻辑表达式形式（数据流描述）\n\nmodule MUX (out, data, sel);\n  output out;\n  input [3:0] data;\n  input [1:0] sel;\n  \n  assign out = (~sel[1] & ~sel[0] & data[0]) |\n               (~sel[1] &  sel[0] & data[1]) |\n               ( sel[1] & ~sel[0] & data[2]) |\n               ( sel[1] &  sel[0] & data[3]);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n优点：直接映射到与或门结构，适合优化组合逻辑。\n\n\n# (3) 结构性描述（门级建模）\n\nmodule MUX (out, data, sel);\n  output out;\n  input [3:0] data;\n  input [1:0] sel;\n  wire w1, w2, w3, w4;\n\n  not U1 (w1, sel[1]);\n  not U2 (w2, sel[0]);\n  and U3 (w3, w1, w2, data[0]);\n  and U4 (w4, w1, sel[0], data[1]);\n  and U5 (w5, sel[1], w2, data[2]);\n  and U6 (w6, sel[1], sel[0], data[3]);\n  or  U7 (out, w3, w4, w5, w6);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n优点：显式定义门级连接，适合对底层硬件有严格要求的场景。\n\n----------------------------------------\n\n\n# 4. 关键总结\n\n 1. 可综合代码：\n    * 使用明确的时序控制（如 always @(posedge clk)）。\n    * 避免不可综合语法（如 for 循环、混合边沿触发）。\n 2. 设计风格选择：\n    * 行为描述（case/if-else）：适合复杂状态机或算法。\n    * 数据流描述（assign）：适合组合逻辑优化。\n    * 结构性描述：适合门级精确控制。\n 3. 验证工具：\n    * 使用 Synplify 等综合工具检查代码是否可综合，并观察生成的 RTL 图。\n\n----------------------------------------\n\n\n# 5. 延伸思考\n\n * 如果设计一个 可变模计数器（如模 N），如何保证可综合性？ 提示：使用参数化设计（parameter）和比较器逻辑，而非动态循环。\n\n通过对比正确与错误的代码示例，我们可以更深刻地理解 Verilog 的可综合设计思想。在实际项目中，选择合适的设计风格并严格遵循硬件映射规则，是保证电路可靠性和效率的关键！",normalizedContent:"# verilog hdl 设计思想与可综合特性：从计数器到多路选择器\n\n在数字电路设计中，verilog hdl 是一种强大的硬件描述语言，能够以多种方式描述电路功能。然而，并非所有代码都能被综合工具正确转换为实际硬件电路。本文将围绕 verilog 的设计思想和可综合特性，通过典型示例（如计数器、多路选择器）对比 可综合代码 和 常见错误，帮助读者掌握高效、可靠的 verilog 设计方法。\n\n下面出现的代码在初学阶段没必要完全掌握，读者只需了解一下基本的代码架构即可。\n\n----------------------------------------\n\n\n# 1. 可综合设计的基本原则\n\n可综合的 verilog 代码需满足：\n\n * 明确硬件映射：代码应直接对应实际的逻辑门、触发器或组合电路。\n * 避免不可综合语法：如 for 循环的滥用、initial 块（部分场景不支持）、复杂的动态操作。\n * 时序控制清晰：同步设计推荐使用 always @(posedge clk)，避免混合边沿触发。\n\n----------------------------------------\n\n\n# 2. 示例对比：模256计数器\n\n\n# (a) 可综合的实现方式\n\nmodule counter (count, clk, reset);\n  output [7:0] count;\n  input clk, reset;\n  reg [7:0] count;\n\n  always @(posedge clk) begin\n    if (!reset) \n      count <= 0;          // 同步复位\n    else if (count == 8'b11111111) \n      count <= 0;          // 计数到255归零\n    else \n      count <= count + 1;  // 正常计数\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n特点：\n\n * 仅使用时钟上升沿触发，明确时序逻辑。\n * 复位和计数逻辑清晰，综合工具可识别为标准的计数器结构。\n\n\n# (b) 常见的错误描述\n\nmodule counter (count, clk, reset);\n  output [7:0] count;\n  input clk, reset;\n  reg [7:0] count;\n  integer i;\n\n  always @(posedge clk, reset) begin  // 混合边沿触发（错误！）\n    if (!reset) \n      count <= 0;\n    else \n      for (i = 0; i <= 255; i = i + 1)  // for循环不可综合为硬件\n        count <= count + 1;             // 非阻塞赋值在循环中无效\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n问题分析：\n\n 1. 敏感列表错误：always @(posedge clk, reset) 混合了时钟和复位信号边沿，可能导致综合结果不符合预期。\n 2. 不可综合的 for 循环：综合工具无法将其展开为并行硬件逻辑。\n 3. 非阻塞赋值在循环中无效：实际硬件无法实现循环内的逐步更新。\n\n----------------------------------------\n\n\n# 3. 设计多样性：多路选择器（mux）的实现\n\nverilog 支持多种风格描述同一功能，以下是三种常见的 mux 实现方式：\n\n\n# (1) 真值表形式（行为描述）\n\nmodule mux (out, data, sel);\n  output out;\n  input [3:0] data;\n  input [1:0] sel;\n  reg out;\n\n  always @(data or sel) begin\n    case (sel)\n      2'b00: out <= data[0];\n      2'b01: out <= data[1];\n      2'b10: out <= data[2];\n      2'b11: out <= data[3];\n    endcase\n  end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n优点：直观，类似软件编程，适合复杂条件逻辑。\n\n\n# (2) 逻辑表达式形式（数据流描述）\n\nmodule mux (out, data, sel);\n  output out;\n  input [3:0] data;\n  input [1:0] sel;\n  \n  assign out = (~sel[1] & ~sel[0] & data[0]) |\n               (~sel[1] &  sel[0] & data[1]) |\n               ( sel[1] & ~sel[0] & data[2]) |\n               ( sel[1] &  sel[0] & data[3]);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n优点：直接映射到与或门结构，适合优化组合逻辑。\n\n\n# (3) 结构性描述（门级建模）\n\nmodule mux (out, data, sel);\n  output out;\n  input [3:0] data;\n  input [1:0] sel;\n  wire w1, w2, w3, w4;\n\n  not u1 (w1, sel[1]);\n  not u2 (w2, sel[0]);\n  and u3 (w3, w1, w2, data[0]);\n  and u4 (w4, w1, sel[0], data[1]);\n  and u5 (w5, sel[1], w2, data[2]);\n  and u6 (w6, sel[1], sel[0], data[3]);\n  or  u7 (out, w3, w4, w5, w6);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n优点：显式定义门级连接，适合对底层硬件有严格要求的场景。\n\n----------------------------------------\n\n\n# 4. 关键总结\n\n 1. 可综合代码：\n    * 使用明确的时序控制（如 always @(posedge clk)）。\n    * 避免不可综合语法（如 for 循环、混合边沿触发）。\n 2. 设计风格选择：\n    * 行为描述（case/if-else）：适合复杂状态机或算法。\n    * 数据流描述（assign）：适合组合逻辑优化。\n    * 结构性描述：适合门级精确控制。\n 3. 验证工具：\n    * 使用 synplify 等综合工具检查代码是否可综合，并观察生成的 rtl 图。\n\n----------------------------------------\n\n\n# 5. 延伸思考\n\n * 如果设计一个 可变模计数器（如模 n），如何保证可综合性？ 提示：使用参数化设计（parameter）和比较器逻辑，而非动态循环。\n\n通过对比正确与错误的代码示例，我们可以更深刻地理解 verilog 的可综合设计思想。在实际项目中，选择合适的设计风格并严格遵循硬件映射规则，是保证电路可靠性和效率的关键！",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"09.Verilog HDL组合电路之数据比较器",frontmatter:{title:"09.Verilog HDL组合电路之数据比较器",date:"2025-08-06T11:01:00.000Z",permalink:"/pages/Verilog_09/"},regularPath:"/01.Verilog/09.Verilog%20HDL%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%AF%94%E8%BE%83%E5%99%A8.html",relativePath:"01.Verilog/09.Verilog HDL组合电路之数据比较器.md",key:"v-bfeb2552",path:"/pages/Verilog_09/",headers:[{level:2,title:"1. 概念",slug:"_1-概念",normalizedTitle:"1. 概念",charIndex:14},{level:2,title:"2. 真值表",slug:"_2-真值表",normalizedTitle:"2. 真值表",charIndex:109},{level:2,title:"3. Verilog代码",slug:"_3-verilog代码",normalizedTitle:"3. verilog代码",charIndex:278},{level:2,title:"4. 说明",slug:"_4-说明",normalizedTitle:"4. 说明",charIndex:497}],headersStr:"1. 概念 2. 真值表 3. Verilog代码 4. 说明",content:"# 4位数据比较器\n\n\n# 1. 概念\n\n数据比较器用于比较两个二进制数的大小关系，输出比较结果（A>B、A<B、A=B）。4位比较器逐位比较两个4位二进制数，从最高位（MSB）开始，若高位相等则比较下一位。\n\n\n# 2. 真值表\n\nA[3:0]   B[3:0]   A_GT_B   A_LT_B   A_EQ_B\nA > B    任意       1        0        0\nA < B    任意       0        1        0\nA = B    任意       0        0        1\n\n\n# 3. Verilog代码\n\nmodule comparator_4bit (\n    input [3:0] A, B,\n    output A_gt_B, A_lt_B, A_eq_B\n);\n    assign A_gt_B = (A > B);\n    assign A_lt_B = (A < B);\n    assign A_eq_B = (A == B);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 4. 说明\n\n * A_gt_B=1：A > B\n * A_lt_B=1：A < B\n * A_eq_B=1：A = B",normalizedContent:"# 4位数据比较器\n\n\n# 1. 概念\n\n数据比较器用于比较两个二进制数的大小关系，输出比较结果（a>b、a<b、a=b）。4位比较器逐位比较两个4位二进制数，从最高位（msb）开始，若高位相等则比较下一位。\n\n\n# 2. 真值表\n\na[3:0]   b[3:0]   a_gt_b   a_lt_b   a_eq_b\na > b    任意       1        0        0\na < b    任意       0        1        0\na = b    任意       0        0        1\n\n\n# 3. verilog代码\n\nmodule comparator_4bit (\n    input [3:0] a, b,\n    output a_gt_b, a_lt_b, a_eq_b\n);\n    assign a_gt_b = (a > b);\n    assign a_lt_b = (a < b);\n    assign a_eq_b = (a == b);\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 4. 说明\n\n * a_gt_b=1：a > b\n * a_lt_b=1：a < b\n * a_eq_b=1：a = b",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"10.Verilog HDL组合电路之数据选择器",frontmatter:{title:"10.Verilog HDL组合电路之数据选择器",date:"2025-08-07T13:10:00.000Z",permalink:"/pages/Verilog_10/"},regularPath:"/01.Verilog/10.Verilog%20HDL%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%80%89%E6%8B%A9%E5%99%A8.html",relativePath:"01.Verilog/10.Verilog HDL组合电路之数据选择器.md",key:"v-12f412e4",path:"/pages/Verilog_10/",headers:[{level:2,title:"1. 原理简介",slug:"_1-原理简介",normalizedTitle:"1. 原理简介",charIndex:74},{level:2,title:"2. 示例一：2选1选择器（使用条件运算符 `?:`）",slug:"_2-示例一-2选1选择器-使用条件运算符",normalizedTitle:"2. 示例一：2选1选择器（使用条件运算符 <code>?:</code>）",charIndex:null},{level:3,title:"结构说明",slug:"结构说明",normalizedTitle:"结构说明",charIndex:379},{level:3,title:"完整的Verilog代码",slug:"完整的verilog代码",normalizedTitle:"完整的verilog代码",charIndex:494},{level:3,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:381},{level:2,title:"3. 示例二：4选1选择器（使用 case 语句）",slug:"_3-示例二-4选1选择器-使用-case-语句",normalizedTitle:"3. 示例二：4选1选择器（使用 case 语句）",charIndex:759},{level:3,title:"结构说明",slug:"结构说明-2",normalizedTitle:"结构说明",charIndex:379},{level:3,title:"Verilog代码",slug:"verilog代码",normalizedTitle:"verilog代码",charIndex:497},{level:3,title:"说明",slug:"说明-2",normalizedTitle:"说明",charIndex:381}],headersStr:"1. 原理简介 2. 示例一：2选1选择器（使用条件运算符 `?:`） 结构说明 完整的Verilog代码 说明 3. 示例二：4选1选择器（使用 case 语句） 结构说明 Verilog代码 说明",content:"----------------------------------------\n\n\n# 数据选择器：多路选择器（Multiplexer）\n\n\n# 1. 原理简介\n\n功能：从多个输入信号中，根据选择信号的值，输出其中一个。\n在数字电路中，数据选择器常用于数据通路控制，像个“电子开关”。\n\n最常见的多路选择器有：\n\n * 2选1：两个输入、一个选择位\n * 4选1：四个输入、两个选择位\n\n它的工作原理就是：\n\n> 选择线控制“哪个输入”可以通过，输出到Y端口。\n\n形式表达式一般如下：\n\nY = I[sel]\n\n当然 Verilog 不支持数组直接这么写组合逻辑，我们会用 ?:、case 等手段实现。\n\n----------------------------------------\n\n\n# 2. 示例一：2选1选择器（使用条件运算符 ?:）\n\n\n# 结构说明\n\n * 输入信号：A, B\n * 选择信号：sel（1位）\n * 输出信号：Y\n\n当 sel=0，输出为 A；\n当 sel=1，输出为 B。\n\n就像：\n\nY = (sel == 0) ? A : B;\n\n\n1\n\n\n\n# 完整的Verilog代码\n\nmodule mux2to1 (\n    input wire A,\n    input wire B,\n    input wire sel,\n    output wire Y\n);\n    assign Y = sel ? B : A; // sel=1输出B，sel=0输出A\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 说明\n\n * ?: 是三目运算符，也叫条件运算符，是写组合逻辑非常常见的一种方式。\n * 它简洁、直观，适合 2选1 或多个嵌套判断的场景。\n\n\n# 3. 示例二：4选1选择器（使用 case 语句）\n\n\n# 结构说明\n\n * 输入信号：I0, I1, I2, I3（可以打包成一个 4 位向量）\n * 选择信号：sel[1:0]（2位）\n * 输出信号：Y\n\n选择信号 sel 决定输出哪一路：\n\nSEL   Y输出\n00    I0\n01    I1\n10    I2\n11    I3\n\n\n# Verilog代码\n\nmodule mux4to1 (\n    input wire [3:0] I,       // 四个输入 I[3:0]\n    input wire [1:0] sel,     // 2位选择信号\n    output reg Y              // 用 reg，因为在 always 块中赋值\n);\n    always @(*) begin\n        case (sel)\n            2'b00: Y = I[0];\n            2'b01: Y = I[1];\n            2'b10: Y = I[2];\n            2'b11: Y = I[3];\n            default: Y = 1'b0; // 默认值防止综合警告\n        endcase\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 说明\n\n * case 语句适用于选择分支比较多的场景。\n * 记得给 Y 写默认值，避免综合时 latch 错误。\n * 这种写法比条件运算符更直观清晰，适合复杂选择器。",normalizedContent:"----------------------------------------\n\n\n# 数据选择器：多路选择器（multiplexer）\n\n\n# 1. 原理简介\n\n功能：从多个输入信号中，根据选择信号的值，输出其中一个。\n在数字电路中，数据选择器常用于数据通路控制，像个“电子开关”。\n\n最常见的多路选择器有：\n\n * 2选1：两个输入、一个选择位\n * 4选1：四个输入、两个选择位\n\n它的工作原理就是：\n\n> 选择线控制“哪个输入”可以通过，输出到y端口。\n\n形式表达式一般如下：\n\ny = i[sel]\n\n当然 verilog 不支持数组直接这么写组合逻辑，我们会用 ?:、case 等手段实现。\n\n----------------------------------------\n\n\n# 2. 示例一：2选1选择器（使用条件运算符 ?:）\n\n\n# 结构说明\n\n * 输入信号：a, b\n * 选择信号：sel（1位）\n * 输出信号：y\n\n当 sel=0，输出为 a；\n当 sel=1，输出为 b。\n\n就像：\n\ny = (sel == 0) ? a : b;\n\n\n1\n\n\n\n# 完整的verilog代码\n\nmodule mux2to1 (\n    input wire a,\n    input wire b,\n    input wire sel,\n    output wire y\n);\n    assign y = sel ? b : a; // sel=1输出b，sel=0输出a\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 说明\n\n * ?: 是三目运算符，也叫条件运算符，是写组合逻辑非常常见的一种方式。\n * 它简洁、直观，适合 2选1 或多个嵌套判断的场景。\n\n\n# 3. 示例二：4选1选择器（使用 case 语句）\n\n\n# 结构说明\n\n * 输入信号：i0, i1, i2, i3（可以打包成一个 4 位向量）\n * 选择信号：sel[1:0]（2位）\n * 输出信号：y\n\n选择信号 sel 决定输出哪一路：\n\nsel   y输出\n00    i0\n01    i1\n10    i2\n11    i3\n\n\n# verilog代码\n\nmodule mux4to1 (\n    input wire [3:0] i,       // 四个输入 i[3:0]\n    input wire [1:0] sel,     // 2位选择信号\n    output reg y              // 用 reg，因为在 always 块中赋值\n);\n    always @(*) begin\n        case (sel)\n            2'b00: y = i[0];\n            2'b01: y = i[1];\n            2'b10: y = i[2];\n            2'b11: y = i[3];\n            default: y = 1'b0; // 默认值防止综合警告\n        endcase\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 说明\n\n * case 语句适用于选择分支比较多的场景。\n * 记得给 y 写默认值，避免综合时 latch 错误。\n * 这种写法比条件运算符更直观清晰，适合复杂选择器。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"12.verilog HDL组合电路之数字译码器",frontmatter:{title:"12.verilog HDL组合电路之数字译码器",date:"2025-08-07T17:10:00.000Z",permalink:"/pages/Verilog_12/"},regularPath:"/01.Verilog/12.verilog%20HDL%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF%E4%B9%8B%E6%95%B0%E5%AD%97%E8%AF%91%E7%A0%81%E5%99%A8.html",relativePath:"01.Verilog/12.verilog HDL组合电路之数字译码器.md",key:"v-a3179a3e",path:"/pages/Verilog_12/",headers:[{level:2,title:"1. 功能说明",slug:"_1-功能说明",normalizedTitle:"1. 功能说明",charIndex:25},{level:2,title:"2. 示例：2线-4线译码器（2-to-4 Decoder）",slug:"_2-示例-2线-4线译码器-2-to-4-decoder",normalizedTitle:"2. 示例：2线-4线译码器（2-to-4 decoder）",charIndex:184},{level:3,title:"2.1 真值表（带使能）",slug:"_2-1-真值表-带使能",normalizedTitle:"2.1 真值表（带使能）",charIndex:316},{level:2,title:"3. 原理分析",slug:"_3-原理分析",normalizedTitle:"3. 原理分析",charIndex:668},{level:3,title:"输出函数表达式：",slug:"输出函数表达式",normalizedTitle:"输出函数表达式：",charIndex:704},{level:2,title:"4. Verilog实现方式",slug:"_4-verilog实现方式",normalizedTitle:"4. verilog实现方式",charIndex:925},{level:3,title:"4.1 方式一：使用逻辑表达式实现",slug:"_4-1-方式一-使用逻辑表达式实现",normalizedTitle:"4.1 方式一：使用逻辑表达式实现",charIndex:944},{level:3,title:"说明：",slug:"说明",normalizedTitle:"说明：",charIndex:1283},{level:3,title:"4.2 方式二：使用case语句抽象描述",slug:"_4-2-方式二-使用case语句抽象描述",normalizedTitle:"4.2 方式二：使用case语句抽象描述",charIndex:1394},{level:3,title:"说明：",slug:"说明-2",normalizedTitle:"说明：",charIndex:1283}],headersStr:"1. 功能说明 2. 示例：2线-4线译码器（2-to-4 Decoder） 2.1 真值表（带使能） 3. 原理分析 输出函数表达式： 4. Verilog实现方式 4.1 方式一：使用逻辑表达式实现 说明： 4.2 方式二：使用case语句抽象描述 说明：",content:"# 数字译码器：Decoder模块的实现\n\n\n# 1. 功能说明\n\n数字译码器的作用是：\n\n> 将二进制代码“翻译”为唯一一个输出信号为有效的形式。\n\n说白了，就是告诉你：“当前是哪一位激活？”\n如果编码器是“你说话我翻译成代码”，那译码器就是“你给我代码我告诉你选了谁”。\n\n----------------------------------------\n\n\n# 2. 示例：2线-4线译码器（2-to-4 Decoder）\n\n * 输入：2位选择信号 A[1:0]\n * 输出：4路输出 Y[3:0]\n * 使能信号：E（有效低）\n\n> 当 E = 0 时，根据 A 的值，仅有一位 Y[i] 输出为低电平（即有效）\n\n\n# 2.1 真值表（带使能）\n\nE   A[1]   A[0]   Y[3]   Y[2]   Y[1]   Y[0]\n1   x      x      1      1      1      1\n0   0      0      1      1      1      0\n0   0      1      1      1      0      1\n0   1      0      1      0      1      1\n0   1      1      0      1      1      1\n\n输出低电平表示有效（有点反直觉，但这是最常见用法，一个真正的man要拿得起放得下）\n\n----------------------------------------\n\n\n# 3. 原理分析\n\n译码器的输出函数用最小项的“非”形式来表示：\n\n\n# 输出函数表达式：\n\n> 对于第 i 路输出，\n> Yi = ~E & mi，其中 mi 是第 i 项的最小项（对应 A 的取值）\n\n举例：\n\n * Y0 = ~E & ~A[1] & ~A[0]\n * Y1 = ~E & ~A[1] & A[0]\n * Y2 = ~E & A[1] & ~A[0]\n * Y3 = ~E & A[1] & A[0]\n\n----------------------------------------\n\n\n# 4. Verilog实现方式\n\n\n# 4.1 方式一：使用逻辑表达式实现\n\nmodule decoder2to4_expr (\n    input wire [1:0] A,\n    input wire E,             // 有效低\n    output wire [3:0] Y\n);\n    assign Y[0] = ~(~E & ~A[1] & ~A[0]);\n    assign Y[1] = ~(~E & ~A[1] &  A[0]);\n    assign Y[2] = ~(~E &  A[1] & ~A[0]);\n    assign Y[3] = ~(~E &  A[1] &  A[0]);\nendmodule\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 说明：\n\n * 用的是 组合逻辑“显式写法”，所有逻辑条件完全展开。\n * 输出高电平默认，只有选中那一路输出为低电平（有效）。\n\n----------------------------------------\n\n\n# 4.2 方式二：使用case语句抽象描述\n\nmodule decoder2to4_case (\n    input wire [1:0] A,\n    input wire E,\n    output reg [3:0] Y\n);\n    always @(*) begin\n        if (E == 1'b1) begin\n            Y = 4'b1111;  // 禁止译码，全1表示全无效\n        end else begin\n            case (A)\n                2'b00: Y = 4'b1110;\n                2'b01: Y = 4'b1101;\n                2'b10: Y = 4'b1011;\n                2'b11: Y = 4'b0111;\n                default: Y = 4'b1111;\n            endcase\n        end\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 说明：\n\n * 结构更清晰，适合综合时易读易维护。\n * 默认 Y=4'b1111 是个好习惯，避免 latch。",normalizedContent:"# 数字译码器：decoder模块的实现\n\n\n# 1. 功能说明\n\n数字译码器的作用是：\n\n> 将二进制代码“翻译”为唯一一个输出信号为有效的形式。\n\n说白了，就是告诉你：“当前是哪一位激活？”\n如果编码器是“你说话我翻译成代码”，那译码器就是“你给我代码我告诉你选了谁”。\n\n----------------------------------------\n\n\n# 2. 示例：2线-4线译码器（2-to-4 decoder）\n\n * 输入：2位选择信号 a[1:0]\n * 输出：4路输出 y[3:0]\n * 使能信号：e（有效低）\n\n> 当 e = 0 时，根据 a 的值，仅有一位 y[i] 输出为低电平（即有效）\n\n\n# 2.1 真值表（带使能）\n\ne   a[1]   a[0]   y[3]   y[2]   y[1]   y[0]\n1   x      x      1      1      1      1\n0   0      0      1      1      1      0\n0   0      1      1      1      0      1\n0   1      0      1      0      1      1\n0   1      1      0      1      1      1\n\n输出低电平表示有效（有点反直觉，但这是最常见用法，一个真正的man要拿得起放得下）\n\n----------------------------------------\n\n\n# 3. 原理分析\n\n译码器的输出函数用最小项的“非”形式来表示：\n\n\n# 输出函数表达式：\n\n> 对于第 i 路输出，\n> yi = ~e & mi，其中 mi 是第 i 项的最小项（对应 a 的取值）\n\n举例：\n\n * y0 = ~e & ~a[1] & ~a[0]\n * y1 = ~e & ~a[1] & a[0]\n * y2 = ~e & a[1] & ~a[0]\n * y3 = ~e & a[1] & a[0]\n\n----------------------------------------\n\n\n# 4. verilog实现方式\n\n\n# 4.1 方式一：使用逻辑表达式实现\n\nmodule decoder2to4_expr (\n    input wire [1:0] a,\n    input wire e,             // 有效低\n    output wire [3:0] y\n);\n    assign y[0] = ~(~e & ~a[1] & ~a[0]);\n    assign y[1] = ~(~e & ~a[1] &  a[0]);\n    assign y[2] = ~(~e &  a[1] & ~a[0]);\n    assign y[3] = ~(~e &  a[1] &  a[0]);\nendmodule\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 说明：\n\n * 用的是 组合逻辑“显式写法”，所有逻辑条件完全展开。\n * 输出高电平默认，只有选中那一路输出为低电平（有效）。\n\n----------------------------------------\n\n\n# 4.2 方式二：使用case语句抽象描述\n\nmodule decoder2to4_case (\n    input wire [1:0] a,\n    input wire e,\n    output reg [3:0] y\n);\n    always @(*) begin\n        if (e == 1'b1) begin\n            y = 4'b1111;  // 禁止译码，全1表示全无效\n        end else begin\n            case (a)\n                2'b00: y = 4'b1110;\n                2'b01: y = 4'b1101;\n                2'b10: y = 4'b1011;\n                2'b11: y = 4'b0111;\n                default: y = 4'b1111;\n            endcase\n        end\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 说明：\n\n * 结构更清晰，适合综合时易读易维护。\n * 默认 y=4'b1111 是个好习惯，避免 latch。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"14.Verilog HDL时序电路设计基础",frontmatter:{title:"14.Verilog HDL时序电路设计基础",date:"2025-08-13T14:00:00.000Z",permalink:"/pages/Verilog_14/"},regularPath:"/01.Verilog/14.Verilog%20HDL%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html",relativePath:"01.Verilog/14.Verilog HDL时序电路设计基础.md",key:"v-03ff47ee",path:"/pages/Verilog_14/",headers:[{level:2,title:"1. 核心特点",slug:"_1-核心特点",normalizedTitle:"1. 核心特点",charIndex:24},{level:2,title:"2. 核心组成",slug:"_2-核心组成",normalizedTitle:"2. 核心组成",charIndex:193},{level:2,title:"3. 同步时序的核心：时钟控制",slug:"_3-同步时序的核心-时钟控制",normalizedTitle:"3. 同步时序的核心：时钟控制",charIndex:423},{level:2,title:"4. Verilog 实现示例",slug:"_4-verilog-实现示例",normalizedTitle:"4. verilog 实现示例",charIndex:657},{level:2,title:"5. 小结",slug:"_5-小结",normalizedTitle:"5. 小结",charIndex:1073}],headersStr:"1. 核心特点 2. 核心组成 3. 同步时序的核心：时钟控制 4. Verilog 实现示例 5. 小结",content:"# 时序电路设计基础：从“有记忆”开始\n\n\n# 1. 核心特点\n\n时序电路和组合逻辑最大的区别，就在于它有记忆。\n它的输出不仅取决于当前输入，还取决于电路的历史状态。\n\n> 组合逻辑是“你说啥我立刻答啥”，时序电路是“我记得你之前说过啥，所以我这次回答不一样”。\n\n换句话说，时序电路有状态。\n\n----------------------------------------\n\n\n# 2. 核心组成\n\n时序电路 = 组合逻辑电路 + 存储电路（触发器）\n\n * 组合逻辑电路：负责“算”，根据输入信号和当前状态生成下一状态和输出。\n * 存储电路（触发器）：负责“记”，保存状态直到下一个时钟触发。\n\n在 Verilog 中，我们通常用 always @(posedge clk) 或 always @(negedge clk) 来描述触发器的行为。\n\n----------------------------------------\n\n\n# 3. 同步时序的核心：时钟控制\n\n在同步时序电路中，状态的变化严格由时钟边沿控制。\n\n * 上升沿触发：posedge clk\n * 下降沿触发：negedge clk\n\n时钟信号就像一个节拍器：\n\n> 节拍一到，所有触发器一起“换状态”；节拍之间，状态保持不变。\n\n这种设计的好处：\n\n 1. 所有状态变化有统一节拍，电路稳定。\n 2. 容易分析和调试（画时序图很方便）。\n\n----------------------------------------\n\n\n# 4. Verilog 实现示例\n\n下面用一个简单的D触发器例子展示同步时序电路的写法：\n\nmodule d_ff (\n    input  wire clk,    // 时钟信号\n    input  wire rst_n,  // 异步复位，低有效\n    input  wire d,      // 数据输入\n    output reg  q       // 数据输出（存储状态）\n);\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            q <= 1'b0;     // 复位状态\n        else\n            q <= d;        // 在时钟上升沿，存储输入数据\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 5. 小结\n\n * 时序电路的关键是状态，状态由触发器保存。\n * 同步时序电路用时钟边沿统一控制状态变化。\n * 组合逻辑 + 存储器件的结合，让电路能“记住过去”，实现计数器、寄存器、状态机等功能。\n\n> 组合逻辑是“计算器”，时序电路是“计算器 + 笔记本”——算得出，还记得住。",normalizedContent:"# 时序电路设计基础：从“有记忆”开始\n\n\n# 1. 核心特点\n\n时序电路和组合逻辑最大的区别，就在于它有记忆。\n它的输出不仅取决于当前输入，还取决于电路的历史状态。\n\n> 组合逻辑是“你说啥我立刻答啥”，时序电路是“我记得你之前说过啥，所以我这次回答不一样”。\n\n换句话说，时序电路有状态。\n\n----------------------------------------\n\n\n# 2. 核心组成\n\n时序电路 = 组合逻辑电路 + 存储电路（触发器）\n\n * 组合逻辑电路：负责“算”，根据输入信号和当前状态生成下一状态和输出。\n * 存储电路（触发器）：负责“记”，保存状态直到下一个时钟触发。\n\n在 verilog 中，我们通常用 always @(posedge clk) 或 always @(negedge clk) 来描述触发器的行为。\n\n----------------------------------------\n\n\n# 3. 同步时序的核心：时钟控制\n\n在同步时序电路中，状态的变化严格由时钟边沿控制。\n\n * 上升沿触发：posedge clk\n * 下降沿触发：negedge clk\n\n时钟信号就像一个节拍器：\n\n> 节拍一到，所有触发器一起“换状态”；节拍之间，状态保持不变。\n\n这种设计的好处：\n\n 1. 所有状态变化有统一节拍，电路稳定。\n 2. 容易分析和调试（画时序图很方便）。\n\n----------------------------------------\n\n\n# 4. verilog 实现示例\n\n下面用一个简单的d触发器例子展示同步时序电路的写法：\n\nmodule d_ff (\n    input  wire clk,    // 时钟信号\n    input  wire rst_n,  // 异步复位，低有效\n    input  wire d,      // 数据输入\n    output reg  q       // 数据输出（存储状态）\n);\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            q <= 1'b0;     // 复位状态\n        else\n            q <= d;        // 在时钟上升沿，存储输入数据\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 5. 小结\n\n * 时序电路的关键是状态，状态由触发器保存。\n * 同步时序电路用时钟边沿统一控制状态变化。\n * 组合逻辑 + 存储器件的结合，让电路能“记住过去”，实现计数器、寄存器、状态机等功能。\n\n> 组合逻辑是“计算器”，时序电路是“计算器 + 笔记本”——算得出，还记得住。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"11.verilog HDL组合电路之数字编码器",frontmatter:{title:"11.verilog HDL组合电路之数字编码器",date:"2025-08-07T16:20:00.000Z",permalink:"/pages/Verilog_11/"},regularPath:"/01.Verilog/11.verilog%20HDL%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF%E4%B9%8B%E6%95%B0%E5%AD%97%E7%BC%96%E7%A0%81%E5%99%A8.html",relativePath:"01.Verilog/11.verilog HDL组合电路之数字编码器.md",key:"v-42f8cede",path:"/pages/Verilog_11/",headers:[{level:2,title:"1. 功能说明",slug:"_1-功能说明",normalizedTitle:"1. 功能说明",charIndex:25},{level:2,title:"2. 编码器的分类与实现",slug:"_2-编码器的分类与实现",normalizedTitle:"2. 编码器的分类与实现",charIndex:197},{level:3,title:"2.1 普通编码器（Basic Encoder）",slug:"_2-1-普通编码器-basic-encoder",normalizedTitle:"2.1 普通编码器（basic encoder）",charIndex:230},{level:3,title:"2.2 优先编码器（Priority Encoder）",slug:"_2-2-优先编码器-priority-encoder",normalizedTitle:"2.2 优先编码器（priority encoder）",charIndex:1115},{level:3,title:"2.3 二进制转BCD编码器（Binary to BCD Encoder）",slug:"_2-3-二进制转bcd编码器-binary-to-bcd-encoder",normalizedTitle:"2.3 二进制转bcd编码器（binary to bcd encoder）",charIndex:1991}],headersStr:"1. 功能说明 2. 编码器的分类与实现 2.1 普通编码器（Basic Encoder） 2.2 优先编码器（Priority Encoder） 2.3 二进制转BCD编码器（Binary to BCD Encoder）",content:"# 数字编码器：Encoder模块的实现\n\n\n# 1. 功能说明\n\n编码器的作用是：\n\n> 将多个输入线路中“有效”的一个信号，转换为对应的二进制编码输出。\n\n从硬件直觉讲，你可以把它看成“反向的多路选择器”——选择器是从输入中挑一个送出去，编码器是从多个输入中判断“哪个激活”，然后生成一个编码值。\n\n----------------------------------------\n\n\n# 2. 编码器的分类与实现\n\n编码器不止一种，常见有三类：\n\n\n# 2.1 普通编码器（Basic Encoder）\n\n * 要求：同一时刻只能有一个输入是有效的（即为1）\n * 功能：直接将有效输入的位置转换为二进制输出\n\n# ✅ 示例：8线-3线普通编码器\n\n输入编号（IN）   二进制输出（Y）\nIN[0]=1    000\nIN[1]=1    001\nIN[2]=1    010\nIN[3]=1    011\nIN[4]=1    100\nIN[5]=1    101\nIN[6]=1    110\nIN[7]=1    111\n\n# 🔧 Verilog代码\n\nmodule encoder8to3 (\n    input wire [7:0] IN,\n    output reg [2:0] Y\n);\n    always @(*) begin\n        case (IN)\n            8'b0000_0001: Y = 3'b000;\n            8'b0000_0010: Y = 3'b001;\n            8'b0000_0100: Y = 3'b010;\n            8'b0000_1000: Y = 3'b011;\n            8'b0001_0000: Y = 3'b100;\n            8'b0010_0000: Y = 3'b101;\n            8'b0100_0000: Y = 3'b110;\n            8'b1000_0000: Y = 3'b111;\n            default:      Y = 3'b000; // 默认输出，防止综合报警\n        endcase\n    end\nendmodule\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n# 💡 注意\n\n * 多个输入为1会导致编码冲突，因此只能有一个输入为高电平。\n * 不满足时默认输出可能错误，实际应用中要加输入检查。\n\n\n# 2.2 优先编码器（Priority Encoder）\n\n * 特点：多个输入同时有效时，按编号优先级高的先输出。\n * 常用于：中断管理、抢占式调度。\n\n# ✅ 示例：8线-3线优先编码器（高位优先）\n\nIN[7:0]     Y输出\n0000_0001   000\n0000_0011   001\n1000_0001   111\n0001_1111   100\n...         ...\n\n# 🔧 Verilog代码\n\nmodule priority_encoder8to3 (\n    input wire [7:0] IN,\n    output reg [2:0] Y\n);\n    always @(*) begin\n        casex (IN)\n            8'b1xxxxxxx: Y = 3'b111;\n            8'b01xxxxxx: Y = 3'b110;\n            8'b001xxxxx: Y = 3'b101;\n            8'b0001xxxx: Y = 3'b100;\n            8'b00001xxx: Y = 3'b011;\n            8'b000001xx: Y = 3'b010;\n            8'b0000001x: Y = 3'b001;\n            8'b00000001: Y = 3'b000;\n            default:     Y = 3'b000;\n        endcase\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# 💡 casex说明：\n\n * casex 允许使用 x 表示“无关位”，在优先编码中很方便。\n * 越靠前的匹配项优先级越高，符合“优先”语义。\n\n----------------------------------------\n\n\n# 2.3 二进制转BCD编码器（Binary to BCD Encoder）\n\n * 作用：将普通二进制数转换为BCD码（8421码或余3码等）\n * 常用于：数码管显示、七段码驱动\n\n# ✅ 示例：4位二进制转8421BCD\n\n * 输入范围：00001001（09）\n * 输出即为对应的4位BCD码，其实和原输入一样（只是明确为BCD）\n\n# 🔧 Verilog代码（例：显示0~9）\n\nmodule binary_to_bcd (\n    input wire [3:0] bin,\n    output reg [3:0] bcd\n);\n    always @(*) begin\n        if (bin < 10)\n            bcd = bin; // 直接映射\n        else\n            bcd = 4'b0000; // 超过9则清零（可自定义处理）\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 💡 扩展应用\n\n * 结合 数码管译码器，可用在计数器、时间显示、输入设备反馈等场景。",normalizedContent:"# 数字编码器：encoder模块的实现\n\n\n# 1. 功能说明\n\n编码器的作用是：\n\n> 将多个输入线路中“有效”的一个信号，转换为对应的二进制编码输出。\n\n从硬件直觉讲，你可以把它看成“反向的多路选择器”——选择器是从输入中挑一个送出去，编码器是从多个输入中判断“哪个激活”，然后生成一个编码值。\n\n----------------------------------------\n\n\n# 2. 编码器的分类与实现\n\n编码器不止一种，常见有三类：\n\n\n# 2.1 普通编码器（basic encoder）\n\n * 要求：同一时刻只能有一个输入是有效的（即为1）\n * 功能：直接将有效输入的位置转换为二进制输出\n\n# ✅ 示例：8线-3线普通编码器\n\n输入编号（in）   二进制输出（y）\nin[0]=1    000\nin[1]=1    001\nin[2]=1    010\nin[3]=1    011\nin[4]=1    100\nin[5]=1    101\nin[6]=1    110\nin[7]=1    111\n\n# 🔧 verilog代码\n\nmodule encoder8to3 (\n    input wire [7:0] in,\n    output reg [2:0] y\n);\n    always @(*) begin\n        case (in)\n            8'b0000_0001: y = 3'b000;\n            8'b0000_0010: y = 3'b001;\n            8'b0000_0100: y = 3'b010;\n            8'b0000_1000: y = 3'b011;\n            8'b0001_0000: y = 3'b100;\n            8'b0010_0000: y = 3'b101;\n            8'b0100_0000: y = 3'b110;\n            8'b1000_0000: y = 3'b111;\n            default:      y = 3'b000; // 默认输出，防止综合报警\n        endcase\n    end\nendmodule\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n# 💡 注意\n\n * 多个输入为1会导致编码冲突，因此只能有一个输入为高电平。\n * 不满足时默认输出可能错误，实际应用中要加输入检查。\n\n\n# 2.2 优先编码器（priority encoder）\n\n * 特点：多个输入同时有效时，按编号优先级高的先输出。\n * 常用于：中断管理、抢占式调度。\n\n# ✅ 示例：8线-3线优先编码器（高位优先）\n\nin[7:0]     y输出\n0000_0001   000\n0000_0011   001\n1000_0001   111\n0001_1111   100\n...         ...\n\n# 🔧 verilog代码\n\nmodule priority_encoder8to3 (\n    input wire [7:0] in,\n    output reg [2:0] y\n);\n    always @(*) begin\n        casex (in)\n            8'b1xxxxxxx: y = 3'b111;\n            8'b01xxxxxx: y = 3'b110;\n            8'b001xxxxx: y = 3'b101;\n            8'b0001xxxx: y = 3'b100;\n            8'b00001xxx: y = 3'b011;\n            8'b000001xx: y = 3'b010;\n            8'b0000001x: y = 3'b001;\n            8'b00000001: y = 3'b000;\n            default:     y = 3'b000;\n        endcase\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# 💡 casex说明：\n\n * casex 允许使用 x 表示“无关位”，在优先编码中很方便。\n * 越靠前的匹配项优先级越高，符合“优先”语义。\n\n----------------------------------------\n\n\n# 2.3 二进制转bcd编码器（binary to bcd encoder）\n\n * 作用：将普通二进制数转换为bcd码（8421码或余3码等）\n * 常用于：数码管显示、七段码驱动\n\n# ✅ 示例：4位二进制转8421bcd\n\n * 输入范围：00001001（09）\n * 输出即为对应的4位bcd码，其实和原输入一样（只是明确为bcd）\n\n# 🔧 verilog代码（例：显示0~9）\n\nmodule binary_to_bcd (\n    input wire [3:0] bin,\n    output reg [3:0] bcd\n);\n    always @(*) begin\n        if (bin < 10)\n            bcd = bin; // 直接映射\n        else\n            bcd = 4'b0000; // 超过9则清零（可自定义处理）\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 💡 扩展应用\n\n * 结合 数码管译码器，可用在计数器、时间显示、输入设备反馈等场景。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"13.verilog HDL组合电路之奇偶校验器",frontmatter:{title:"13.verilog HDL组合电路之奇偶校验器",date:"2025-08-07T17:45:00.000Z",permalink:"/pages/Verilog_13/"},regularPath:"/01.Verilog/13.verilog%20HDL%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF%E4%B9%8B%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C%E5%99%A8.html",relativePath:"01.Verilog/13.verilog HDL组合电路之奇偶校验器.md",key:"v-3042a0fd",path:"/pages/Verilog_13/",headers:[{level:2,title:"1. 功能说明",slug:"_1-功能说明",normalizedTitle:"1. 功能说明",charIndex:32},{level:2,title:"2. 校验类型",slug:"_2-校验类型",normalizedTitle:"2. 校验类型",charIndex:196},{level:3,title:"2.1 奇校验（Odd Parity）",slug:"_2-1-奇校验-odd-parity",normalizedTitle:"2.1 奇校验（odd parity）",charIndex:208},{level:3,title:"2.2 偶校验（Even Parity）",slug:"_2-2-偶校验-even-parity",normalizedTitle:"2.2 偶校验（even parity）",charIndex:335},{level:2,title:"3. 原理分析：全体异或判断",slug:"_3-原理分析-全体异或判断",normalizedTitle:"3. 原理分析：全体异或判断",charIndex:468},{level:2,title:"4. Verilog实现方式",slug:"_4-verilog实现方式",normalizedTitle:"4. verilog实现方式",charIndex:641},{level:3,title:"4.1 结构性描述：逐级异或（适合教学/多位扩展）",slug:"_4-1-结构性描述-逐级异或-适合教学-多位扩展",normalizedTitle:"4.1 结构性描述：逐级异或（适合教学/多位扩展）",charIndex:660},{level:3,title:"说明：",slug:"说明",normalizedTitle:"说明：",charIndex:1026},{level:3,title:"4.2 抽象描述：直接异或所有位",slug:"_4-2-抽象描述-直接异或所有位",normalizedTitle:"4.2 抽象描述：直接异或所有位",charIndex:1126},{level:3,title:"说明：",slug:"说明-2",normalizedTitle:"说明：",charIndex:1026}],headersStr:"1. 功能说明 2. 校验类型 2.1 奇校验（Odd Parity） 2.2 偶校验（Even Parity） 3. 原理分析：全体异或判断 4. Verilog实现方式 4.1 结构性描述：逐级异或（适合教学/多位扩展） 说明： 4.2 抽象描述：直接异或所有位 说明：",content:"# 奇偶校验器：Parity Checker模块的实现\n\n\n# 1. 功能说明\n\n奇偶校验器用于检测一个二进制数据中 1 的个数是奇数还是偶数。\n是数字通信中的老熟人，常用于**错误检测（Error Detection）**中。\n\n> 不纠错，只报错：这玩意不会修数据，但能告诉你“传的可能不对”。\n\n----------------------------------------\n\n\n# 2. 校验类型\n\n\n# 2.1 奇校验（Odd Parity）\n\n> 在原始数据后面加一个奇校验位，使得整体1的个数为奇数。\n\n例：1011（三个1）→ 校验位为 0，保证总共有3个1\n   1000（一个1）→ 校验位为 0\n   1100（两个1）→ 校验位为 1\n\n\n# 2.2 偶校验（Even Parity）\n\n> 校验位保证总1的个数为偶数。\n\n例：1011（三个1）→ 校验位为 1（凑成四个1）\n  1100（两个1）→ 校验位为 0\n\n----------------------------------------\n\n\n# 3. 原理分析：全体异或判断\n\n关键结论：\n\n * 所有位异或的结果 = 奇偶校验结果\n * 因为异或就是：“不同为1，相同为0”，正好能记录1的奇偶性。\n\n所以：\n\n * P = D[3] ^ D[2] ^ D[1] ^ D[0] 就能输出奇偶信息。\n\n----------------------------------------\n\n\n# 4. Verilog实现方式\n\n\n# 4.1 结构性描述：逐级异或（适合教学/多位扩展）\n\nmodule parity_checker_struct (\n    input wire [3:0] D,    // 原始4位数据\n    output wire parity_odd,\n    output wire parity_even\n);\n    wire xor1, xor2;\n\n    assign xor1 = D[3] ^ D[2];\n    assign xor2 = xor1 ^ D[1];\n    assign parity_odd  = xor2 ^ D[0];\n    assign parity_even = ~parity_odd;\nendmodule\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 说明：\n\n * 逐级展开异或，逻辑路径清晰，适合结构化学习\n * 输出两个信号，一个奇校验位，一个偶校验位\n\n----------------------------------------\n\n\n# 4.2 抽象描述：直接异或所有位\n\nmodule parity_checker_abstract (\n    input wire [7:0] D,      // 8位数据\n    output wire parity_odd,\n    output wire parity_even\n);\n    assign parity_odd  = ^D;     // 按位异或归约（^D 表示从 D[7] 到 D[0] 全异或）\n    assign parity_even = ~^D;\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 说明：\n\n * ^D 是 Verilog 的“归约异或”操作符，非常简洁\n * 支持任意位宽，适合实际项目使用",normalizedContent:"# 奇偶校验器：parity checker模块的实现\n\n\n# 1. 功能说明\n\n奇偶校验器用于检测一个二进制数据中 1 的个数是奇数还是偶数。\n是数字通信中的老熟人，常用于**错误检测（error detection）**中。\n\n> 不纠错，只报错：这玩意不会修数据，但能告诉你“传的可能不对”。\n\n----------------------------------------\n\n\n# 2. 校验类型\n\n\n# 2.1 奇校验（odd parity）\n\n> 在原始数据后面加一个奇校验位，使得整体1的个数为奇数。\n\n例：1011（三个1）→ 校验位为 0，保证总共有3个1\n   1000（一个1）→ 校验位为 0\n   1100（两个1）→ 校验位为 1\n\n\n# 2.2 偶校验（even parity）\n\n> 校验位保证总1的个数为偶数。\n\n例：1011（三个1）→ 校验位为 1（凑成四个1）\n  1100（两个1）→ 校验位为 0\n\n----------------------------------------\n\n\n# 3. 原理分析：全体异或判断\n\n关键结论：\n\n * 所有位异或的结果 = 奇偶校验结果\n * 因为异或就是：“不同为1，相同为0”，正好能记录1的奇偶性。\n\n所以：\n\n * p = d[3] ^ d[2] ^ d[1] ^ d[0] 就能输出奇偶信息。\n\n----------------------------------------\n\n\n# 4. verilog实现方式\n\n\n# 4.1 结构性描述：逐级异或（适合教学/多位扩展）\n\nmodule parity_checker_struct (\n    input wire [3:0] d,    // 原始4位数据\n    output wire parity_odd,\n    output wire parity_even\n);\n    wire xor1, xor2;\n\n    assign xor1 = d[3] ^ d[2];\n    assign xor2 = xor1 ^ d[1];\n    assign parity_odd  = xor2 ^ d[0];\n    assign parity_even = ~parity_odd;\nendmodule\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 说明：\n\n * 逐级展开异或，逻辑路径清晰，适合结构化学习\n * 输出两个信号，一个奇校验位，一个偶校验位\n\n----------------------------------------\n\n\n# 4.2 抽象描述：直接异或所有位\n\nmodule parity_checker_abstract (\n    input wire [7:0] d,      // 8位数据\n    output wire parity_odd,\n    output wire parity_even\n);\n    assign parity_odd  = ^d;     // 按位异或归约（^d 表示从 d[7] 到 d[0] 全异或）\n    assign parity_even = ~^d;\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 说明：\n\n * ^d 是 verilog 的“归约异或”操作符，非常简洁\n * 支持任意位宽，适合实际项目使用",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"15.Verilog HDL触发器设计",frontmatter:{title:"15.Verilog HDL触发器设计",date:"2025-08-13T14:20:00.000Z",permalink:"/pages/Verilog_15/"},regularPath:"/01.Verilog/15.Verilog%20HDL%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%A7%A6%E5%8F%91%E5%99%A8.html",relativePath:"01.Verilog/15.Verilog HDL时序电路之基本触发器.md",key:"v-709769d8",path:"/pages/Verilog_15/",headers:[{level:2,title:"1. 基本 D 触发器",slug:"_1-基本-d-触发器",normalizedTitle:"1. 基本 d 触发器",charIndex:23},{level:3,title:"Verilog 示例：基本 D 触发器",slug:"verilog-示例-基本-d-触发器",normalizedTitle:"verilog 示例：基本 d 触发器",charIndex:128},{level:3,title:"2.1 同步复位",slug:"_2-1-同步复位",normalizedTitle:"2.1 同步复位",charIndex:352},{level:3,title:"2.2 异步复位",slug:"_2-2-异步复位",normalizedTitle:"2.2 异步复位",charIndex:779},{level:2,title:"3. T 触发器",slug:"_3-t-触发器",normalizedTitle:"3. t 触发器",charIndex:1228},{level:2,title:"4. 小结",slug:"_4-小结",normalizedTitle:"4. 小结",charIndex:1753}],headersStr:"1. 基本 D 触发器 Verilog 示例：基本 D 触发器 2.1 同步复位 2.2 异步复位 3. T 触发器 4. 小结",content:"# 触发器设计：数字电路的“记事本”\n\n\n# 1. 基本 D 触发器\n\nD触发器（Data 或 Delay Flip-Flop）是最常见的触发器。\n它会在时钟边沿（上升沿或下降沿）把输入 data_in 的值存入输出 q，并保持到下一个时钟触发。\n\n\n# Verilog 示例：基本 D 触发器\n\nmodule d_ff_basic (\n    input  wire clk,\n    input  wire data_in,\n    output reg  q\n);\n    always @(posedge clk) begin\n        q <= data_in;  // 在时钟上升沿锁存输入\n    end\nendmodule\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 2.1 同步复位\n\n * 复位信号在时钟边沿生效。\n * 好处：复位动作和数据更新有相同时序，容易分析。\n * 坏处：复位需要等待时钟边沿，速度可能不够快。\n\nmodule d_ff_sync_rst (\n    input  wire clk,\n    input  wire rst_n,    // 低有效复位\n    input  wire data_in,\n    output reg  q\n);\n    always @(posedge clk) begin\n        if (!rst_n)\n            q <= 1'b0;    // 同步复位\n        else\n            q <= data_in;\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n----------------------------------------\n\n\n# 2.2 异步复位\n\n * 复位信号在任何时间都能立即生效（不用等时钟）。\n * 好处：可以快速清零。\n * 坏处：如果复位释放时机不当，可能导致亚稳态问题。\n\nmodule d_ff_async_rst (\n    input  wire clk,\n    input  wire rst_n,    // 低有效复位\n    input  wire data_in,\n    output reg  q\n);\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            q <= 1'b0;    // 异步复位立即生效\n        else\n            q <= data_in;\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n----------------------------------------\n\n\n# 3. T 触发器\n\nT触发器（Toggle Flip-Flop）常用于分频器、计数器等电路。 它的行为是：\n\n * T = 1 → 状态翻转\n * T = 0 → 保持状态\n\nmodule t_ff (\n    input  wire clk,\n    input  wire rst_n,     // 低有效复位\n    input  wire T,\n    output reg  data_out\n);\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            data_out <= 1'b0;\n        else if (T)\n            data_out <= ~data_out;  // 翻转\n        else\n            data_out <= data_out;   // 保持\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n----------------------------------------\n\n\n# 4. 小结\n\n * D触发器是最基础的状态存储单元。\n * 同步复位安全、易分析；异步复位快速，但要注意释放时机。\n * T触发器是计数器和分频器的好帮手。\n\n> 组合逻辑会“算”，触发器会“记”，两者结合才是完整的数字电路。",normalizedContent:"# 触发器设计：数字电路的“记事本”\n\n\n# 1. 基本 d 触发器\n\nd触发器（data 或 delay flip-flop）是最常见的触发器。\n它会在时钟边沿（上升沿或下降沿）把输入 data_in 的值存入输出 q，并保持到下一个时钟触发。\n\n\n# verilog 示例：基本 d 触发器\n\nmodule d_ff_basic (\n    input  wire clk,\n    input  wire data_in,\n    output reg  q\n);\n    always @(posedge clk) begin\n        q <= data_in;  // 在时钟上升沿锁存输入\n    end\nendmodule\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 2.1 同步复位\n\n * 复位信号在时钟边沿生效。\n * 好处：复位动作和数据更新有相同时序，容易分析。\n * 坏处：复位需要等待时钟边沿，速度可能不够快。\n\nmodule d_ff_sync_rst (\n    input  wire clk,\n    input  wire rst_n,    // 低有效复位\n    input  wire data_in,\n    output reg  q\n);\n    always @(posedge clk) begin\n        if (!rst_n)\n            q <= 1'b0;    // 同步复位\n        else\n            q <= data_in;\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n----------------------------------------\n\n\n# 2.2 异步复位\n\n * 复位信号在任何时间都能立即生效（不用等时钟）。\n * 好处：可以快速清零。\n * 坏处：如果复位释放时机不当，可能导致亚稳态问题。\n\nmodule d_ff_async_rst (\n    input  wire clk,\n    input  wire rst_n,    // 低有效复位\n    input  wire data_in,\n    output reg  q\n);\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            q <= 1'b0;    // 异步复位立即生效\n        else\n            q <= data_in;\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n----------------------------------------\n\n\n# 3. t 触发器\n\nt触发器（toggle flip-flop）常用于分频器、计数器等电路。 它的行为是：\n\n * t = 1 → 状态翻转\n * t = 0 → 保持状态\n\nmodule t_ff (\n    input  wire clk,\n    input  wire rst_n,     // 低有效复位\n    input  wire t,\n    output reg  data_out\n);\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            data_out <= 1'b0;\n        else if (t)\n            data_out <= ~data_out;  // 翻转\n        else\n            data_out <= data_out;   // 保持\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n----------------------------------------\n\n\n# 4. 小结\n\n * d触发器是最基础的状态存储单元。\n * 同步复位安全、易分析；异步复位快速，但要注意释放时机。\n * t触发器是计数器和分频器的好帮手。\n\n> 组合逻辑会“算”，触发器会“记”，两者结合才是完整的数字电路。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"16.Verilog HDL计数器设计",frontmatter:{title:"16.Verilog HDL计数器设计",date:"2025-08-13T14:40:00.000Z",permalink:"/pages/Verilog_16/"},regularPath:"/01.Verilog/16.Verilog%20HDL%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E4%B9%8B%E8%AE%A1%E6%95%B0%E5%99%A8.html",relativePath:"01.Verilog/16.Verilog HDL时序逻辑电路之计数器.md",key:"v-6df42ea1",path:"/pages/Verilog_16/",headers:[{level:2,title:"1. 二进制计数器",slug:"_1-二进制计数器",normalizedTitle:"1. 二进制计数器",charIndex:23},{level:2,title:"2. 任意模值计数器（模 M）",slug:"_2-任意模值计数器-模-m",normalizedTitle:"2. 任意模值计数器（模 m）",charIndex:297},{level:3,title:"2.1 核心设计思路",slug:"_2-1-核心设计思路",normalizedTitle:"2.1 核心设计思路",charIndex:317},{level:3,title:"2.2 Verilog 示例",slug:"_2-2-verilog-示例",normalizedTitle:"2.2 verilog 示例",charIndex:480},{level:2,title:"3. 小结",slug:"_3-小结",normalizedTitle:"3. 小结",charIndex:969}],headersStr:"1. 二进制计数器 2. 任意模值计数器（模 M） 2.1 核心设计思路 2.2 Verilog 示例 3. 小结",content:"# 计数器设计：数字世界的“节拍器”\n\n\n# 1. 二进制计数器\n\n最简单的计数器就是二进制计数器。\n1位二进制计数器可以用一个触发器实现——每次时钟来就翻转一次。\n\nmodule counter_1bit (\n    input  wire clk,\n    output reg  Q\n);\n    always @(posedge clk) begin\n        Q <= ~Q;  // 每个时钟上升沿翻转\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n1位计数器：0 → 1 → 0 → 1 … 周期是输入时钟的两倍，也就是分频器的雏形。\n\n\n# 2. 任意模值计数器（模 M）\n\n\n# 2.1 核心设计思路\n\n 1. 确定触发器数量：找到最小的 N，使得 2^N > M。 例如 M=10，2^3=8 不够，2^4=16 满足，所以 N=4。\n 2. 计数逻辑：每个时钟+1。\n 3. 反馈清零：计到 M-1 时清零。\n\n----------------------------------------\n\n\n# 2.2 Verilog 示例\n\nmodule counter_modM #(\n    parameter M = 10  // 模值\n)(\n    input  wire clk,\n    input  wire rst_n,   // 低有效复位\n    output reg  [$clog2(M)-1:0] count\n);\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            count <= 0;\n        else if (count == M-1)\n            count <= 0;         // 计满清零\n        else\n            count <= count + 1; // 正常计数\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n----------------------------------------\n\n\n# 3. 小结\n\n * 二进制计数器：简单，直接用触发器翻转输出，常作分频器。\n * 模 M 计数器：设计前先算出需要的触发器数量，然后用反馈清零法限制计数范围。\n * 在工程中，计数器是时序控制的基础，比如分频、延时、状态机定时等都会用到。\n\n> 如果说时钟是数字电路的“心跳”，那计数器就是“心跳的节拍器”。",normalizedContent:"# 计数器设计：数字世界的“节拍器”\n\n\n# 1. 二进制计数器\n\n最简单的计数器就是二进制计数器。\n1位二进制计数器可以用一个触发器实现——每次时钟来就翻转一次。\n\nmodule counter_1bit (\n    input  wire clk,\n    output reg  q\n);\n    always @(posedge clk) begin\n        q <= ~q;  // 每个时钟上升沿翻转\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n1位计数器：0 → 1 → 0 → 1 … 周期是输入时钟的两倍，也就是分频器的雏形。\n\n\n# 2. 任意模值计数器（模 m）\n\n\n# 2.1 核心设计思路\n\n 1. 确定触发器数量：找到最小的 n，使得 2^n > m。 例如 m=10，2^3=8 不够，2^4=16 满足，所以 n=4。\n 2. 计数逻辑：每个时钟+1。\n 3. 反馈清零：计到 m-1 时清零。\n\n----------------------------------------\n\n\n# 2.2 verilog 示例\n\nmodule counter_modm #(\n    parameter m = 10  // 模值\n)(\n    input  wire clk,\n    input  wire rst_n,   // 低有效复位\n    output reg  [$clog2(m)-1:0] count\n);\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            count <= 0;\n        else if (count == m-1)\n            count <= 0;         // 计满清零\n        else\n            count <= count + 1; // 正常计数\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n----------------------------------------\n\n\n# 3. 小结\n\n * 二进制计数器：简单，直接用触发器翻转输出，常作分频器。\n * 模 m 计数器：设计前先算出需要的触发器数量，然后用反馈清零法限制计数范围。\n * 在工程中，计数器是时序控制的基础，比如分频、延时、状态机定时等都会用到。\n\n> 如果说时钟是数字电路的“心跳”，那计数器就是“心跳的节拍器”。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"17.Verilog HDL移位寄存器",frontmatter:{title:"17.Verilog HDL移位寄存器",date:"2025-08-13T15:00:00.000Z",permalink:"/pages/Verilog_17/"},regularPath:"/01.Verilog/17.Verilog%20HDL%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E4%B9%8B%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8.html",relativePath:"01.Verilog/17.Verilog HDL时序逻辑电路之移位寄存器.md",key:"v-a6e17e70",path:"/pages/Verilog_17/",headers:[{level:2,title:"1. 什么是移位寄存器？",slug:"_1-什么是移位寄存器",normalizedTitle:"1. 什么是移位寄存器？",charIndex:20},{level:2,title:"2. 环形移位寄存器",slug:"_2-环形移位寄存器",normalizedTitle:"2. 环形移位寄存器",charIndex:168},{level:3,title:"工作原理：",slug:"工作原理",normalizedTitle:"工作原理：",charIndex:227},{level:3,title:"Verilog 示例：4位循环右移",slug:"verilog-示例-4位循环右移",normalizedTitle:"verilog 示例：4位循环右移",charIndex:325},{level:2,title:"3. 应用场景",slug:"_3-应用场景",normalizedTitle:"3. 应用场景",charIndex:728},{level:2,title:"4. 小结",slug:"_4-小结",normalizedTitle:"4. 小结",charIndex:921}],headersStr:"1. 什么是移位寄存器？ 2. 环形移位寄存器 工作原理： Verilog 示例：4位循环右移 3. 应用场景 4. 小结",content:"# 移位寄存器：数据“搬运工”\n\n\n# 1. 什么是移位寄存器？\n\n移位寄存器是一种能在时钟触发下，将数据按位向左或向右移动的寄存器。\n它常用来在数字电路中搬运、延迟或循环数据。\n\n> 如果触发器是“记忆单元”，移位寄存器就是一列“搬运带”。\n\n----------------------------------------\n\n\n# 2. 环形移位寄存器\n\n环形移位寄存器是一种特殊移位寄存器——\n移出的一端数据会反馈到另一端，形成一个闭环。\n\n\n# 工作原理：\n\n * 右移：最低位丢掉，高位填入原最高位。\n * 左移：最高位丢掉，最低位填入原最低位。\n\n----------------------------------------\n\n\n# Verilog 示例：4位循环右移\n\nmodule shift_reg_ring (\n    input  wire clk,\n    input  wire rst_n,    // 低有效复位\n    input  wire [3:0] D_init, // 初始值\n    output reg  [3:0] D\n);\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            D <= D_init;                // 复位加载初始值\n        else\n            D <= {D[2:0], D[3]};        // 循环右移\n    end\nendmodule\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 3. 应用场景\n\n环形移位寄存器在工程中很常见，典型用途有：\n\n 1. 串/并转换 串行输入、并行输出，或反之（常见于串口通信）。\n 2. 序列检测 用移位寄存器保存最近 N 位输入，与目标模式比较。\n 3. 伪随机码生成 配合异或反馈实现 LFSR（线性反馈移位寄存器），用于加密、测试等。\n\n----------------------------------------\n\n\n# 4. 小结\n\n * 移位寄存器就是一组能在时钟下按位搬运数据的触发器。\n * 环形移位寄存器通过反馈实现“首尾相接”的循环移动。\n * 搭配逻辑运算可实现更复杂的功能，如序列识别和伪随机数生成。\n\n> 它是数据的搬运带，也是时序电路的节拍舞者。",normalizedContent:"# 移位寄存器：数据“搬运工”\n\n\n# 1. 什么是移位寄存器？\n\n移位寄存器是一种能在时钟触发下，将数据按位向左或向右移动的寄存器。\n它常用来在数字电路中搬运、延迟或循环数据。\n\n> 如果触发器是“记忆单元”，移位寄存器就是一列“搬运带”。\n\n----------------------------------------\n\n\n# 2. 环形移位寄存器\n\n环形移位寄存器是一种特殊移位寄存器——\n移出的一端数据会反馈到另一端，形成一个闭环。\n\n\n# 工作原理：\n\n * 右移：最低位丢掉，高位填入原最高位。\n * 左移：最高位丢掉，最低位填入原最低位。\n\n----------------------------------------\n\n\n# verilog 示例：4位循环右移\n\nmodule shift_reg_ring (\n    input  wire clk,\n    input  wire rst_n,    // 低有效复位\n    input  wire [3:0] d_init, // 初始值\n    output reg  [3:0] d\n);\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            d <= d_init;                // 复位加载初始值\n        else\n            d <= {d[2:0], d[3]};        // 循环右移\n    end\nendmodule\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 3. 应用场景\n\n环形移位寄存器在工程中很常见，典型用途有：\n\n 1. 串/并转换 串行输入、并行输出，或反之（常见于串口通信）。\n 2. 序列检测 用移位寄存器保存最近 n 位输入，与目标模式比较。\n 3. 伪随机码生成 配合异或反馈实现 lfsr（线性反馈移位寄存器），用于加密、测试等。\n\n----------------------------------------\n\n\n# 4. 小结\n\n * 移位寄存器就是一组能在时钟下按位搬运数据的触发器。\n * 环形移位寄存器通过反馈实现“首尾相接”的循环移动。\n * 搭配逻辑运算可实现更复杂的功能，如序列识别和伪随机数生成。\n\n> 它是数据的搬运带，也是时序电路的节拍舞者。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"18.Verilog HDL序列信号发生器",frontmatter:{title:"18.Verilog HDL序列信号发生器",date:"2025-08-13T15:20:00.000Z",permalink:"/pages/Verilog_18/"},regularPath:"/01.Verilog/18.Verilog%20HDL%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E4%B9%8B%E4%BF%A1%E5%8F%B7%E5%8F%91%E7%94%9F%E5%99%A8.html",relativePath:"01.Verilog/18.Verilog HDL时序逻辑电路之信号发生器.md",key:"v-3a3d840e",path:"/pages/Verilog_18/",headers:[{level:2,title:"1. 基本概念",slug:"_1-基本概念",normalizedTitle:"1. 基本概念",charIndex:27},{level:2,title:"2. 移位寄存器型",slug:"_2-移位寄存器型",normalizedTitle:"2. 移位寄存器型",charIndex:183},{level:3,title:"Verilog 示例",slug:"verilog-示例",normalizedTitle:"verilog 示例",charIndex:274},{level:2,title:"3. 反馈组合型",slug:"_3-反馈组合型",normalizedTitle:"3. 反馈组合型",charIndex:823},{level:3,title:"Verilog 框架",slug:"verilog-框架",normalizedTitle:"verilog 框架",charIndex:1079},{level:2,title:"4. 计数器型",slug:"_4-计数器型",normalizedTitle:"4. 计数器型",charIndex:1556},{level:3,title:"Verilog 示例",slug:"verilog-示例-2",normalizedTitle:"verilog 示例",charIndex:274},{level:2,title:"5. 小结",slug:"_5-小结",normalizedTitle:"5. 小结",charIndex:2508}],headersStr:"1. 基本概念 2. 移位寄存器型 Verilog 示例 3. 反馈组合型 Verilog 框架 4. 计数器型 Verilog 示例 5. 小结",content:"# 序列信号发生器：数字电路的“节奏编曲器”\n\n\n# 1. 基本概念\n\n序列信号发生器是能按照预设规律产生一串二进制信号的时序电路。\n它常用于通信码型生成、测试波形输出、序列控制等场景。\n\n常见实现方式有三种：\n\n 1. 移位寄存器型\n 2. 反馈组合型\n 3. 计数器型\n\n----------------------------------------\n\n\n# 2. 移位寄存器型\n\n * 原理：把整个序列直接存储在寄存器中，通过移位依次输出。\n * 优点：速度快，实现简单。\n * 缺点：需要较多触发器（存储量大），不适合超长序列。\n\n\n# Verilog 示例\n\nmodule seq_gen_shift #(\n    parameter N = 8          // 序列位数\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire [N-1:0] seq_init, // 序列初始值\n    output wire seq_out\n);\n    reg [N-1:0] shift_reg;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            shift_reg <= seq_init;                 // 加载序列\n        else\n            shift_reg <= {shift_reg[N-2:0], shift_reg[N-1]}; // 循环移位\n    end\n\n    assign seq_out = shift_reg[N-1];  // 输出最高位\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 3. 反馈组合型\n\n * 原理：用移位寄存器+组合逻辑反馈实现序列生成。\n\n * 优点：存储量小，可产生长序列（典型如 LFSR）。\n\n * 设计步骤：\n   \n   1. 根据序列长度 M 确定寄存器位数 N。\n   \n   2. 列出状态序表。\n   \n   3. 根据序列规律推导反馈函数。 例如：\n      \n      F = Q3 + Q0·Q1 + Q2·Q3\n      \n      \n      1\n      \n      \n      表示反馈信号由这几个触发器状态组合而成。\n\n\n# Verilog 框架\n\nmodule seq_gen_feedback (\n    input  wire clk,\n    input  wire rst_n,\n    output reg  [3:0] Q\n);\n    wire F; // 反馈信号\n\n    assign F = Q[3] | (Q[0] & Q[1]) | (Q[2] & Q[3]); // 示例反馈函数\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            Q <= 4'b0001;             // 初始状态\n        else\n            Q <= {Q[2:0], F};         // 移位 + 反馈\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n----------------------------------------\n\n\n# 4. 计数器型\n\n * 原理：用计数器按顺序切换状态，然后通过组合逻辑生成所需输出。\n * 优点：实现灵活，可生成任意规律信号。\n * 缺点：对于非常长序列，组合逻辑可能复杂。\n\n\n# Verilog 示例\n\nmodule seq_gen_counter #(\n    parameter M = 8 // 序列长度\n)(\n    input  wire clk,\n    input  wire rst_n,\n    output reg  seq_out\n);\n    reg [$clog2(M)-1:0] cnt;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            cnt <= 0;\n        else if (cnt == M-1)\n            cnt <= 0;\n        else\n            cnt <= cnt + 1;\n    end\n\n    // 根据计数值输出序列（示例：预定义8位序列 10110011）\n    always @(*) begin\n        case (cnt)\n            0: seq_out = 1'b1;\n            1: seq_out = 1'b0;\n            2: seq_out = 1'b1;\n            3: seq_out = 1'b1;\n            4: seq_out = 1'b0;\n            5: seq_out = 1'b0;\n            6: seq_out = 1'b1;\n            7: seq_out = 1'b1;\n        endcase\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n----------------------------------------\n\n\n# 5. 小结\n\n * 移位寄存器型：直接存储，速度快，占用面积大。\n * 反馈组合型：存储少，可产生长序列，典型应用是 LFSR。\n * 计数器型：灵活，但输出逻辑可能复杂。\n\n> 不同实现方式，就像不同的编曲手法——目标曲子一样，但乐器选择和演奏方式不同。",normalizedContent:"# 序列信号发生器：数字电路的“节奏编曲器”\n\n\n# 1. 基本概念\n\n序列信号发生器是能按照预设规律产生一串二进制信号的时序电路。\n它常用于通信码型生成、测试波形输出、序列控制等场景。\n\n常见实现方式有三种：\n\n 1. 移位寄存器型\n 2. 反馈组合型\n 3. 计数器型\n\n----------------------------------------\n\n\n# 2. 移位寄存器型\n\n * 原理：把整个序列直接存储在寄存器中，通过移位依次输出。\n * 优点：速度快，实现简单。\n * 缺点：需要较多触发器（存储量大），不适合超长序列。\n\n\n# verilog 示例\n\nmodule seq_gen_shift #(\n    parameter n = 8          // 序列位数\n)(\n    input  wire clk,\n    input  wire rst_n,\n    input  wire [n-1:0] seq_init, // 序列初始值\n    output wire seq_out\n);\n    reg [n-1:0] shift_reg;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            shift_reg <= seq_init;                 // 加载序列\n        else\n            shift_reg <= {shift_reg[n-2:0], shift_reg[n-1]}; // 循环移位\n    end\n\n    assign seq_out = shift_reg[n-1];  // 输出最高位\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 3. 反馈组合型\n\n * 原理：用移位寄存器+组合逻辑反馈实现序列生成。\n\n * 优点：存储量小，可产生长序列（典型如 lfsr）。\n\n * 设计步骤：\n   \n   1. 根据序列长度 m 确定寄存器位数 n。\n   \n   2. 列出状态序表。\n   \n   3. 根据序列规律推导反馈函数。 例如：\n      \n      f = q3 + q0·q1 + q2·q3\n      \n      \n      1\n      \n      \n      表示反馈信号由这几个触发器状态组合而成。\n\n\n# verilog 框架\n\nmodule seq_gen_feedback (\n    input  wire clk,\n    input  wire rst_n,\n    output reg  [3:0] q\n);\n    wire f; // 反馈信号\n\n    assign f = q[3] | (q[0] & q[1]) | (q[2] & q[3]); // 示例反馈函数\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            q <= 4'b0001;             // 初始状态\n        else\n            q <= {q[2:0], f};         // 移位 + 反馈\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n----------------------------------------\n\n\n# 4. 计数器型\n\n * 原理：用计数器按顺序切换状态，然后通过组合逻辑生成所需输出。\n * 优点：实现灵活，可生成任意规律信号。\n * 缺点：对于非常长序列，组合逻辑可能复杂。\n\n\n# verilog 示例\n\nmodule seq_gen_counter #(\n    parameter m = 8 // 序列长度\n)(\n    input  wire clk,\n    input  wire rst_n,\n    output reg  seq_out\n);\n    reg [$clog2(m)-1:0] cnt;\n\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            cnt <= 0;\n        else if (cnt == m-1)\n            cnt <= 0;\n        else\n            cnt <= cnt + 1;\n    end\n\n    // 根据计数值输出序列（示例：预定义8位序列 10110011）\n    always @(*) begin\n        case (cnt)\n            0: seq_out = 1'b1;\n            1: seq_out = 1'b0;\n            2: seq_out = 1'b1;\n            3: seq_out = 1'b1;\n            4: seq_out = 1'b0;\n            5: seq_out = 1'b0;\n            6: seq_out = 1'b1;\n            7: seq_out = 1'b1;\n        endcase\n    end\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n----------------------------------------\n\n\n# 5. 小结\n\n * 移位寄存器型：直接存储，速度快，占用面积大。\n * 反馈组合型：存储少，可产生长序列，典型应用是 lfsr。\n * 计数器型：灵活，但输出逻辑可能复杂。\n\n> 不同实现方式，就像不同的编曲手法——目标曲子一样，但乐器选择和演奏方式不同。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"19.Verilog HDL有限状态机（FSM）设计基础",frontmatter:{title:"19.Verilog HDL有限状态机（FSM）设计基础",date:"2025-08-13T15:40:00.000Z",permalink:"/pages/Verilog_19/"},regularPath:"/01.Verilog/19.Verilog%20HDL%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%EF%BC%88FSM%EF%BC%89%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html",relativePath:"01.Verilog/19.Verilog HDL有限状态机（FSM）设计基础.md",key:"v-14e5d69d",path:"/pages/Verilog_19/",headers:[{level:2,title:"1. FSM 类型对比",slug:"_1-fsm-类型对比",normalizedTitle:"1. fsm 类型对比",charIndex:27},{level:2,title:"2. 状态编码方式",slug:"_2-状态编码方式",normalizedTitle:"2. 状态编码方式",charIndex:229},{level:2,title:"3. 三段式设计模板",slug:"_3-三段式设计模板",normalizedTitle:"3. 三段式设计模板",charIndex:470},{level:3,title:"Verilog 典型模板示例（Moore机）",slug:"verilog-典型模板示例-moore机",normalizedTitle:"verilog 典型模板示例（moore机）",charIndex:637},{level:2,title:"4. 小结",slug:"_4-小结",normalizedTitle:"4. 小结",charIndex:1641}],headersStr:"1. FSM 类型对比 2. 状态编码方式 3. 三段式设计模板 Verilog 典型模板示例（Moore机） 4. 小结",content:"# 有限状态机（FSM）：数字电路的“大脑”\n\n\n# 1. FSM 类型对比\n\n类型       输出依赖          特点\nMoore机   仅当前状态         输出稳定，无延迟毛刺\nMealy机   当前状态 + 当前输入   响应快，但可能带毛刺（输出跳变）\n\n> Moore机输出只看状态，Mealy机输出对输入敏感，速度快但要注意毛刺问题。\n\n----------------------------------------\n\n\n# 2. 状态编码方式\n\n选择合适的状态编码对面积、速度、设计复杂度影响大：\n\n编码方式   触发器数量     优势\n二进制    log2(N)   占用面积小，资源节约\n独热码    N         速度快，组合逻辑简单\n格雷码    log2(N)   状态切换无毛刺\n\n> 独热码用触发器多，但状态跳变只改变一位，适合高速设计。\n> 格雷码的状态切换避免多位同时跳变，减少毛刺。\n\n----------------------------------------\n\n\n# 3. 三段式设计模板\n\n设计FSM通常分成三步：\n\n 1. 状态寄存器：用时钟更新当前状态。\n 2. 下一状态逻辑：组合逻辑，根据当前状态和输入计算下一状态。\n 3. 输出逻辑：根据当前状态（Moore）或状态+输入（Mealy）产生输出。\n\n----------------------------------------\n\n\n# Verilog 典型模板示例（Moore机）\n\nmodule fsm_example (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire in,\n    output reg  out\n);\n\n    // 状态定义（可用枚举）\n    typedef enum logic [1:0] {\n        S0 = 2'b00,\n        S1 = 2'b01,\n        S2 = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // 1. 状态寄存器更新\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            current_state <= S0;\n        else\n            current_state <= next_state;\n    end\n\n    // 2. 下一状态逻辑\n    always @(*) begin\n        case (current_state)\n            S0: next_state = in ? S1 : S0;\n            S1: next_state = in ? S2 : S0;\n            S2: next_state = S0;\n            default: next_state = S0;\n        endcase\n    end\n\n    // 3. 输出逻辑（Moore机，输出只和状态相关）\n    always @(*) begin\n        out = 1'b0;\n        if (current_state == S2)\n            out = 1'b1;\n    end\n\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 4. 小结\n\n * FSM 是数字电路的核心“大脑”，负责状态管理和控制流程。\n * Moore机输出稳定、设计简单；Mealy机响应快，但要注意毛刺。\n * 状态编码选择直接影响设计效率和性能。\n * 三段式设计模板是业界常用的高效设计模式。\n\n> 设计FSM就像搭积木：状态寄存器是基础，下一状态是桥梁，输出逻辑是点睛。",normalizedContent:"# 有限状态机（fsm）：数字电路的“大脑”\n\n\n# 1. fsm 类型对比\n\n类型       输出依赖          特点\nmoore机   仅当前状态         输出稳定，无延迟毛刺\nmealy机   当前状态 + 当前输入   响应快，但可能带毛刺（输出跳变）\n\n> moore机输出只看状态，mealy机输出对输入敏感，速度快但要注意毛刺问题。\n\n----------------------------------------\n\n\n# 2. 状态编码方式\n\n选择合适的状态编码对面积、速度、设计复杂度影响大：\n\n编码方式   触发器数量     优势\n二进制    log2(n)   占用面积小，资源节约\n独热码    n         速度快，组合逻辑简单\n格雷码    log2(n)   状态切换无毛刺\n\n> 独热码用触发器多，但状态跳变只改变一位，适合高速设计。\n> 格雷码的状态切换避免多位同时跳变，减少毛刺。\n\n----------------------------------------\n\n\n# 3. 三段式设计模板\n\n设计fsm通常分成三步：\n\n 1. 状态寄存器：用时钟更新当前状态。\n 2. 下一状态逻辑：组合逻辑，根据当前状态和输入计算下一状态。\n 3. 输出逻辑：根据当前状态（moore）或状态+输入（mealy）产生输出。\n\n----------------------------------------\n\n\n# verilog 典型模板示例（moore机）\n\nmodule fsm_example (\n    input  wire clk,\n    input  wire rst_n,\n    input  wire in,\n    output reg  out\n);\n\n    // 状态定义（可用枚举）\n    typedef enum logic [1:0] {\n        s0 = 2'b00,\n        s1 = 2'b01,\n        s2 = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // 1. 状态寄存器更新\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n)\n            current_state <= s0;\n        else\n            current_state <= next_state;\n    end\n\n    // 2. 下一状态逻辑\n    always @(*) begin\n        case (current_state)\n            s0: next_state = in ? s1 : s0;\n            s1: next_state = in ? s2 : s0;\n            s2: next_state = s0;\n            default: next_state = s0;\n        endcase\n    end\n\n    // 3. 输出逻辑（moore机，输出只和状态相关）\n    always @(*) begin\n        out = 1'b0;\n        if (current_state == s2)\n            out = 1'b1;\n    end\n\nendmodule\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 4. 小结\n\n * fsm 是数字电路的核心“大脑”，负责状态管理和控制流程。\n * moore机输出稳定、设计简单；mealy机响应快，但要注意毛刺。\n * 状态编码选择直接影响设计效率和性能。\n * 三段式设计模板是业界常用的高效设计模式。\n\n> 设计fsm就像搭积木：状态寄存器是基础，下一状态是桥梁，输出逻辑是点睛。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"00.Rust的基本素养",frontmatter:{title:"00.Rust的基本素养",date:"2025-08-17T22:00:00.000Z",permalink:"/pages/Rust_00/"},regularPath:"/02.Rust/00.Rust%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB.html",relativePath:"02.Rust/00.Rust的基本素养.md",key:"v-515c41e0",path:"/pages/Rust_00/",headers:[{level:2,title:"一. 为什么选择 Rust？",slug:"一-为什么选择-rust",normalizedTitle:"一. 为什么选择 rust？",charIndex:22},{level:2,title:"二. 安装与环境准备",slug:"二-安装与环境准备",normalizedTitle:"二. 安装与环境准备",charIndex:322},{level:2,title:"三. Hello, World!",slug:"三-hello-world",normalizedTitle:"三. hello, world!",charIndex:525},{level:2,title:"四. Cargo：Rust 工程的核心",slug:"四-cargo-rust-工程的核心",normalizedTitle:"四. cargo：rust 工程的核心",charIndex:779}],headersStr:"一. 为什么选择 Rust？ 二. 安装与环境准备 三. Hello, World! 四. Cargo：Rust 工程的核心",content:"# Rust：现代系统编程的新基石\n\n\n# 一. 为什么选择 Rust？\n\nRust 是一门兼顾 性能 与 安全性 的系统级语言：\n\n语言       优势                   劣势\nC/C++    性能强大，生态成熟            内存安全问题多\nPython   开发效率高，生态丰富           性能受限，不适合底层开发\nRust     内存安全 + 高性能 + 无需 GC   上手曲线稍陡，生态在成长\n\n> Rust 之于 2025 年的嵌入式开发，就像 20 年前 C 之于单片机：新的起点，新的机会。\n\n----------------------------------------\n\n\n# 二. 安装与环境准备\n\n推荐使用 Rustup，一键安装管理工具链。\n\n安装完成后，常用命令有：\n\nrustc --version   # 查看编译器版本\ncargo --version   # 查看包管理器版本\n\n\n1\n2\n\n\nCargo 是 Rust 的“瑞士军刀”，负责 构建 / 依赖管理 / 打包发布。\n\n----------------------------------------\n\n\n# 三. Hello, World!\n\n创建新项目：\n\ncargo new hello-rust\ncd hello-rust\n\n\n1\n2\n\n\n目录结构：\n\nhello-rust\n ├── Cargo.toml    # 项目配置文件\n └── src\n     └── main.rs   # 主程序入口\n\n\n1\n2\n3\n4\n\n\n运行：\n\ncargo run\n\n\n1\n\n\n输出：\n\nHello, world!\n\n\n1\n\n\n----------------------------------------\n\n\n# 四. Cargo：Rust 工程的核心\n\n常用命令一览：\n\n命令                 功能\ncargo build        构建项目（生成可执行文件）\ncargo run          构建并运行项目\ncargo check        检查语法错误，速度更快\ncargo update       更新依赖版本\ncargo doc --open   生成文档并在浏览器打开",normalizedContent:"# rust：现代系统编程的新基石\n\n\n# 一. 为什么选择 rust？\n\nrust 是一门兼顾 性能 与 安全性 的系统级语言：\n\n语言       优势                   劣势\nc/c++    性能强大，生态成熟            内存安全问题多\npython   开发效率高，生态丰富           性能受限，不适合底层开发\nrust     内存安全 + 高性能 + 无需 gc   上手曲线稍陡，生态在成长\n\n> rust 之于 2025 年的嵌入式开发，就像 20 年前 c 之于单片机：新的起点，新的机会。\n\n----------------------------------------\n\n\n# 二. 安装与环境准备\n\n推荐使用 rustup，一键安装管理工具链。\n\n安装完成后，常用命令有：\n\nrustc --version   # 查看编译器版本\ncargo --version   # 查看包管理器版本\n\n\n1\n2\n\n\ncargo 是 rust 的“瑞士军刀”，负责 构建 / 依赖管理 / 打包发布。\n\n----------------------------------------\n\n\n# 三. hello, world!\n\n创建新项目：\n\ncargo new hello-rust\ncd hello-rust\n\n\n1\n2\n\n\n目录结构：\n\nhello-rust\n ├── cargo.toml    # 项目配置文件\n └── src\n     └── main.rs   # 主程序入口\n\n\n1\n2\n3\n4\n\n\n运行：\n\ncargo run\n\n\n1\n\n\n输出：\n\nhello, world!\n\n\n1\n\n\n----------------------------------------\n\n\n# 四. cargo：rust 工程的核心\n\n常用命令一览：\n\n命令                 功能\ncargo build        构建项目（生成可执行文件）\ncargo run          构建并运行项目\ncargo check        检查语法错误，速度更快\ncargo update       更新依赖版本\ncargo doc --open   生成文档并在浏览器打开",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"01.Rust的变量与可变性",frontmatter:{title:"01.Rust的变量与可变性",date:"2025-08-18T10:55:00.000Z",permalink:"/pages/Rust_01/"},regularPath:"/02.Rust/01.Rust%E7%9A%84%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7.html",relativePath:"02.Rust/01.Rust的变量与可变性.md",key:"v-5317f8e4",path:"/pages/Rust_01/",headers:[{level:2,title:"一. 为什么变量默认不可变？",slug:"一-为什么变量默认不可变",normalizedTitle:"一. 为什么变量默认不可变？",charIndex:146},{level:2,title:"二. 常量：永远静止的一块值",slug:"二-常量-永远静止的一块值",normalizedTitle:"二. 常量：永远静止的一块值",charIndex:616},{level:2,title:"三. 遮蔽（Shadowing）：使用同名变量“换壳”而不动原变量",slug:"三-遮蔽-shadowing-使用同名变量-换壳-而不动原变量",normalizedTitle:"三. 遮蔽（shadowing）：使用同名变量“换壳”而不动原变量",charIndex:787}],headersStr:"一. 为什么变量默认不可变？ 二. 常量：永远静止的一块值 三. 遮蔽（Shadowing）：使用同名变量“换壳”而不动原变量",content:'# Rust 的变量与可变性：设计安全的第一步\n\nRust 与传统语言不同，它默认把所有变量锁住——不许轻易变。这种默认不可变设计帮你挡下 Pointer Bug 和数据竞争，是现代系统语言的本分。\n\n----------------------------------------\n\n\n# 一. 为什么变量默认不可变？\n\n设计选择    优势                说明\n默认不可变   消灭意外修改，代码更安全可推导   Rust 编译器帮你保障“一旦设定，不会悄悄改变”\n                          :contentReference[oaicite:0]{index=0}\n显示可变    写意且受控，修改行为更加明确    必须写 mut，才能修改变量 :contentReference[oaicite:1]{index=1}\n\n比如：\n\nlet x = 1;\nprintln!("x 是 {}", x);\nx = 2; // 编译报错：cannot assign twice to immutable variable `x`\n\n\n1\n2\n3\n\n\n这是因为 x 默认不可变。改用：\n\nlet mut x = 5;\nprintln!("x 是 {}", x);\nx = 6; // OK，编译器允许\n\n\n1\n2\n3\n\n\n把==“可变性”==明确标注出来，方便自己也方便团队理解。\n\n\n# 二. 常量：永远静止的一块值\n\n常量 (const) 与变量类似，但从来不可变，而且必须显式写类型，初始化值也只能是编译期已知的常量表达式：\n\nconst Pi: u32 = 3.1415926;\n\n\n1\n\n * 永久不变，且不可加 mut。\n * 类型必标注，编译时代入计算结果。\n * 在任何作用域都有效，适合定义全局不变参数。\n\n\n# 三. 遮蔽（Shadowing）：使用同名变量“换壳”而不动原变量\n\nRust 允许使用 let 重复定义变量名称，旧的就被“遮蔽”了。这与可变或常量不同，是创造新变量：\n\nlet x = 5;\nlet x = x + 1;         // x 变成 6\n{\n    let x = x * 2;     // 内部作用域里 x 是 12\n    println!("内层 x = {x}");\n}\nprintln!("外层 x = {x}"); // x 回退为 6\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n遮蔽的好处：\n\n * 不用 mut，还能变值；\n * 支持改变类型，如把字符串变成数值，复用变量名更干净。',normalizedContent:'# rust 的变量与可变性：设计安全的第一步\n\nrust 与传统语言不同，它默认把所有变量锁住——不许轻易变。这种默认不可变设计帮你挡下 pointer bug 和数据竞争，是现代系统语言的本分。\n\n----------------------------------------\n\n\n# 一. 为什么变量默认不可变？\n\n设计选择    优势                说明\n默认不可变   消灭意外修改，代码更安全可推导   rust 编译器帮你保障“一旦设定，不会悄悄改变”\n                          :contentreference[oaicite:0]{index=0}\n显示可变    写意且受控，修改行为更加明确    必须写 mut，才能修改变量 :contentreference[oaicite:1]{index=1}\n\n比如：\n\nlet x = 1;\nprintln!("x 是 {}", x);\nx = 2; // 编译报错：cannot assign twice to immutable variable `x`\n\n\n1\n2\n3\n\n\n这是因为 x 默认不可变。改用：\n\nlet mut x = 5;\nprintln!("x 是 {}", x);\nx = 6; // ok，编译器允许\n\n\n1\n2\n3\n\n\n把==“可变性”==明确标注出来，方便自己也方便团队理解。\n\n\n# 二. 常量：永远静止的一块值\n\n常量 (const) 与变量类似，但从来不可变，而且必须显式写类型，初始化值也只能是编译期已知的常量表达式：\n\nconst pi: u32 = 3.1415926;\n\n\n1\n\n * 永久不变，且不可加 mut。\n * 类型必标注，编译时代入计算结果。\n * 在任何作用域都有效，适合定义全局不变参数。\n\n\n# 三. 遮蔽（shadowing）：使用同名变量“换壳”而不动原变量\n\nrust 允许使用 let 重复定义变量名称，旧的就被“遮蔽”了。这与可变或常量不同，是创造新变量：\n\nlet x = 5;\nlet x = x + 1;         // x 变成 6\n{\n    let x = x * 2;     // 内部作用域里 x 是 12\n    println!("内层 x = {x}");\n}\nprintln!("外层 x = {x}"); // x 回退为 6\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n遮蔽的好处：\n\n * 不用 mut，还能变值；\n * 支持改变类型，如把字符串变成数值，复用变量名更干净。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"02.Rust的数据类型",frontmatter:{title:"02.Rust的数据类型",date:"2025-08-18T11:12:00.000Z",permalink:"/pages/Rust_02/"},regularPath:"/02.Rust/02.Rust%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",relativePath:"02.Rust/02.Rust的数据类型.md",key:"v-77764576",path:"/pages/Rust_02/",headers:[{level:2,title:"一. 静态类型与类型推断",slug:"一-静态类型与类型推断",normalizedTitle:"一. 静态类型与类型推断",charIndex:149},{level:2,title:"二. 标量类型（Scalar Types）",slug:"二-标量类型-scalar-types",normalizedTitle:"二. 标量类型（scalar types）",charIndex:327},{level:3,title:"1.整型（Integer）",slug:"_1-整型-integer",normalizedTitle:"1.整型（integer）",charIndex:377},{level:3,title:"2.浮点型（Floating-Point）",slug:"_2-浮点型-floating-point",normalizedTitle:"2.浮点型（floating-point）",charIndex:854},{level:3,title:"3.布尔型（Boolean）",slug:"_3-布尔型-boolean",normalizedTitle:"3.布尔型（boolean）",charIndex:1005},{level:3,title:"4.字符型（Character）",slug:"_4-字符型-character",normalizedTitle:"4.字符型（character）",charIndex:1128},{level:3,title:"5.数值运算（Computing）",slug:"_5-数值运算-computing",normalizedTitle:"5.数值运算（computing）",charIndex:1423},{level:2,title:"三、复合类型（Compound Types）",slug:"三、复合类型-compound-types",normalizedTitle:"三、复合类型（compound types）",charIndex:1725},{level:3,title:"2. 数组（Array）",slug:"_2-数组-array",normalizedTitle:"2. 数组（array）",charIndex:2610}],headersStr:"一. 静态类型与类型推断 二. 标量类型（Scalar Types） 1.整型（Integer） 2.浮点型（Floating-Point） 3.布尔型（Boolean） 4.字符型（Character） 5.数值运算（Computing） 三、复合类型（Compound Types） 2. 数组（Array）",content:"# Rust 的数据类型：给每个值找个“身份”\n\n在 Rust 中，每一个值都带着标签——类型（data type），告诉编译器怎么处理它。\n\n这就是 Rust 的静态类型特性，让错误在编译期被挡在门外。\n\n----------------------------------------\n\n\n# 一. 静态类型与类型推断\n\nRust 是静态类型语言，意味着所有变量的类型必须在 编译时知道。但你通常不用写在代码里，Rust 编译器会自动推断出来：\n\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n\n\n1\n\n\n如果不写 : u32，编译器会报错说无法推断类型，需要你给个明示才行。\n\n\n# 二. 标量类型（Scalar Types）\n\n标量类型代表单一数值或字符。\n\n主要有四类：\n\n\n# 1.整型（Integer）\n\nRust 支持多种整型，每种定大小、有符号或无符号，含 i8, u8, …, i128, u128, 还有根据平台决定大小的 isize / usize。\n\n长度              有符号     无符号\n8-bit           i8      u8\n16-bit          i16     u16\n32-bit          i32     u32\n64-bit          i64     u64\n128-bit         i128    u128\n架构相关(x86/x64)   isize   usize\n\n各种字面值的示例：\n\n数字字面值                 例子\nDecimal (十进制)         54_188\nHex (十六进制)            0xff\nOctal (八进制)           0o77\nBinary (二进制)          0b1010_0101\nByte (单字节字符)(仅限于u8)   b'A'\n\n\n# 2.浮点型（Floating-Point）\n\nRust 有 f32 和 f64，默认的是 f64，因为现代 CPU 上运算速度差不离，但精度更高。\n\nlet x = 2.0;          // f64\nlet y: f32 = 3.0;     // f32，必须显式标注\n\n\n1\n2\n\n\n\n# 3.布尔型（Boolean）\n\n只有两个值：true / false，类型是 bool，占一个字节，与其他语言一样，用于控制流中的==条件表达式==。\n\nlet t = true;\nlet f: bool = false;\n\n\n1\n2\n\n\n\n# 4.字符型（Character）\n\nRust的字符型是非常^6^的，因为它使用的是Unicode编码，类型的大小为四个字节 (four bytes)，而不是传统的阿斯克码，所以，它可以表示任何字符，任何语言的字符！\n\n我们用单引号声明 char 字面值，而与之相反的是，使用双引号声明字符串字面值。\n\n// 以下字符型变量全是合法的, 只有你想不到，没有我R*哥表示不到😉\nlet c = 'c';\nlet z: char = 'ℤ'; \nlet wink = '😉';\n\n\n1\n2\n3\n4\n\n\n----------------------------------------\n\n\n# 5.数值运算（Computing）\n\nRust的所有类型数据都支持运算，整数的运算一般会有取舍。\n\nlet sum = 5 + 10;\t// 加法\nlet difference = 95.5 - 4.3;\t// 减法 \nlet product = 4 * 30;\t// 乘法\nlet quotient = 56.7 / 32.2;\t// 正常除法\nlet truncated = -5 / 3; // 整除，结果为 -1\nlet remainder = 43 % 5;\t// 取余\n\n\n1\n2\n3\n4\n5\n6\n\n\n----------------------------------------\n\n\n# 三、复合类型（Compound Types）\n\nRust 有两个原生的复合类型：元组（tuple）和数组（array）。\n\n * 元组（Tuple）：类型可以不同，长度固定，用 (a, b) 定义，访问靠 .0, .1。\n * 数组（Array）：类型相同，长度固定，用 [T; N] 定义，访问靠索引。\n\n它们是构建更复杂结构的基础，适合包裹多个相关值。\n\n# 1. 元组（Tuple）\n\n定义：元组把多种类型的若干值打包成一个整体，长度固定、元素可异构（各元素类型可不同）。\n\n# 创建与类型标注\n\nlet tup: (i32, f64, u8) = (500, 6.4, 1);\nlet mixed = (\"ok\", 3.14, true);\nlet single = (42,);     // 单元素元组：注意结尾的逗号\nlet not_tuple = (42);   // 这只是 42 本身，不是元组\n\n\n1\n2\n3\n4\n\n\n> 要点：单元素元组必须带逗号 (42,)，否则就是普通值。\n\n# 解构（Destructuring）\n\nlet (x, y, z) = tup;  // 模式匹配式解构\nprintln!(\"{x}, {y}, {z}\");\n\n\n1\n2\n\n * 解构会“按位”绑定新变量，仍然整体所有权转移（或拷贝，取决于元素是否 Copy）。\n\n# 索引访问\n\nlet a = tup.0;  // 500\nlet b = tup.1;  // 6.4\n\n\n1\n2\n\n * 编译期检查索引是否在范围内（超界直接编译失败）。\n\n# 单位类型（Unit Type）()\n\n * () 是一个特殊的 0 长度元组，读作 unit。\n\n * 含义：“没有有意义的值”，常见于函数不返回值的情况（返回 ()），或语句表达式的值。\n   \n   let x = ();        // x 的类型是 ()\n   fn log() { }       // 等价 fn log() -> () { }\n   \n   \n   1\n   2\n   \n\n\n# 2. 数组（Array）\n\n定义：数组是同类型元素、长度固定、在栈上连续存储的序列，类型写作 [T; N]。\n\n> 要点：长度 N 是类型的一部分——[u8; 3] 与 [u8; 4] 是不同的类型。\n\n# 创建与类型标注\n\nlet a = [1, 2, 3, 4, 5];               // 推断为 [i32; 5]\nlet b: [i32; 3] = [10, 20, 30];        // 显式类型\nlet c = [0; 8];                         // 重复语法：等价 [0,0,0,0,0,0,0,0]\nlet empty: [u8; 0] = [];                // 零长数组也合法\n\n\n1\n2\n3\n4\n\n\n# 索引与边界检查\n\nlet first = a[0];\nlet last  = a[a.len() - 1];\n\n// 越界会在**运行时 panic**\n// let x = a[999]; // 运行时触发 “index out of bounds”\n\n\n1\n2\n3\n4\n5\n\n * Rust 对数组索引运行时检查，避免越界 UB（未定义行为）。",normalizedContent:"# rust 的数据类型：给每个值找个“身份”\n\n在 rust 中，每一个值都带着标签——类型（data type），告诉编译器怎么处理它。\n\n这就是 rust 的静态类型特性，让错误在编译期被挡在门外。\n\n----------------------------------------\n\n\n# 一. 静态类型与类型推断\n\nrust 是静态类型语言，意味着所有变量的类型必须在 编译时知道。但你通常不用写在代码里，rust 编译器会自动推断出来：\n\nlet guess: u32 = \"42\".parse().expect(\"not a number!\");\n\n\n1\n\n\n如果不写 : u32，编译器会报错说无法推断类型，需要你给个明示才行。\n\n\n# 二. 标量类型（scalar types）\n\n标量类型代表单一数值或字符。\n\n主要有四类：\n\n\n# 1.整型（integer）\n\nrust 支持多种整型，每种定大小、有符号或无符号，含 i8, u8, …, i128, u128, 还有根据平台决定大小的 isize / usize。\n\n长度              有符号     无符号\n8-bit           i8      u8\n16-bit          i16     u16\n32-bit          i32     u32\n64-bit          i64     u64\n128-bit         i128    u128\n架构相关(x86/x64)   isize   usize\n\n各种字面值的示例：\n\n数字字面值                 例子\ndecimal (十进制)         54_188\nhex (十六进制)            0xff\noctal (八进制)           0o77\nbinary (二进制)          0b1010_0101\nbyte (单字节字符)(仅限于u8)   b'a'\n\n\n# 2.浮点型（floating-point）\n\nrust 有 f32 和 f64，默认的是 f64，因为现代 cpu 上运算速度差不离，但精度更高。\n\nlet x = 2.0;          // f64\nlet y: f32 = 3.0;     // f32，必须显式标注\n\n\n1\n2\n\n\n\n# 3.布尔型（boolean）\n\n只有两个值：true / false，类型是 bool，占一个字节，与其他语言一样，用于控制流中的==条件表达式==。\n\nlet t = true;\nlet f: bool = false;\n\n\n1\n2\n\n\n\n# 4.字符型（character）\n\nrust的字符型是非常^6^的，因为它使用的是unicode编码，类型的大小为四个字节 (four bytes)，而不是传统的阿斯克码，所以，它可以表示任何字符，任何语言的字符！\n\n我们用单引号声明 char 字面值，而与之相反的是，使用双引号声明字符串字面值。\n\n// 以下字符型变量全是合法的, 只有你想不到，没有我r*哥表示不到😉\nlet c = 'c';\nlet z: char = 'ℤ'; \nlet wink = '😉';\n\n\n1\n2\n3\n4\n\n\n----------------------------------------\n\n\n# 5.数值运算（computing）\n\nrust的所有类型数据都支持运算，整数的运算一般会有取舍。\n\nlet sum = 5 + 10;\t// 加法\nlet difference = 95.5 - 4.3;\t// 减法 \nlet product = 4 * 30;\t// 乘法\nlet quotient = 56.7 / 32.2;\t// 正常除法\nlet truncated = -5 / 3; // 整除，结果为 -1\nlet remainder = 43 % 5;\t// 取余\n\n\n1\n2\n3\n4\n5\n6\n\n\n----------------------------------------\n\n\n# 三、复合类型（compound types）\n\nrust 有两个原生的复合类型：元组（tuple）和数组（array）。\n\n * 元组（tuple）：类型可以不同，长度固定，用 (a, b) 定义，访问靠 .0, .1。\n * 数组（array）：类型相同，长度固定，用 [t; n] 定义，访问靠索引。\n\n它们是构建更复杂结构的基础，适合包裹多个相关值。\n\n# 1. 元组（tuple）\n\n定义：元组把多种类型的若干值打包成一个整体，长度固定、元素可异构（各元素类型可不同）。\n\n# 创建与类型标注\n\nlet tup: (i32, f64, u8) = (500, 6.4, 1);\nlet mixed = (\"ok\", 3.14, true);\nlet single = (42,);     // 单元素元组：注意结尾的逗号\nlet not_tuple = (42);   // 这只是 42 本身，不是元组\n\n\n1\n2\n3\n4\n\n\n> 要点：单元素元组必须带逗号 (42,)，否则就是普通值。\n\n# 解构（destructuring）\n\nlet (x, y, z) = tup;  // 模式匹配式解构\nprintln!(\"{x}, {y}, {z}\");\n\n\n1\n2\n\n * 解构会“按位”绑定新变量，仍然整体所有权转移（或拷贝，取决于元素是否 copy）。\n\n# 索引访问\n\nlet a = tup.0;  // 500\nlet b = tup.1;  // 6.4\n\n\n1\n2\n\n * 编译期检查索引是否在范围内（超界直接编译失败）。\n\n# 单位类型（unit type）()\n\n * () 是一个特殊的 0 长度元组，读作 unit。\n\n * 含义：“没有有意义的值”，常见于函数不返回值的情况（返回 ()），或语句表达式的值。\n   \n   let x = ();        // x 的类型是 ()\n   fn log() { }       // 等价 fn log() -> () { }\n   \n   \n   1\n   2\n   \n\n\n# 2. 数组（array）\n\n定义：数组是同类型元素、长度固定、在栈上连续存储的序列，类型写作 [t; n]。\n\n> 要点：长度 n 是类型的一部分——[u8; 3] 与 [u8; 4] 是不同的类型。\n\n# 创建与类型标注\n\nlet a = [1, 2, 3, 4, 5];               // 推断为 [i32; 5]\nlet b: [i32; 3] = [10, 20, 30];        // 显式类型\nlet c = [0; 8];                         // 重复语法：等价 [0,0,0,0,0,0,0,0]\nlet empty: [u8; 0] = [];                // 零长数组也合法\n\n\n1\n2\n3\n4\n\n\n# 索引与边界检查\n\nlet first = a[0];\nlet last  = a[a.len() - 1];\n\n// 越界会在**运行时 panic**\n// let x = a[999]; // 运行时触发 “index out of bounds”\n\n\n1\n2\n3\n4\n5\n\n * rust 对数组索引运行时检查，避免越界 ub（未定义行为）。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"04.Rust的控制流",frontmatter:{title:"04.Rust的控制流",date:"2025-08-19T11:00:00.000Z",permalink:"/pages/Rust_04/"},regularPath:"/02.Rust/04.Rust%E7%9A%84%E6%8E%A7%E5%88%B6%E6%B5%81.html",relativePath:"02.Rust/04.Rust的控制流.md",key:"v-55094428",path:"/pages/Rust_04/",headers:[{level:2,title:"一、if 表达式",slug:"一、if-表达式",normalizedTitle:"一、if 表达式",charIndex:115},{level:2,title:"二、loop 循环",slug:"二、loop-循环",normalizedTitle:"二、loop 循环",charIndex:442},{level:2,title:"三、while 循环",slug:"三、while-循环",normalizedTitle:"三、while 循环",charIndex:872},{level:2,title:"四、for 循环",slug:"四、for-循环",normalizedTitle:"四、for 循环",charIndex:1112}],headersStr:"一、if 表达式 二、loop 循环 三、while 循环 四、for 循环",content:'# Rust 的控制流\n\n控制流指的是程序根据条件和循环来决定执行路径。Rust 提供了清晰的条件分支和循环语句，让代码逻辑更容易表达。\n\n----------------------------------------\n\n\n# 一、if 表达式\n\nfn main() {\n    let n = 7;\n\n    if n < 5 {\n        println!("小于5");\n    } else if n == 5 {\n        println!("等于5");\n    } else {\n        println!("大于5");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * if 后跟布尔表达式。\n * 分支可以有多个，用 else if。\n * else 是可选的。\n\n在 Rust 中，if 是一个 表达式，所以可以直接赋值：\n\nlet x = if n > 0 { 1 } else { -1 };\n\n\n1\n\n\n\n# 二、loop 循环\n\nfn main() {\n    let mut count = 0;\n\n    loop {\n        count += 1;\n        if count == 3 {\n            println!("跳出循环");\n            break;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * loop 会无限执行，除非遇到 break。\n * 使用 continue 可以跳过当前这次循环，直接进入下一轮。\n\n循环还可以返回值：\n\nlet result = loop {\n    count += 1;\n    if count == 10 {\n        break count * 2; // 返回 20\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n----------------------------------------\n\n\n# 三、while 循环\n\nfn main() {\n    let mut n = 3;\n\n    while n > 0 {\n        println!("{n}");\n        n -= 1;\n    }\n    println!("起飞！");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * while 在每轮循环前检查条件。\n * 条件为 false 时循环终止。\n\n----------------------------------------\n\n\n# 四、for 循环\n\nfn main() {\n    let arr = [10, 20, 30];\n\n    for val in arr {\n        println!("值: {val}");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * for 能遍历数组、切片或迭代器。\n * 更常见的写法是使用区间：\n\nfor i in 1..=5 {\n    println!("{i}");\n}\n\n\n1\n2\n3\n\n\n这里 1..=5 表示从 1 到 5（包含 5）。如果写作 1..5，则不包含 5。',normalizedContent:'# rust 的控制流\n\n控制流指的是程序根据条件和循环来决定执行路径。rust 提供了清晰的条件分支和循环语句，让代码逻辑更容易表达。\n\n----------------------------------------\n\n\n# 一、if 表达式\n\nfn main() {\n    let n = 7;\n\n    if n < 5 {\n        println!("小于5");\n    } else if n == 5 {\n        println!("等于5");\n    } else {\n        println!("大于5");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * if 后跟布尔表达式。\n * 分支可以有多个，用 else if。\n * else 是可选的。\n\n在 rust 中，if 是一个 表达式，所以可以直接赋值：\n\nlet x = if n > 0 { 1 } else { -1 };\n\n\n1\n\n\n\n# 二、loop 循环\n\nfn main() {\n    let mut count = 0;\n\n    loop {\n        count += 1;\n        if count == 3 {\n            println!("跳出循环");\n            break;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * loop 会无限执行，除非遇到 break。\n * 使用 continue 可以跳过当前这次循环，直接进入下一轮。\n\n循环还可以返回值：\n\nlet result = loop {\n    count += 1;\n    if count == 10 {\n        break count * 2; // 返回 20\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n----------------------------------------\n\n\n# 三、while 循环\n\nfn main() {\n    let mut n = 3;\n\n    while n > 0 {\n        println!("{n}");\n        n -= 1;\n    }\n    println!("起飞！");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * while 在每轮循环前检查条件。\n * 条件为 false 时循环终止。\n\n----------------------------------------\n\n\n# 四、for 循环\n\nfn main() {\n    let arr = [10, 20, 30];\n\n    for val in arr {\n        println!("值: {val}");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * for 能遍历数组、切片或迭代器。\n * 更常见的写法是使用区间：\n\nfor i in 1..=5 {\n    println!("{i}");\n}\n\n\n1\n2\n3\n\n\n这里 1..=5 表示从 1 到 5（包含 5）。如果写作 1..5，则不包含 5。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"05.Rust的所有权概念",frontmatter:{title:"05.Rust的所有权概念",date:"2025-08-19T12:00:00.000Z",permalink:"/pages/Rust_05/"},regularPath:"/02.Rust/05.Rust%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83%E6%A6%82%E5%BF%B5.html",relativePath:"02.Rust/05.Rust的所有权概念.md",key:"v-6491116a",path:"/pages/Rust_05/",headers:[{level:2,title:"一、栈与堆的区别",slug:"一、栈与堆的区别",normalizedTitle:"一、栈与堆的区别",charIndex:148},{level:2,title:"二、所有权三原则",slug:"二、所有权三原则",normalizedTitle:"二、所有权三原则",charIndex:723},{level:2,title:"三、作用域与资源自动释放",slug:"三、作用域与资源自动释放",normalizedTitle:"三、作用域与资源自动释放",charIndex:889},{level:2,title:"四、String类型",slug:"四、string类型",normalizedTitle:"四、string类型",charIndex:1091}],headersStr:"一、栈与堆的区别 二、所有权三原则 三、作用域与资源自动释放 四、String类型",content:'# Rust 的所有权概念\n\nRust 使用“所有权”来管理内存，而不是依赖垃圾回收。这套规则由编译器在编译阶段严格检查，并不会影响运行时性能。正确掌握所有权，是掌握 Rust 安全性与效率关键的一步。\n\n----------------------------------------\n\n\n# 一、栈与堆的区别\n\n要理解所有权机制，需要先理解 栈（stack）和堆（heap） 的内存管理方式。\n\n * 栈（Stack）\n   * 特点：存取速度快，后进先出（LIFO）。\n   * 存放：已知大小、固定长度的数据，例如整型、浮点型、布尔值等。\n   * 生命周期：作用域结束自动弹出，无需手动管理。\n * 堆（Heap）\n   * 特点：存取灵活，但分配和回收开销更大。\n   * 存放：大小未知或运行期才确定的数据，例如 String、Vec。\n   * 生命周期：必须由某个变量持有指针，当所有者离开作用域时，由 Rust 自动释放。\n\n对比示例：\n\nlet x = 10;                  // 存在栈上\nlet s = String::from("hi");  // s 本身在栈上，但它指向堆中的字符串数据\n\n\n1\n2\n\n\n这里的关键点：\n\n * x 是整数，直接放在栈上，访问快，作用域结束就弹出。\n * s 是一个三部分组成的结构（指针、长度、容量），它在栈上，但实际的 "hi" 字符串内容在堆上，释放时 Rust 会自动清理堆内存。\n\n因此，所有权规则的设计，本质上是为了安全管理堆数据，防止重复释放或悬空指针。\n\n----------------------------------------\n\n\n# 二、所有权三原则\n\nRust 的所有权机制围绕三条核心规则：\n\n 1. 每一个值都有一个“==所有者==”(owner)。\n 2. 在同一时间，值只有一个所有者。\n 3. 当所有者离开作用域，值会被丢弃或者说==自动释放==（drop）。\n\n----------------------------------------\n\n\n# 三、作用域与资源自动释放\n\n作用域决定变量何时“消失”，从而决定资源何时释放，例如：\n\n{\n    let s = "hello";\n    // s 在此作用域内有效\n}\n// 出了作用域，s 被 drop，内存自动释放\n\n\n1\n2\n3\n4\n5\n\n\n这一行为像是给变量包了自动回收机制，无需显式调用释放函数。\n\n----------------------------------------\n\n\n# 四、String类型\n\n我们可以通过如下的代码创建一个String。\n\nlet mut s = String::from("hello, world!");\n\n\n1\n\n\n通常情况下，计算机不允许一个在运行之前不知道值或者在运行之后值会改变的变量被放到二进制文件之中，所以，我们使用==String==类型。\n\n对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：\n\n * 必须在运行时向内存分配器（memory allocator）请求内存。\n * 需要一个当我们处理完 String 时将内存返回给分配器的方法。\n\n前一个部分由程序员自己完成，而后面一个部分，Rust会自己动，就比如：\n\n{\n\tlet s = String::from("hello");\n\t// 这里s有效    \n}\n// 这里s就失效了，因为作用域已经结束\n\n\n1\n2\n3\n4\n5\n',normalizedContent:'# rust 的所有权概念\n\nrust 使用“所有权”来管理内存，而不是依赖垃圾回收。这套规则由编译器在编译阶段严格检查，并不会影响运行时性能。正确掌握所有权，是掌握 rust 安全性与效率关键的一步。\n\n----------------------------------------\n\n\n# 一、栈与堆的区别\n\n要理解所有权机制，需要先理解 栈（stack）和堆（heap） 的内存管理方式。\n\n * 栈（stack）\n   * 特点：存取速度快，后进先出（lifo）。\n   * 存放：已知大小、固定长度的数据，例如整型、浮点型、布尔值等。\n   * 生命周期：作用域结束自动弹出，无需手动管理。\n * 堆（heap）\n   * 特点：存取灵活，但分配和回收开销更大。\n   * 存放：大小未知或运行期才确定的数据，例如 string、vec。\n   * 生命周期：必须由某个变量持有指针，当所有者离开作用域时，由 rust 自动释放。\n\n对比示例：\n\nlet x = 10;                  // 存在栈上\nlet s = string::from("hi");  // s 本身在栈上，但它指向堆中的字符串数据\n\n\n1\n2\n\n\n这里的关键点：\n\n * x 是整数，直接放在栈上，访问快，作用域结束就弹出。\n * s 是一个三部分组成的结构（指针、长度、容量），它在栈上，但实际的 "hi" 字符串内容在堆上，释放时 rust 会自动清理堆内存。\n\n因此，所有权规则的设计，本质上是为了安全管理堆数据，防止重复释放或悬空指针。\n\n----------------------------------------\n\n\n# 二、所有权三原则\n\nrust 的所有权机制围绕三条核心规则：\n\n 1. 每一个值都有一个“==所有者==”(owner)。\n 2. 在同一时间，值只有一个所有者。\n 3. 当所有者离开作用域，值会被丢弃或者说==自动释放==（drop）。\n\n----------------------------------------\n\n\n# 三、作用域与资源自动释放\n\n作用域决定变量何时“消失”，从而决定资源何时释放，例如：\n\n{\n    let s = "hello";\n    // s 在此作用域内有效\n}\n// 出了作用域，s 被 drop，内存自动释放\n\n\n1\n2\n3\n4\n5\n\n\n这一行为像是给变量包了自动回收机制，无需显式调用释放函数。\n\n----------------------------------------\n\n\n# 四、string类型\n\n我们可以通过如下的代码创建一个string。\n\nlet mut s = string::from("hello, world!");\n\n\n1\n\n\n通常情况下，计算机不允许一个在运行之前不知道值或者在运行之后值会改变的变量被放到二进制文件之中，所以，我们使用==string==类型。\n\n对于 string 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：\n\n * 必须在运行时向内存分配器（memory allocator）请求内存。\n * 需要一个当我们处理完 string 时将内存返回给分配器的方法。\n\n前一个部分由程序员自己完成，而后面一个部分，rust会自己动，就比如：\n\n{\n\tlet s = string::from("hello");\n\t// 这里s有效    \n}\n// 这里s就失效了，因为作用域已经结束\n\n\n1\n2\n3\n4\n5\n',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"03.Rust的函数与注释",frontmatter:{title:"03.Rust的函数与注释",date:"2025-08-19T10:00:00.000Z",permalink:"/pages/Rust_03/"},regularPath:"/02.Rust/03.Rust%E7%9A%84%E5%87%BD%E6%95%B0%E5%92%8C%E6%B3%A8%E9%87%8A.html",relativePath:"02.Rust/03.Rust的函数和注释.md",key:"v-1c601009",path:"/pages/Rust_03/",headers:[{level:2,title:"一、函数的基本结构",slug:"一、函数的基本结构",normalizedTitle:"一、函数的基本结构",charIndex:116},{level:2,title:"二、参数与返回值",slug:"二、参数与返回值",normalizedTitle:"二、参数与返回值",charIndex:311},{level:2,title:"三、分号与返回值",slug:"三、分号与返回值",normalizedTitle:"三、分号与返回值",charIndex:614},{level:2,title:"四、注释的写法",slug:"四、注释的写法",normalizedTitle:"四、注释的写法",charIndex:819}],headersStr:"一、函数的基本结构 二、参数与返回值 三、分号与返回值 四、注释的写法",content:'# Rust 的函数与注释\n\n在 Rust 中，函数是组织代码的基本单元，注释则是对代码意图的说明。理解这两点，可以让程序既清晰又易维护。\n\n----------------------------------------\n\n\n# 一、函数的基本结构\n\n最小化的函数形式如下：\n\nfn main() {\n    println!("Hello from Rust!");\n}\n\n\n1\n2\n3\n\n * fn 表示函数定义。\n * main 是程序入口。\n * 括号 () 表示参数列表，这里为空。\n * 花括号 {} 包裹函数体。\n\n----------------------------------------\n\n\n# 二、参数与返回值\n\nfn sum(x: i32, y: i32) -> i32 {\n    x + y\n}\n\nfn main() {\n    let result = sum(5, 7);\n    println!("5 + 7 = {result}");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 参数写作 名称: 类型，多个参数用逗号分隔。\n * 返回值通过 -> 类型 声明。\n * 最后一行表达式自动成为返回值。\n\n如果需要显式返回，可以使用 return：\n\nreturn x + y;\n\n\n1\n\n\n----------------------------------------\n\n\n# 三、分号与返回值\n\nfn five() -> i32 {\n    5\n}\n\nfn five_wrong() -> i32 {\n    5;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 没有分号：表达式的值就是返回值。\n * 有分号：变成语句，不会返回值，类型是 ()。\n\n这体现了 Rust 区分语句与表达式的方式。\n\n----------------------------------------\n\n\n# 四、注释的写法\n\nRust 支持两种常见注释：\n\n 1. 单行注释：\n    \n    // 打印一句话\n    println!("hi");\n    \n    \n    1\n    2\n    \n\n 2. 文档注释：\n    \n    /// 计算两数之和\n    fn sum(a: i32, b: i32) -> i32 {\n        a + b\n    }\n    \n    \n    1\n    2\n    3\n    4\n    \n\n文档注释不仅能说明函数用途，还能通过 cargo doc --open 生成文档。',normalizedContent:'# rust 的函数与注释\n\n在 rust 中，函数是组织代码的基本单元，注释则是对代码意图的说明。理解这两点，可以让程序既清晰又易维护。\n\n----------------------------------------\n\n\n# 一、函数的基本结构\n\n最小化的函数形式如下：\n\nfn main() {\n    println!("hello from rust!");\n}\n\n\n1\n2\n3\n\n * fn 表示函数定义。\n * main 是程序入口。\n * 括号 () 表示参数列表，这里为空。\n * 花括号 {} 包裹函数体。\n\n----------------------------------------\n\n\n# 二、参数与返回值\n\nfn sum(x: i32, y: i32) -> i32 {\n    x + y\n}\n\nfn main() {\n    let result = sum(5, 7);\n    println!("5 + 7 = {result}");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 参数写作 名称: 类型，多个参数用逗号分隔。\n * 返回值通过 -> 类型 声明。\n * 最后一行表达式自动成为返回值。\n\n如果需要显式返回，可以使用 return：\n\nreturn x + y;\n\n\n1\n\n\n----------------------------------------\n\n\n# 三、分号与返回值\n\nfn five() -> i32 {\n    5\n}\n\nfn five_wrong() -> i32 {\n    5;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 没有分号：表达式的值就是返回值。\n * 有分号：变成语句，不会返回值，类型是 ()。\n\n这体现了 rust 区分语句与表达式的方式。\n\n----------------------------------------\n\n\n# 四、注释的写法\n\nrust 支持两种常见注释：\n\n 1. 单行注释：\n    \n    // 打印一句话\n    println!("hi");\n    \n    \n    1\n    2\n    \n\n 2. 文档注释：\n    \n    /// 计算两数之和\n    fn sum(a: i32, b: i32) -> i32 {\n        a + b\n    }\n    \n    \n    1\n    2\n    3\n    4\n    \n\n文档注释不仅能说明函数用途，还能通过 cargo doc --open 生成文档。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"07.Rust的切片（Slice）",frontmatter:{title:"07.Rust的切片（Slice）",date:"2025-08-21T10:00:00.000Z",permalink:"/pages/Rust_07/"},regularPath:"/02.Rust/07.Rust%E7%9A%84Slice%E7%B1%BB%E5%9E%8B.html",relativePath:"02.Rust/07.Rust的Slice类型.md",key:"v-63fd00de",path:"/pages/Rust_07/",headers:[{level:2,title:"一、切片是什么？",slug:"一、切片是什么",normalizedTitle:"一、切片是什么？",charIndex:22},{level:2,title:"二、切片的简写方式",slug:"二、切片的简写方式",normalizedTitle:"二、切片的简写方式",charIndex:497},{level:2,title:"三、切片和字符串字面值",slug:"三、切片和字符串字面值",normalizedTitle:"三、切片和字符串字面值",charIndex:867},{level:2,title:"四、切片的威力：first_word 函数",slug:"四、切片的威力-first-word-函数",normalizedTitle:"四、切片的威力：first_word 函数",charIndex:1215},{level:2,title:"五、小心使用切片",slug:"五、小心使用切片",normalizedTitle:"五、小心使用切片",charIndex:1834}],headersStr:"一、切片是什么？ 二、切片的简写方式 三、切片和字符串字面值 四、切片的威力：first_word 函数 五、小心使用切片",content:'# Rust 的切片（Slice）\n\n\n# 一、切片是什么？\n\n切片（Slice）可以理解为：对集合中某一部分连续元素的引用。\n比如你有一个大西瓜 🍉，切片就是“我只想要中间那几块”。你不会把整个西瓜搬走，而只是指明：“从第几刀到第几刀之间的那块，给我留着”。\n\n在 Rust 中，切片往往出现在字符串或者数组这种顺序存储的数据结构里。\n\n一个例子：\n\nfn main() {\n    let s = String::from("hello world");\n\n    let hello = &s[0..5];   // 从索引0到5（不包含5）\n    let world = &s[6..11];  // 从索引6到11（不包含11）\n\n    println!("{}, {}", hello, world);\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面的 &s[0..5] 和 &s[6..11] 就是切片。 注意，切片不是拷贝数据，而是“借”了一部分区域的引用，经济又实惠。\n\n----------------------------------------\n\n\n# 二、切片的简写方式\n\n切片的语法其实很直观：[起始..结束]，但是 Rust 很贴心，提供了多种写法：\n\nlet s = String::from("hello");\n\n// 从头到 2\nlet slice1 = &s[..2];\n\n// 从 3 到结尾\nlet slice2 = &s[3..];\n\n// 整个字符串\nlet slice3 = &s[..];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n这就好比点菜时：\n\n * [..2] = “我要从头上切两片”；\n * [3..] = “我要从第三片开始到最后”；\n * [..] = “整个大盘子我都要”。\n\n是不是瞬间有画面感了？(回答：有的，兄弟，有的，这样的画面还有八个！)\n\n----------------------------------------\n\n\n# 三、切片和字符串字面值\n\n在 Rust 里，字符串字面值（比如 "hello world"）其实就是一个切片。 这也是为什么你看到它的类型是 &str，而不是 String。\n\nString 是堆上分配的可变字符串，而 &str 更轻量，本质上是对某段 UTF-8 数据的切片。\n\nfn main() {\n    let s: &str = "hello world";  // s 是一个切片\n    println!("{}", s);\n}\n\n\n1\n2\n3\n4\n\n\n这就好比：\n\n * String = 买下一整个蛋糕 🎂，想怎么切怎么切；\n * &str = 已经切好的蛋糕片 🍰，你直接吃。\n\n----------------------------------------\n\n\n# 四、切片的威力：first_word 函数\n\n假设我们要写一个函数，返回一句话中的第一个单词。 如果不用切片，可能会陷入各种复制粘贴麻烦。 但切片就很优雅：\n\nfn first_word(s: &String) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b\' \' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n\nfn main() {\n    let s = String::from("hello world");\n\n    let word = first_word(&s);\n\n    println!("第一个单词是: {}", word);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n思路很简单：\n\n * 把字符串转成字节数组 as_bytes()；\n * 一边遍历，一边找空格的位置；\n * 找到后，直接返回从头到空格之前的那一片切片。\n\n结果就是：hello。 这里切片帮我们避免了数据的拷贝，直接“划块即用”。\n\n----------------------------------------\n\n\n# 五、小心使用切片\n\n切片很好用，但要记住一点：切片只是借用，不拥有数据。 所以：\n\n * 切片的生命周期不能超过原始数据；\n * 切片和原始数据之间要保持一致，不然会出大问题。\n\n换句话说，你不能一边切着吃蛋糕，一边把蛋糕扔了，这样切片就没东西指向了。',normalizedContent:'# rust 的切片（slice）\n\n\n# 一、切片是什么？\n\n切片（slice）可以理解为：对集合中某一部分连续元素的引用。\n比如你有一个大西瓜 🍉，切片就是“我只想要中间那几块”。你不会把整个西瓜搬走，而只是指明：“从第几刀到第几刀之间的那块，给我留着”。\n\n在 rust 中，切片往往出现在字符串或者数组这种顺序存储的数据结构里。\n\n一个例子：\n\nfn main() {\n    let s = string::from("hello world");\n\n    let hello = &s[0..5];   // 从索引0到5（不包含5）\n    let world = &s[6..11];  // 从索引6到11（不包含11）\n\n    println!("{}, {}", hello, world);\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面的 &s[0..5] 和 &s[6..11] 就是切片。 注意，切片不是拷贝数据，而是“借”了一部分区域的引用，经济又实惠。\n\n----------------------------------------\n\n\n# 二、切片的简写方式\n\n切片的语法其实很直观：[起始..结束]，但是 rust 很贴心，提供了多种写法：\n\nlet s = string::from("hello");\n\n// 从头到 2\nlet slice1 = &s[..2];\n\n// 从 3 到结尾\nlet slice2 = &s[3..];\n\n// 整个字符串\nlet slice3 = &s[..];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n这就好比点菜时：\n\n * [..2] = “我要从头上切两片”；\n * [3..] = “我要从第三片开始到最后”；\n * [..] = “整个大盘子我都要”。\n\n是不是瞬间有画面感了？(回答：有的，兄弟，有的，这样的画面还有八个！)\n\n----------------------------------------\n\n\n# 三、切片和字符串字面值\n\n在 rust 里，字符串字面值（比如 "hello world"）其实就是一个切片。 这也是为什么你看到它的类型是 &str，而不是 string。\n\nstring 是堆上分配的可变字符串，而 &str 更轻量，本质上是对某段 utf-8 数据的切片。\n\nfn main() {\n    let s: &str = "hello world";  // s 是一个切片\n    println!("{}", s);\n}\n\n\n1\n2\n3\n4\n\n\n这就好比：\n\n * string = 买下一整个蛋糕 🎂，想怎么切怎么切；\n * &str = 已经切好的蛋糕片 🍰，你直接吃。\n\n----------------------------------------\n\n\n# 四、切片的威力：first_word 函数\n\n假设我们要写一个函数，返回一句话中的第一个单词。 如果不用切片，可能会陷入各种复制粘贴麻烦。 但切片就很优雅：\n\nfn first_word(s: &string) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b\' \' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n\nfn main() {\n    let s = string::from("hello world");\n\n    let word = first_word(&s);\n\n    println!("第一个单词是: {}", word);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n思路很简单：\n\n * 把字符串转成字节数组 as_bytes()；\n * 一边遍历，一边找空格的位置；\n * 找到后，直接返回从头到空格之前的那一片切片。\n\n结果就是：hello。 这里切片帮我们避免了数据的拷贝，直接“划块即用”。\n\n----------------------------------------\n\n\n# 五、小心使用切片\n\n切片很好用，但要记住一点：切片只是借用，不拥有数据。 所以：\n\n * 切片的生命周期不能超过原始数据；\n * 切片和原始数据之间要保持一致，不然会出大问题。\n\n换句话说，你不能一边切着吃蛋糕，一边把蛋糕扔了，这样切片就没东西指向了。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"06.Rust的引用和借用",frontmatter:{title:"06.Rust的引用和借用",date:"2025-08-20T21:00:00.000Z",permalink:"/pages/Rust_06/"},regularPath:"/02.Rust/06.Rust%E7%9A%84%E5%BC%95%E7%94%A8%E5%92%8C%E5%80%9F%E7%94%A8.html",relativePath:"02.Rust/06.Rust的引用和借用.md",key:"v-31a3f241",path:"/pages/Rust_06/",headers:[{level:2,title:"一、引用和借用的基本阐述",slug:"一、引用和借用的基本阐述",normalizedTitle:"一、引用和借用的基本阐述",charIndex:18},{level:2,title:"二、可变引用",slug:"二、可变引用",normalizedTitle:"二、可变引用",charIndex:650},{level:2,title:"三、悬垂引用（Dangling References）",slug:"三、悬垂引用-dangling-references",normalizedTitle:"三、悬垂引用（dangling references）",charIndex:1404}],headersStr:"一、引用和借用的基本阐述 二、可变引用 三、悬垂引用（Dangling References）",content:'# Rust 的引用和借用\n\n\n# 一、引用和借用的基本阐述\n\n引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。与指针不同，引用在其生命周期内保证指向某个特定类型的有效值。\n\n定义并使用一个calculate_length` 函数，它以一个对象的引用作为参数而不是获取值的所有权：\n\nfn main() {\n    let s1 = String::from("hello");\n\n    let len = calculate_length(&s1);\n\n    println!("The length of \'{s1}\' is {len}.");\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n在上面的代码中， & 符号就是 引用，它们允许你使用值但不获取其所有权。\n\n&s1 语法让我们创建一个指向值 s1 的引用，但是并不拥有它。因为并不拥有这个值，所以当引用停止使用时，它所指向的值也不会被丢弃。\n\n----------------------------------------\n\n我们将创建一个引用的行为称为 借用（borrowing），正如在日常生活中，我们借别人一样东西，迟早是要还的，因为我们没有那件物品的所有权。\n\n同时需要注意，我们不能去修改借用的变量，那样不合法，也不道德。\n\n\n# 二、可变引用\n\n我们可以通过添加 mut 关键字的方式来让引用变得“可变”，修改一下代码：\n\nfn main() {\n    let mut s = String::from("hello");\n\n    change(&mut s);\n}\n\nfn change(some_string: &mut String) {\n    some_string.push_str(", world");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这样就可以实现可变了！\n\n----------------------------------------\n\n不过，可变引用有一个很大的缺点，就是同一时间不能存在多个可变引用，或者不能存在可变引用和引用同时存在的情况。\n\n这里，先阐述一下，引用的规则：\n\n * 在任意给定时间，要么只能有一个可变引用，要么只能有多个不可变引用。\n * 引用必须总是有效的。\n\n正如此，下面的两种情况不合法：\n\n    let mut s = String::from("hello");\n\n    let r1 = &mut s;\t// 两次可变引用，答煤油！\n    let r2 = &mut s;\n\n    println!("{}, {}", r1, r2);\n\n\n1\n2\n3\n4\n5\n6\n\n\n let mut s = String::from("hello");\n\n    let r1 = &s; // 没问题\t\t\n    let r2 = &s; // 没问题\n    let r3 = &mut s; // 大问题，鱼与熊掌不可兼得\n\n    println!("{}, {}, and {}", r1, r2, r3);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 三、悬垂引用（Dangling References）\n\n在具有指针的语言中，很容易通过释放内存时保留指向它的指针而错误地生成一个悬垂指针（dangling pointer）—— 指向可能已被分配给其他用途的内存位置的指针。\n\n相比之下，在 Rust 中编译器确保引用永远也不会变成悬垂引用：当你拥有一些数据的引用，编译器确保数据不会在其引用之前离开作用域。\n\n简而言之，就是不能返回一个孤寡老人，下面的代码可以帮助理解：\n\nfn main() {\n    let reference_to_nothing = dangle();\n}\n\nfn dangle() -> &String {\n    let s = String::from("hello");\n\n    &s\t// s的生命周期结束，但是这个函数返回了s的指针？ 显然，十分有十一分的不合法！\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n',normalizedContent:'# rust 的引用和借用\n\n\n# 一、引用和借用的基本阐述\n\n引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。与指针不同，引用在其生命周期内保证指向某个特定类型的有效值。\n\n定义并使用一个calculate_length` 函数，它以一个对象的引用作为参数而不是获取值的所有权：\n\nfn main() {\n    let s1 = string::from("hello");\n\n    let len = calculate_length(&s1);\n\n    println!("the length of \'{s1}\' is {len}.");\n}\n\nfn calculate_length(s: &string) -> usize {\n    s.len()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n在上面的代码中， & 符号就是 引用，它们允许你使用值但不获取其所有权。\n\n&s1 语法让我们创建一个指向值 s1 的引用，但是并不拥有它。因为并不拥有这个值，所以当引用停止使用时，它所指向的值也不会被丢弃。\n\n----------------------------------------\n\n我们将创建一个引用的行为称为 借用（borrowing），正如在日常生活中，我们借别人一样东西，迟早是要还的，因为我们没有那件物品的所有权。\n\n同时需要注意，我们不能去修改借用的变量，那样不合法，也不道德。\n\n\n# 二、可变引用\n\n我们可以通过添加 mut 关键字的方式来让引用变得“可变”，修改一下代码：\n\nfn main() {\n    let mut s = string::from("hello");\n\n    change(&mut s);\n}\n\nfn change(some_string: &mut string) {\n    some_string.push_str(", world");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这样就可以实现可变了！\n\n----------------------------------------\n\n不过，可变引用有一个很大的缺点，就是同一时间不能存在多个可变引用，或者不能存在可变引用和引用同时存在的情况。\n\n这里，先阐述一下，引用的规则：\n\n * 在任意给定时间，要么只能有一个可变引用，要么只能有多个不可变引用。\n * 引用必须总是有效的。\n\n正如此，下面的两种情况不合法：\n\n    let mut s = string::from("hello");\n\n    let r1 = &mut s;\t// 两次可变引用，答煤油！\n    let r2 = &mut s;\n\n    println!("{}, {}", r1, r2);\n\n\n1\n2\n3\n4\n5\n6\n\n\n let mut s = string::from("hello");\n\n    let r1 = &s; // 没问题\t\t\n    let r2 = &s; // 没问题\n    let r3 = &mut s; // 大问题，鱼与熊掌不可兼得\n\n    println!("{}, {}, and {}", r1, r2, r3);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 三、悬垂引用（dangling references）\n\n在具有指针的语言中，很容易通过释放内存时保留指向它的指针而错误地生成一个悬垂指针（dangling pointer）—— 指向可能已被分配给其他用途的内存位置的指针。\n\n相比之下，在 rust 中编译器确保引用永远也不会变成悬垂引用：当你拥有一些数据的引用，编译器确保数据不会在其引用之前离开作用域。\n\n简而言之，就是不能返回一个孤寡老人，下面的代码可以帮助理解：\n\nfn main() {\n    let reference_to_nothing = dangle();\n}\n\nfn dangle() -> &string {\n    let s = string::from("hello");\n\n    &s\t// s的生命周期结束，但是这个函数返回了s的指针？ 显然，十分有十一分的不合法！\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"08.Rust的结构体类型",frontmatter:{title:"08.Rust的结构体类型",date:"2025-08-22T15:00:00.000Z",permalink:"/pages/Rust_08/"},regularPath:"/02.Rust/08.Rust%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B.html",relativePath:"02.Rust/08.Rust的结构体类型.md",key:"v-216d0ffc",path:"/pages/Rust_08/",headers:[{level:2,title:"一、为什么要用结构体（Struct）",slug:"一、为什么要用结构体-struct",normalizedTitle:"一、为什么要用结构体（struct）",charIndex:157},{level:2,title:"二、如何定义与使用结构体",slug:"二、如何定义与使用结构体",normalizedTitle:"二、如何定义与使用结构体",charIndex:462},{level:3,title:"定义结构体",slug:"定义结构体",normalizedTitle:"定义结构体",charIndex:479},{level:3,title:"实例化结构体",slug:"实例化结构体",normalizedTitle:"实例化结构体",charIndex:624},{level:3,title:"修改字段",slug:"修改字段",normalizedTitle:"修改字段",charIndex:862},{level:2,title:"三、还有其他结构体变体？元组 struct、单元 struct",slug:"三、还有其他结构体变体-元组-struct、单元-struct",normalizedTitle:"三、还有其他结构体变体？元组 struct、单元 struct",charIndex:1018},{level:3,title:"元组结构体（Tuple Struct）",slug:"元组结构体-tuple-struct",normalizedTitle:"元组结构体（tuple struct）",charIndex:1072},{level:3,title:"单元结构体（Unit-like Struct）",slug:"单元结构体-unit-like-struct",normalizedTitle:"单元结构体（unit-like struct）",charIndex:1296},{level:2,title:"四、结构体在真实代码里的样子：计算矩形面积",slug:"四、结构体在真实代码里的样子-计算矩形面积",normalizedTitle:"四、结构体在真实代码里的样子：计算矩形面积",charIndex:1479},{level:2,title:"五、结构体进阶操作：复用已有实例",slug:"五、结构体进阶操作-复用已有实例",normalizedTitle:"五、结构体进阶操作：复用已有实例",charIndex:1878}],headersStr:"一、为什么要用结构体（Struct） 二、如何定义与使用结构体 定义结构体 实例化结构体 修改字段 三、还有其他结构体变体？元组 struct、单元 struct 元组结构体（Tuple Struct） 单元结构体（Unit-like Struct） 四、结构体在真实代码里的样子：计算矩形面积 五、结构体进阶操作：复用已有实例",content:'# Rust 的结构体类型：给数据贴标签让它长得像人样\n\nRust 里的结构体（struct）是你拿来把数据组织得更有意义的工具。它的作用就像给一堆数据贴上名字标签，当你再用的时候，根本不用记顺序，只要看名字就知道搞啥。\n\n----------------------------------------\n\n\n# 一、为什么要用结构体（Struct）\n\n结构体比元组更“友好”，因为你可以给每个字段起名字，不再靠位置记是什么。比如我们有一个代表用户信息的数据组：\n\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n这样以后你访问字段就很清楚：\n\nlet u = User { ... };\nprintln!("{}", u.email);  // 一看就知道在搞邮箱\n\n\n1\n2\n\n\n结构体就是为了让数据“有脸有名”——比元组靠谱。\n\n\n# 二、如何定义与使用结构体\n\n\n# 定义结构体\n\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n你定义的是一个模板，跟工厂图纸一样。\n\n\n# 实例化结构体\n\nlet mut user1 = User {\n    email: String::from("a@ex.com"),\n    username: String::from("alice"),\n    active: true,\n    sign_in_count: 1,\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n注意：\n\n * 字段顺序可随意（不像元组必须按定义顺序填）\n * 要想改字段必须让整个实例是 mut（Rust 不允许只给字段加 mut）\n\n\n# 修改字段\n\nuser1.email = String::from("alice@new.com");\n\n\n1\n\n\n整个实例可变才行。\n\n— 来源参考：“定义结构体”与“实例化结构体”、修改字段 都是 Rust 基础操作\n\n----------------------------------------\n\n\n# 三、还有其他结构体变体？元组 struct、单元 struct\n\nRust 还支持其他几种结构体：\n\n\n# 元组结构体（Tuple Struct）\n\n像元组但有类型名，适合只想“命名类型”而不想写字段名的情况：\n\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nlet black = Color(0, 0, 0);\nlet origin = Point(0, 0, 0);\n\n\n1\n2\n3\n4\n5\n\n\n尽管字段类型一样，但 Color 和 Point 是不同类型，互不兼容。\n\n\n# 单元结构体（Unit-like Struct）\n\n啥都没有，就是个名字，常用于特殊场景（比如作为 trait 的实现标记）：\n\nstruct AlwaysEqual;\n\nlet x = AlwaysEqual;\n\n\n1\n2\n3\n\n\n给个名字空壳体，有啥用呢？以后你会用到。\n\n----------------------------------------\n\n\n# 四、结构体在真实代码里的样子：计算矩形面积\n\n假设你要计算矩形面积，用结构体比多个变量更清晰：\n\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn area(rect: &Rectangle) -> u32 {\n    rect.width * rect.height\n}\n\nfn main() {\n    let rect = Rectangle { width: 30, height: 50 };\n    println!("面积是 {} 像素²", area(&rect));\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n让人看代码时瞬间明白：这是一个矩形，有宽有高，用 area 函数算面积。太直观。\n\n----------------------------------------\n\n\n# 五、结构体进阶操作：复用已有实例\n\n如果你想在新实例里复用老实例的大部分字段，可以写：\n\nlet user2 = User {\n    email: String::from("new@ex.com"),\n    ..user1\n};\n\n\n1\n2\n3\n4\n\n\n这会把 user1 里除了 email 之外的字段直接搬过来。但要注意，不会 Copy 的字段会被 move， user1 中那些被 move 掉的字段就不能再用。',normalizedContent:'# rust 的结构体类型：给数据贴标签让它长得像人样\n\nrust 里的结构体（struct）是你拿来把数据组织得更有意义的工具。它的作用就像给一堆数据贴上名字标签，当你再用的时候，根本不用记顺序，只要看名字就知道搞啥。\n\n----------------------------------------\n\n\n# 一、为什么要用结构体（struct）\n\n结构体比元组更“友好”，因为你可以给每个字段起名字，不再靠位置记是什么。比如我们有一个代表用户信息的数据组：\n\nstruct user {\n    active: bool,\n    username: string,\n    email: string,\n    sign_in_count: u64,\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n这样以后你访问字段就很清楚：\n\nlet u = user { ... };\nprintln!("{}", u.email);  // 一看就知道在搞邮箱\n\n\n1\n2\n\n\n结构体就是为了让数据“有脸有名”——比元组靠谱。\n\n\n# 二、如何定义与使用结构体\n\n\n# 定义结构体\n\nstruct user {\n    active: bool,\n    username: string,\n    email: string,\n    sign_in_count: u64,\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n你定义的是一个模板，跟工厂图纸一样。\n\n\n# 实例化结构体\n\nlet mut user1 = user {\n    email: string::from("a@ex.com"),\n    username: string::from("alice"),\n    active: true,\n    sign_in_count: 1,\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n注意：\n\n * 字段顺序可随意（不像元组必须按定义顺序填）\n * 要想改字段必须让整个实例是 mut（rust 不允许只给字段加 mut）\n\n\n# 修改字段\n\nuser1.email = string::from("alice@new.com");\n\n\n1\n\n\n整个实例可变才行。\n\n— 来源参考：“定义结构体”与“实例化结构体”、修改字段 都是 rust 基础操作\n\n----------------------------------------\n\n\n# 三、还有其他结构体变体？元组 struct、单元 struct\n\nrust 还支持其他几种结构体：\n\n\n# 元组结构体（tuple struct）\n\n像元组但有类型名，适合只想“命名类型”而不想写字段名的情况：\n\nstruct color(i32, i32, i32);\nstruct point(i32, i32, i32);\n\nlet black = color(0, 0, 0);\nlet origin = point(0, 0, 0);\n\n\n1\n2\n3\n4\n5\n\n\n尽管字段类型一样，但 color 和 point 是不同类型，互不兼容。\n\n\n# 单元结构体（unit-like struct）\n\n啥都没有，就是个名字，常用于特殊场景（比如作为 trait 的实现标记）：\n\nstruct alwaysequal;\n\nlet x = alwaysequal;\n\n\n1\n2\n3\n\n\n给个名字空壳体，有啥用呢？以后你会用到。\n\n----------------------------------------\n\n\n# 四、结构体在真实代码里的样子：计算矩形面积\n\n假设你要计算矩形面积，用结构体比多个变量更清晰：\n\nstruct rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn area(rect: &rectangle) -> u32 {\n    rect.width * rect.height\n}\n\nfn main() {\n    let rect = rectangle { width: 30, height: 50 };\n    println!("面积是 {} 像素²", area(&rect));\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n让人看代码时瞬间明白：这是一个矩形，有宽有高，用 area 函数算面积。太直观。\n\n----------------------------------------\n\n\n# 五、结构体进阶操作：复用已有实例\n\n如果你想在新实例里复用老实例的大部分字段，可以写：\n\nlet user2 = user {\n    email: string::from("new@ex.com"),\n    ..user1\n};\n\n\n1\n2\n3\n4\n\n\n这会把 user1 里除了 email 之外的字段直接搬过来。但要注意，不会 copy 的字段会被 move， user1 中那些被 move 掉的字段就不能再用。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"09.Rust的结构体的打印与调试",frontmatter:{title:"09.Rust的结构体的打印与调试",date:"2025-08-22T20:00:00.000Z",permalink:"/pages/Rust_09/"},regularPath:"/02.Rust/09.Rust%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E6%89%93%E5%8D%B0%E4%B8%8E%E8%B0%83%E8%AF%95.html",relativePath:"02.Rust/09.Rust的结构体的打印与调试.md",key:"v-083db654",path:"/pages/Rust_09/",headers:[{level:2,title:"一、使用 {:?} 或 {:#?}",slug:"一、使用-或",normalizedTitle:"一、使用 {:?} 或 {:#?}",charIndex:506},{level:2,title:"二、[dbg! 宏]",slug:"二、-dbg-宏",normalizedTitle:"二、[dbg! 宏]",charIndex:695}],headersStr:"一、使用 {:?} 或 {:#?} 二、[dbg! 宏]",content:'# Rust的结构体的 println 该如何办？\n\n当我们写了如下代码，\n\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect = Rectangle {\n        width: 20,\n        height: 40,\n    };\n\n    println!("rect is {}", rect);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n并且尝试 cargo run时，编译器通常会抱怨：\n\nerror[E0277]: `Rectangle` doesn\'t implement `std::fmt::Display`\n\n\n1\n\n\n显然是不能这样玩的，因为编译器并不知道要用什么样的形式把它打印出来。就比如你去汉武大学的图书馆借书，你要是光跟管理员同志说一句借书，显然这位同志只会认为来的是一个糟糕的人。\n\n----------------------------------------\n\n同理，我们用 Debug 来优雅地打印出结构体。\n\n\n# 一、使用 {:?} 或 {:#?}\n\n首先，我们在程序开头添加：\n\n#[derive(Debug)]\n\n\n1\n\n\n然后，把 println! 宏改成类似于\n\nprintln!("rect1 is {rect:?}");\n\n\n1\n\n\n或者\n\nprintln!("rect1 is {rect1:#?}");\n\n\n1\n\n\n两种结果的输出是有点差异的，读者可以自己调试一哈。\n\n\n# 二、[dbg! 宏]\n\n没错，还是如下的代码：\n\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let scale = 4;\n    let rect = Rectangle {\n        width: dbg!(20 * scale),\n        height: 40,\n    };\n\n    dbg!(&rect);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n这样子，在cargo run之后，就会是如下的结果：\n\n[src/main.rs:10:16] 20 * scale = 80\n[src/main.rs:14:5] &rect1 = Rectangle {\n    width: 80,\n    height: 40,\n}\n\n\n1\n2\n3\n4\n5\n',normalizedContent:'# rust的结构体的 println 该如何办？\n\n当我们写了如下代码，\n\nstruct rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect = rectangle {\n        width: 20,\n        height: 40,\n    };\n\n    println!("rect is {}", rect);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n并且尝试 cargo run时，编译器通常会抱怨：\n\nerror[e0277]: `rectangle` doesn\'t implement `std::fmt::display`\n\n\n1\n\n\n显然是不能这样玩的，因为编译器并不知道要用什么样的形式把它打印出来。就比如你去汉武大学的图书馆借书，你要是光跟管理员同志说一句借书，显然这位同志只会认为来的是一个糟糕的人。\n\n----------------------------------------\n\n同理，我们用 debug 来优雅地打印出结构体。\n\n\n# 一、使用 {:?} 或 {:#?}\n\n首先，我们在程序开头添加：\n\n#[derive(debug)]\n\n\n1\n\n\n然后，把 println! 宏改成类似于\n\nprintln!("rect1 is {rect:?}");\n\n\n1\n\n\n或者\n\nprintln!("rect1 is {rect1:#?}");\n\n\n1\n\n\n两种结果的输出是有点差异的，读者可以自己调试一哈。\n\n\n# 二、[dbg! 宏]\n\n没错，还是如下的代码：\n\n#[derive(debug)]\nstruct rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let scale = 4;\n    let rect = rectangle {\n        width: dbg!(20 * scale),\n        height: 40,\n    };\n\n    dbg!(&rect);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n这样子，在cargo run之后，就会是如下的结果：\n\n[src/main.rs:10:16] 20 * scale = 80\n[src/main.rs:14:5] &rect1 = rectangle {\n    width: 80,\n    height: 40,\n}\n\n\n1\n2\n3\n4\n5\n',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"10.Rust的方法",frontmatter:{title:"10.Rust的方法",date:"2025-08-23T11:00:00.000Z",permalink:"/pages/Rust_10/"},regularPath:"/02.Rust/10.Rust%E7%9A%84%E6%96%B9%E6%B3%95.html",relativePath:"02.Rust/10.Rust的方法.md",key:"v-c852c146",path:"/pages/Rust_10/",headers:[{level:2,title:"一、方法是什么？",slug:"一、方法是什么",normalizedTitle:"一、方法是什么？",charIndex:141},{level:2,title:"二、示例场景：点灯的 LED",slug:"二、示例场景-点灯的-led",normalizedTitle:"二、示例场景：点灯的 led",charIndex:492},{level:2,title:"三、方法与函数区别？",slug:"三、方法与函数区别",normalizedTitle:"三、方法与函数区别？",charIndex:1278},{level:2,title:"四、方法签名细节",slug:"四、方法签名细节",normalizedTitle:"四、方法签名细节",charIndex:1467},{level:2,title:"五、关联函数（Associated Functions）：看起来像静态方法",slug:"五、关联函数-associated-functions-看起来像静态方法",normalizedTitle:"五、关联函数（associated functions）：看起来像静态方法",charIndex:1796}],headersStr:"一、方法是什么？ 二、示例场景：点灯的 LED 三、方法与函数区别？ 四、方法签名细节 五、关联函数（Associated Functions）：看起来像静态方法",content:'# Rust 的方法：让结构体会“做事”\n\nRust 的方法（methods）就像给结构体装上“功夫技能包”。我们把这些技能写在 impl 块里，让实例自己能“点名调用”，逻辑清晰又好用。\n\n----------------------------------------\n\n\n# 一、方法是什么？\n\n * 方法看起来像函数，但定义在结构体（或枚举、trait）里。\n * 它们的第一个参数总是 self（能是值、引用或可变引用）。\n * 这样你可以通过 instance.my_method() 直接调用，就像让结构体自己做事。\n\n源码里是这么写的：定义在 impl 块里，方法签名像这样：\n\nimpl TypeName {\n    fn method_name(&self, other_arg: T) -> U { ... }\n}\n\n\n1\n2\n3\n\n\n调用方式是：\n\nmy_instance.method_name(arg);\n\n\n1\n\n\n这比每次传 my_instance 更省心。\n\n----------------------------------------\n\n\n# 二、示例场景：点灯的 LED\n\n假设我们有一个 Led 结构体，代表一盏 LED 灯：\n\nstruct Led { state: bool }\n\nimpl Led {\n    /// 打开 LED\n    fn turn_on(&mut self) {\n        self.state = true;\n        println!("LED is now ON");\n    }\n\n    /// 关闭 LED\n    fn turn_off(&mut self) {\n        self.state = false;\n        println!("LED is now OFF");\n    }\n\n    /// 检查 LED 是否处于开启状态\n    fn is_on(&self) -> bool {\n        self.state\n    }\n}\n\nfn main() {\n    let mut led = Led { state: false };\n    led.turn_on();\n    println!("LED 当前状态：{}", led.is_on());\n    led.turn_off();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n这里有几个要点：\n\n * turn_on 和 turn_off 使用 &mut self，因为它们改变了自己的状态。\n * is_on 用 &self，只是读取，不动结构体内容。\n * 调用方式统一用 led.method()，语义贴近人类语言：“让 led 做某事”。\n\n----------------------------------------\n\n\n# 三、方法与函数区别？\n\n * 函数：通常写在外面，需要明确传参，比如 fn area(rect: &Rectangle) -> u32。\n * 方法：写在 impl 里，有 self 参数，调用更自然，组织也更清晰。\n\n这让代码逻辑像“面向对象”风格：先定义结构体，再赋能一系列方法。\n\n----------------------------------------\n\n\n# 四、方法签名细节\n\n方法有三种常见签名方式：\n\n 1. fn foo(&self) —— 不改变结构体，只读取内部内容。\n 2. fn foo(&mut self) —— 可改变结构体内部状态。\n 3. fn foo(self) —— 消费结构体本身（少见），常用于把自己转成别的类型。\n\n例如：\n\nimpl Led {\n    fn destroy(self) {\n        println!("LED destroyed, state was {}", self.state);\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\n使用后 led 就不能再用了。\n\n----------------------------------------\n\n\n# 五、关联函数（Associated Functions）：看起来像静态方法\n\n如果不加 self，它就不是方法，而是“结构体自己的函数”（常用于创建新实例）：\n\nimpl Led {\n    fn new_on() -> Self {\n        Led { state: true }\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\n调用方式：\n\nlet led2 = Led::new_on();\n\n\n1\n\n\n像工厂函数，总在结构体里但不作用于实例。',normalizedContent:'# rust 的方法：让结构体会“做事”\n\nrust 的方法（methods）就像给结构体装上“功夫技能包”。我们把这些技能写在 impl 块里，让实例自己能“点名调用”，逻辑清晰又好用。\n\n----------------------------------------\n\n\n# 一、方法是什么？\n\n * 方法看起来像函数，但定义在结构体（或枚举、trait）里。\n * 它们的第一个参数总是 self（能是值、引用或可变引用）。\n * 这样你可以通过 instance.my_method() 直接调用，就像让结构体自己做事。\n\n源码里是这么写的：定义在 impl 块里，方法签名像这样：\n\nimpl typename {\n    fn method_name(&self, other_arg: t) -> u { ... }\n}\n\n\n1\n2\n3\n\n\n调用方式是：\n\nmy_instance.method_name(arg);\n\n\n1\n\n\n这比每次传 my_instance 更省心。\n\n----------------------------------------\n\n\n# 二、示例场景：点灯的 led\n\n假设我们有一个 led 结构体，代表一盏 led 灯：\n\nstruct led { state: bool }\n\nimpl led {\n    /// 打开 led\n    fn turn_on(&mut self) {\n        self.state = true;\n        println!("led is now on");\n    }\n\n    /// 关闭 led\n    fn turn_off(&mut self) {\n        self.state = false;\n        println!("led is now off");\n    }\n\n    /// 检查 led 是否处于开启状态\n    fn is_on(&self) -> bool {\n        self.state\n    }\n}\n\nfn main() {\n    let mut led = led { state: false };\n    led.turn_on();\n    println!("led 当前状态：{}", led.is_on());\n    led.turn_off();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n这里有几个要点：\n\n * turn_on 和 turn_off 使用 &mut self，因为它们改变了自己的状态。\n * is_on 用 &self，只是读取，不动结构体内容。\n * 调用方式统一用 led.method()，语义贴近人类语言：“让 led 做某事”。\n\n----------------------------------------\n\n\n# 三、方法与函数区别？\n\n * 函数：通常写在外面，需要明确传参，比如 fn area(rect: &rectangle) -> u32。\n * 方法：写在 impl 里，有 self 参数，调用更自然，组织也更清晰。\n\n这让代码逻辑像“面向对象”风格：先定义结构体，再赋能一系列方法。\n\n----------------------------------------\n\n\n# 四、方法签名细节\n\n方法有三种常见签名方式：\n\n 1. fn foo(&self) —— 不改变结构体，只读取内部内容。\n 2. fn foo(&mut self) —— 可改变结构体内部状态。\n 3. fn foo(self) —— 消费结构体本身（少见），常用于把自己转成别的类型。\n\n例如：\n\nimpl led {\n    fn destroy(self) {\n        println!("led destroyed, state was {}", self.state);\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\n使用后 led 就不能再用了。\n\n----------------------------------------\n\n\n# 五、关联函数（associated functions）：看起来像静态方法\n\n如果不加 self，它就不是方法，而是“结构体自己的函数”（常用于创建新实例）：\n\nimpl led {\n    fn new_on() -> self {\n        led { state: true }\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\n调用方式：\n\nlet led2 = led::new_on();\n\n\n1\n\n\n像工厂函数，总在结构体里但不作用于实例。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"12.Rust的match控制流结构",frontmatter:{title:"12.Rust的match控制流结构",date:"2025-08-24T06:00:00.000Z",permalink:"/pages/Rust_12/"},regularPath:"/02.Rust/12.Rust%E7%9A%84match%E6%8E%A7%E5%88%B6%E6%B5%81%E7%BB%93%E6%9E%84.html",relativePath:"02.Rust/12.Rust的match控制流结构.md",key:"v-0308fa66",path:"/pages/Rust_12/",headers:[{level:2,title:"一、match 是什么",slug:"一、match-是什么",normalizedTitle:"一、match 是什么",charIndex:219},{level:2,title:"二、基础示例：枚举 + match",slug:"二、基础示例-枚举-match",normalizedTitle:"二、基础示例：枚举 + match",charIndex:399},{level:2,title:"三、多行分支写法",slug:"三、多行分支写法",normalizedTitle:"三、多行分支写法",charIndex:846},{level:2,title:"四、为什么 match 更靠谱？",slug:"四、为什么-match-更靠谱",normalizedTitle:"四、为什么 match 更靠谱？",charIndex:1309},{level:2,title:"五、换个例子：辨识数字范围",slug:"五、换个例子-辨识数字范围",normalizedTitle:"五、换个例子：辨识数字范围",charIndex:1488}],headersStr:"一、match 是什么 二、基础示例：枚举 + match 三、多行分支写法 四、为什么 match 更靠谱？ 五、换个例子：辨识数字范围",content:'# Rust 的 match 控制流结构：比 if/else 更“走心”的分支写法\n\n在 Rust 里，match 就像一台「值分类机」：它依次检查每个标签（模式），一旦“刚好合适”，就自动跳进对应处理逻辑里。比起 if/else，它更安全、更严谨，也让代码结构更清晰:contentReference[oaicite:0]{index=0}。\n\n----------------------------------------\n\n\n# 一、match 是什么\n\nmatch 可以拿任意类型（尤其是枚举）来做分支判断，不局限于布尔值。用 match 能让编译器帮你确保每一种情况都写到了，不会漏。\n\n形象比喻：想象你在自动分拣中心——每个分支是一个洞，值或数据“滑”过去，正好合适哪个洞，就进入哪个分支。\n\n----------------------------------------\n\n\n# 二、基础示例：枚举 + match\n\n假设你有一套“宠物”分类：\n\nenum Pet {\n    Cat,\n    Dog,\n    Rabbit,\n}\n\nfn describe(p: Pet) -> &\'static str {\n    match p {\n        Pet::Cat => "你抓到了一只喵喵～",\n        Pet::Dog => "汪汪！一只G狗！",\n        Pet::Rabbit => "蹦蹦的兔兔在这里~",\n    }\n}\n\nfn main() {\n    let p = Pet::Rabbit;\n    println!("{}", describe(p));\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * match p 把 p 的状态拿来对比标签；\n * 每个 => 后是该分支的处理结果；\n * 你必须写全 Cat、Dog、Rabbit 三种，否则编译不通过。\n\n\n# 三、多行分支写法\n\n有时候分支逻辑不止一个动作，比如还要打印日志：\n\nfn count_pet(p: Pet) -> u32 {\n    match p {\n        Pet::Cat => {\n            println!("统计：捕获了一只猫咪");\n            4\n        }\n        Pet::Dog => {\n            println!("统计：捕获了一只狗狗");\n            3\n        }\n        Pet::Rabbit => {\n            println!("统计：兔兔跑得快");\n            2\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * 分支代码块里可以写一堆逻辑；\n * 最后一行是被 return 的“值”。\n\n----------------------------------------\n\n\n# 四、为什么 match 更靠谱？\n\n * 必须覆盖所有可能值（穷尽检查），少了一个分支直接编译报错。\n * 结构清晰，各个分支整齐排列，读着更舒服。\n * 灵活表达，以后你会看到它能和复杂模式结合使用——简直是流程控制的王牌工具doc.rust-lang.org。\n\n----------------------------------------\n\n\n# 五、换个例子：辨识数字范围\n\n假如你写个函数，根据数字区间给出评价：\n\nfn rate(num: i32) -> &\'static str {\n    match num {\n        0 => "零，不动弹",\n        1..=5 => "小于等于五",\n        6..=10 => "介于六和十之间",\n        _ => "大于十",\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 1..=5 表示从 1 到 5（包含 5）；\n * _ 是“通配符”，匹配所有剩下的数。\n\n这也体现了 match 的强大：区间、默认值一并搞定，写起来简洁又醒目。',normalizedContent:'# rust 的 match 控制流结构：比 if/else 更“走心”的分支写法\n\n在 rust 里，match 就像一台「值分类机」：它依次检查每个标签（模式），一旦“刚好合适”，就自动跳进对应处理逻辑里。比起 if/else，它更安全、更严谨，也让代码结构更清晰:contentreference[oaicite:0]{index=0}。\n\n----------------------------------------\n\n\n# 一、match 是什么\n\nmatch 可以拿任意类型（尤其是枚举）来做分支判断，不局限于布尔值。用 match 能让编译器帮你确保每一种情况都写到了，不会漏。\n\n形象比喻：想象你在自动分拣中心——每个分支是一个洞，值或数据“滑”过去，正好合适哪个洞，就进入哪个分支。\n\n----------------------------------------\n\n\n# 二、基础示例：枚举 + match\n\n假设你有一套“宠物”分类：\n\nenum pet {\n    cat,\n    dog,\n    rabbit,\n}\n\nfn describe(p: pet) -> &\'static str {\n    match p {\n        pet::cat => "你抓到了一只喵喵～",\n        pet::dog => "汪汪！一只g狗！",\n        pet::rabbit => "蹦蹦的兔兔在这里~",\n    }\n}\n\nfn main() {\n    let p = pet::rabbit;\n    println!("{}", describe(p));\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * match p 把 p 的状态拿来对比标签；\n * 每个 => 后是该分支的处理结果；\n * 你必须写全 cat、dog、rabbit 三种，否则编译不通过。\n\n\n# 三、多行分支写法\n\n有时候分支逻辑不止一个动作，比如还要打印日志：\n\nfn count_pet(p: pet) -> u32 {\n    match p {\n        pet::cat => {\n            println!("统计：捕获了一只猫咪");\n            4\n        }\n        pet::dog => {\n            println!("统计：捕获了一只狗狗");\n            3\n        }\n        pet::rabbit => {\n            println!("统计：兔兔跑得快");\n            2\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * 分支代码块里可以写一堆逻辑；\n * 最后一行是被 return 的“值”。\n\n----------------------------------------\n\n\n# 四、为什么 match 更靠谱？\n\n * 必须覆盖所有可能值（穷尽检查），少了一个分支直接编译报错。\n * 结构清晰，各个分支整齐排列，读着更舒服。\n * 灵活表达，以后你会看到它能和复杂模式结合使用——简直是流程控制的王牌工具doc.rust-lang.org。\n\n----------------------------------------\n\n\n# 五、换个例子：辨识数字范围\n\n假如你写个函数，根据数字区间给出评价：\n\nfn rate(num: i32) -> &\'static str {\n    match num {\n        0 => "零，不动弹",\n        1..=5 => "小于等于五",\n        6..=10 => "介于六和十之间",\n        _ => "大于十",\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 1..=5 表示从 1 到 5（包含 5）；\n * _ 是“通配符”，匹配所有剩下的数。\n\n这也体现了 match 的强大：区间、默认值一并搞定，写起来简洁又醒目。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"13.Rust 的语法糖 - if let",frontmatter:{title:"13.Rust 的语法糖 - if let",date:"2025-08-25T21:00:00.000Z",permalink:"/pages/Rust_13/"},regularPath:"/02.Rust/13.Rust%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96-iflet.html",relativePath:"02.Rust/13.Rust的语法糖-iflet.md",key:"v-1edcd662",path:"/pages/Rust_13/",headers:[{level:2,title:"一、if let 是个啥？",slug:"一、if-let-是个啥",normalizedTitle:"一、if let 是个啥？",charIndex:25},{level:2,title:"二、举个例子：盒子开宝藏",slug:"二、举个例子-盒子开宝藏",normalizedTitle:"二、举个例子：盒子开宝藏",charIndex:204},{level:2,title:"三、Option 与 if let",slug:"三、option-与-if-let",normalizedTitle:"三、option 与 if let",charIndex:673},{level:2,title:"四、还能配合 else",slug:"四、还能配合-else",normalizedTitle:"四、还能配合 else",charIndex:990},{level:2,title:"五、什么时候用 if let，什么时候用 match？",slug:"五、什么时候用-if-let-什么时候用-match",normalizedTitle:"五、什么时候用 if let，什么时候用 match？",charIndex:1277},{level:2,title:"六、脑洞一下",slug:"六、脑洞一下",normalizedTitle:"六、脑洞一下",charIndex:1458}],headersStr:"一、if let 是个啥？ 二、举个例子：盒子开宝藏 三、Option 与 if let 四、还能配合 else 五、什么时候用 if let，什么时候用 match？ 六、脑洞一下",content:'# Rust 的语法糖 - if let\n\n\n# 一、if let 是个啥？\n\n在学习 match 的时候，你可能觉得它有点啰嗦：\n有时候我只关心一个分支，结果写一大堆 _ => ()，又长又丑。\n\n这时候，Rust 贴心地给你塞了一个小糖果：if let。\n它其实就是 “只关注一个模式的 match” 的缩写。\n\n----------------------------------------\n\n\n# 二、举个例子：盒子开宝藏\n\n假设我们有个神秘的盒子，它可能藏着一个数字宝藏，也可能什么都没有：\n\nenum Boxed {\n    Treasure(i32),\n    Empty,\n}\n\nfn main() {\n    let my_box = Boxed::Treasure(42);\n\n    // 只关心有宝藏的情况\n    if let Boxed::Treasure(v) = my_box {\n        println!("我发现了宝藏，价值 {}!", v);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如果写成 match 的话呢？\n\nmatch my_box {\n    Boxed::Treasure(v) => println!("我发现了宝藏，价值 {}!", v),\n    _ => (),\n}\n\n\n1\n2\n3\n4\n\n\n看出来没？if let 就是上面这坨的简洁版。\n\n----------------------------------------\n\n\n# 三、Option 与 if let\n\nOption 是 Rust 里常见的枚举，代表“可能有值，可能没有值”。 假设我们想要在有值的时候处理一下：\n\nfn main() {\n    let maybe_num = Some(10);\n\n    if let Some(x) = maybe_num {\n        println!("有数字！它是 {}", x);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n相当于只关心 Some，而对 None 不想管。 如果用 match，就得多写一行 None => ()，显得很啰嗦。\n\n----------------------------------------\n\n\n# 四、还能配合 else\n\nif let 还能带个 else，就像普通 if 一样：\n\nfn main() {\n    let maybe_name = None;\n\n    if let Some(name) = maybe_name {\n        println!("你好, {}", name);\n    } else {\n        println!("没有名字，只能叫你匿名侠了！");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n是不是很优雅？\n\n----------------------------------------\n\n\n# 五、什么时候用 if let，什么时候用 match？\n\n * 如果你只关心一种情况，if let 更简洁。\n * 如果你需要覆盖所有可能，必须用 match，这样编译器能帮你检查穷举。\n\n一句话总结：\n\n> if let 是 match 的快捷写法，适合偷懒的时候。\n\n----------------------------------------\n\n\n# 六、脑洞一下\n\n你可以把 if let 理解为一种“有条件的解锁”：\n\n * 如果钥匙对得上（模式匹配成功），就开门干活；\n * 如果钥匙不对（匹配失败），就悄悄走开，不打扰别人。\n\n这，就是 Rust 给我们的小小语法糖。',normalizedContent:'# rust 的语法糖 - if let\n\n\n# 一、if let 是个啥？\n\n在学习 match 的时候，你可能觉得它有点啰嗦：\n有时候我只关心一个分支，结果写一大堆 _ => ()，又长又丑。\n\n这时候，rust 贴心地给你塞了一个小糖果：if let。\n它其实就是 “只关注一个模式的 match” 的缩写。\n\n----------------------------------------\n\n\n# 二、举个例子：盒子开宝藏\n\n假设我们有个神秘的盒子，它可能藏着一个数字宝藏，也可能什么都没有：\n\nenum boxed {\n    treasure(i32),\n    empty,\n}\n\nfn main() {\n    let my_box = boxed::treasure(42);\n\n    // 只关心有宝藏的情况\n    if let boxed::treasure(v) = my_box {\n        println!("我发现了宝藏，价值 {}!", v);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如果写成 match 的话呢？\n\nmatch my_box {\n    boxed::treasure(v) => println!("我发现了宝藏，价值 {}!", v),\n    _ => (),\n}\n\n\n1\n2\n3\n4\n\n\n看出来没？if let 就是上面这坨的简洁版。\n\n----------------------------------------\n\n\n# 三、option 与 if let\n\noption 是 rust 里常见的枚举，代表“可能有值，可能没有值”。 假设我们想要在有值的时候处理一下：\n\nfn main() {\n    let maybe_num = some(10);\n\n    if let some(x) = maybe_num {\n        println!("有数字！它是 {}", x);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n相当于只关心 some，而对 none 不想管。 如果用 match，就得多写一行 none => ()，显得很啰嗦。\n\n----------------------------------------\n\n\n# 四、还能配合 else\n\nif let 还能带个 else，就像普通 if 一样：\n\nfn main() {\n    let maybe_name = none;\n\n    if let some(name) = maybe_name {\n        println!("你好, {}", name);\n    } else {\n        println!("没有名字，只能叫你匿名侠了！");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n是不是很优雅？\n\n----------------------------------------\n\n\n# 五、什么时候用 if let，什么时候用 match？\n\n * 如果你只关心一种情况，if let 更简洁。\n * 如果你需要覆盖所有可能，必须用 match，这样编译器能帮你检查穷举。\n\n一句话总结：\n\n> if let 是 match 的快捷写法，适合偷懒的时候。\n\n----------------------------------------\n\n\n# 六、脑洞一下\n\n你可以把 if let 理解为一种“有条件的解锁”：\n\n * 如果钥匙对得上（模式匹配成功），就开门干活；\n * 如果钥匙不对（匹配失败），就悄悄走开，不打扰别人。\n\n这，就是 rust 给我们的小小语法糖。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"11.Rust的枚举",frontmatter:{title:"11.Rust的枚举",date:"2025-08-23T20:00:00.000Z",permalink:"/pages/Rust_11/"},regularPath:"/02.Rust/11.Rust%E7%9A%84%E6%9E%9A%E4%B8%BE.html",relativePath:"02.Rust/11.Rust的枚举.md",key:"v-24399f35",path:"/pages/Rust_11/",headers:[{level:2,title:"一、枚举（Enum）是啥？",slug:"一、枚举-enum-是啥",normalizedTitle:"一、枚举（enum）是啥？",charIndex:173},{level:2,title:"二、枚举还能带点“行李”",slug:"二、枚举还能带点-行李",normalizedTitle:"二、枚举还能带点“行李”",charIndex:417},{level:2,title:"三、Rust 内置的明星枚举：Option",slug:"三、rust-内置的明星枚举-option",normalizedTitle:"三、rust 内置的明星枚举：option",charIndex:795},{level:2,title:"四、为什么 Option 比 null 更靠谱？",slug:"四、为什么-option-比-null-更靠谱",normalizedTitle:"四、为什么 option 比 null 更靠谱？",charIndex:1210}],headersStr:"一、枚举（Enum）是啥？ 二、枚举还能带点“行李” 三、Rust 内置的明星枚举：Option 四、为什么 Option 比 null 更靠谱？",content:'# Rust 的枚举（Enum）与 Option：给数据贴标签的艺术\n\n在编程世界里，有时候我们希望数据不只是个值，还要有个“身份”或“状态”。\nRust 里就有一种强力武器：枚举（Enum）。它能把有限的几种可能性收拢起来，编译器帮你保证不会出岔子。\n\n----------------------------------------\n\n\n# 一、枚举（Enum）是啥？\n\n枚举就是一类“只能在有限选项中挑一个”的数据类型。\n想象一下，你有个状态机：红灯、绿灯、黄灯。我们可以这样写：\n\nenum TrafficLight {\n    Red,\n    Yellow,\n    Green,\n}\n\n\n1\n2\n3\n4\n5\n\n\n当我们定义一个变量：\n\nlet light = TrafficLight::Red;\n\n\n1\n\n\n这就表示当前信号灯是“红色”。 优势是什么？——它不可能变成什么 "blue" 之类莫名其妙的状态。\n\n\n# 二、枚举还能带点“行李”\n\n枚举不仅能表示“是哪一类”，还可以顺便带上额外数据。 举个例子：我们做一个消息系统，有三种可能：\n\n * 空消息\n * 文本消息\n * 坐标消息\n\n在 Rust 里可以这么写：\n\nenum Message {\n    Empty,\n    Text(String),\n    Position(i32, i32),\n}\n\n\n1\n2\n3\n4\n5\n\n\n使用的时候：\n\nlet m1 = Message::Empty;\nlet m2 = Message::Text(String::from("Hello!"));\nlet m3 = Message::Position(10, 20);\n\n\n1\n2\n3\n\n\n这样数据和分类合体，逻辑更清楚。\n\n----------------------------------------\n\n\n# 三、Rust 内置的明星枚举：Option\n\n在别的语言里，如果某个值“可能没有”，通常会用 null。 但是 Rust 没有 null，而是用 Option 来表达“有或没有”。\n\nenum Option<T> {\n    Some(T),\n    None,\n}\n\n\n1\n2\n3\n4\n\n\n这就是 Rust 标准库里 Option 的定义。\n\n * Some(T)：表示里面有一个值 T；\n * None：表示啥也没有。\n\n用例子感受一下：\n\nlet some_number = Some(5);\nlet some_text = Some("Hello");\nlet no_value: Option<i32> = None;\n\n\n1\n2\n3\n\n\n这里的 some_number 就是“有值 5”，no_value 就是“啥都没有”。\n\n----------------------------------------\n\n\n# 四、为什么 Option 比 null 更靠谱？\n\n * 在 Rust 里，Option 是一个显式的类型，你在写代码时必须处理“有值”和“没值”的情况；\n * 它避免了像其他语言那样，一不小心解引用 null 就崩溃的尴尬。\n\n比如说： 你写了一个函数，它要么找到某个元素返回它，要么啥也找不到。 返回 Option<T> 就再合适不过。\n\nfn find_index(arr: &[i32], target: i32) -> Option<usize> {\n    for (i, &item) in arr.iter().enumerate() {\n        if item == target {\n            return Some(i);\n        }\n    }\n    None\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这样调用：\n\nlet nums = vec![10, 20, 30];\nlet pos = find_index(&nums, 20);\n\n\n1\n2\n\n\n这里 pos 的类型是 Option<usize>，要么 Some(1)，要么 None。',normalizedContent:'# rust 的枚举（enum）与 option：给数据贴标签的艺术\n\n在编程世界里，有时候我们希望数据不只是个值，还要有个“身份”或“状态”。\nrust 里就有一种强力武器：枚举（enum）。它能把有限的几种可能性收拢起来，编译器帮你保证不会出岔子。\n\n----------------------------------------\n\n\n# 一、枚举（enum）是啥？\n\n枚举就是一类“只能在有限选项中挑一个”的数据类型。\n想象一下，你有个状态机：红灯、绿灯、黄灯。我们可以这样写：\n\nenum trafficlight {\n    red,\n    yellow,\n    green,\n}\n\n\n1\n2\n3\n4\n5\n\n\n当我们定义一个变量：\n\nlet light = trafficlight::red;\n\n\n1\n\n\n这就表示当前信号灯是“红色”。 优势是什么？——它不可能变成什么 "blue" 之类莫名其妙的状态。\n\n\n# 二、枚举还能带点“行李”\n\n枚举不仅能表示“是哪一类”，还可以顺便带上额外数据。 举个例子：我们做一个消息系统，有三种可能：\n\n * 空消息\n * 文本消息\n * 坐标消息\n\n在 rust 里可以这么写：\n\nenum message {\n    empty,\n    text(string),\n    position(i32, i32),\n}\n\n\n1\n2\n3\n4\n5\n\n\n使用的时候：\n\nlet m1 = message::empty;\nlet m2 = message::text(string::from("hello!"));\nlet m3 = message::position(10, 20);\n\n\n1\n2\n3\n\n\n这样数据和分类合体，逻辑更清楚。\n\n----------------------------------------\n\n\n# 三、rust 内置的明星枚举：option\n\n在别的语言里，如果某个值“可能没有”，通常会用 null。 但是 rust 没有 null，而是用 option 来表达“有或没有”。\n\nenum option<t> {\n    some(t),\n    none,\n}\n\n\n1\n2\n3\n4\n\n\n这就是 rust 标准库里 option 的定义。\n\n * some(t)：表示里面有一个值 t；\n * none：表示啥也没有。\n\n用例子感受一下：\n\nlet some_number = some(5);\nlet some_text = some("hello");\nlet no_value: option<i32> = none;\n\n\n1\n2\n3\n\n\n这里的 some_number 就是“有值 5”，no_value 就是“啥都没有”。\n\n----------------------------------------\n\n\n# 四、为什么 option 比 null 更靠谱？\n\n * 在 rust 里，option 是一个显式的类型，你在写代码时必须处理“有值”和“没值”的情况；\n * 它避免了像其他语言那样，一不小心解引用 null 就崩溃的尴尬。\n\n比如说： 你写了一个函数，它要么找到某个元素返回它，要么啥也找不到。 返回 option<t> 就再合适不过。\n\nfn find_index(arr: &[i32], target: i32) -> option<usize> {\n    for (i, &item) in arr.iter().enumerate() {\n        if item == target {\n            return some(i);\n        }\n    }\n    none\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这样调用：\n\nlet nums = vec![10, 20, 30];\nlet pos = find_index(&nums, 20);\n\n\n1\n2\n\n\n这里 pos 的类型是 option<usize>，要么 some(1)，要么 none。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"14.Rust的模块系统",frontmatter:{title:"14.Rust的模块系统",date:"2025-08-27T22:00:00.000Z",permalink:"/pages/Rust_14/"},regularPath:"/02.Rust/14.Rust%E7%9A%84%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.html",relativePath:"02.Rust/14.Rust的模块系统.md",key:"v-7fc5fd71",path:"/pages/Rust_14/",headers:[{level:2,title:"一、包（Package）和 Crate",slug:"一、包-package-和-crate",normalizedTitle:"一、包（package）和 crate",charIndex:253},{level:2,title:"二、模块（mod）和可见性",slug:"二、模块-mod-和可见性",normalizedTitle:"二、模块（mod）和可见性",charIndex:645},{level:2,title:"三、路径（Path）",slug:"三、路径-path",normalizedTitle:"三、路径（path）",charIndex:1030},{level:2,title:"四、use 简化路径",slug:"四、use-简化路径",normalizedTitle:"四、use 简化路径",charIndex:1382},{level:2,title:"五、模块拆分到文件",slug:"五、模块拆分到文件",normalizedTitle:"五、模块拆分到文件",charIndex:1749}],headersStr:"一、包（Package）和 Crate 二、模块（mod）和可见性 三、路径（Path） 四、use 简化路径 五、模块拆分到文件",content:'# Rust 的模块系统\n\n在 Rust 里，项目不可能一直放在一个文件里，越写越多肯定会乱套。 所以语言本身提供了一整套“组织工具”来帮你：\n\n * 包（Package）和 Crate：整体的管理和构建单位\n * 模块（Module）：代码的逻辑分块\n * 路径（Path）：告诉编译器去哪儿找你写的东西\n * use：给路径起别名、简化访问\n * 分文件管理：让文件夹结构和模块结构对齐\n\n下面我们逐一来看。\n\n----------------------------------------\n\n\n# 一、包（Package）和 Crate\n\n * Crate 就是 Rust 的最小编译单元。\n   * 如果有 main 函数，它就是 二进制 Crate，能直接运行。\n   * 如果没有 main，只是提供功能，那就是 库 Crate，只能被别人引用。\n * Package 是一个或多个 Crate 的集合，它里面有 Cargo.toml 文件来说明怎么构建。\n   * 一个包最多只能有 一个库 Crate。\n   * 但可以有多个二进制 Crate（放在 src/bin/ 目录里）。\n\n👉 举个栗子：\n\nmy_project/\n ├─ Cargo.toml   # 包的配置\n └─ src/\n     └─ main.rs  # 默认的二进制 crate\n\n\n1\n2\n3\n4\n\n\n----------------------------------------\n\n\n# 二、模块（mod）和可见性\n\n随着项目增长，我们会用 模块（module）把代码分块。 写法是这样的：\n\nmod network {\n    fn connect() {\n        println!("connected!");\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\n这里的 network 就是一个模块。 要注意，模块里的东西默认是私有的，外面用不了。\n\n想让外面能用，就要加 pub：\n\nmod network {\n    pub fn connect() {\n        println!("connected!");\n    }\n}\n\nfn main() {\n    network::connect();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n----------------------------------------\n\n\n# 三、路径（Path）\n\n如果模块越来越多，就要学会用路径来访问。路径分两种：\n\n * 绝对路径：从 crate 根开始，比如 crate::network::connect\n * 相对路径：从当前位置开始，比如 super:: 往上，self:: 当前模块\n\nmod network {\n    pub fn connect() {}\n}\n\nfn main() {\n    // 绝对路径\n    crate::network::connect();\n\n    // 相对路径（在 main.rs 顶层）\n    network::connect();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n----------------------------------------\n\n\n# 四、use 简化路径\n\n如果你老是写 crate::network::connect，会很烦。 这时可以用 use：\n\nmod network {\n    pub fn connect() {}\n}\n\nuse crate::network::connect;\n\nfn main() {\n    connect();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n还可以给名字起别名：\n\nuse crate::network::connect as net_connect;\n\nfn main() {\n    net_connect();\n}\n\n\n1\n2\n3\n4\n5\n\n\n要让别人也能用这个简化路径，可以写 pub use。这叫“重导出”。\n\n----------------------------------------\n\n\n# 五、模块拆分到文件\n\n当模块越来越大，可以把它们分到不同的文件。\n\n假设你写了 mod network;，Rust 会去找：\n\n 1. network.rs 文件\n 2. 或者 network/mod.rs 文件\n\n比如目录长这样：\n\nsrc/\n ├─ main.rs\n └─ network.rs\n\n\n1\n2\n3\n\n\nmain.rs 里写：\n\nmod network;\n\nfn main() {\n    network::connect();\n}\n\n\n1\n2\n3\n4\n5\n\n\nnetwork.rs 文件里写：\n\npub fn connect() {\n    println!("connected!");\n}\n\n\n1\n2\n3\n\n\n这样，模块和文件夹结构就能对上了，阅读起来很清晰。',normalizedContent:'# rust 的模块系统\n\n在 rust 里，项目不可能一直放在一个文件里，越写越多肯定会乱套。 所以语言本身提供了一整套“组织工具”来帮你：\n\n * 包（package）和 crate：整体的管理和构建单位\n * 模块（module）：代码的逻辑分块\n * 路径（path）：告诉编译器去哪儿找你写的东西\n * use：给路径起别名、简化访问\n * 分文件管理：让文件夹结构和模块结构对齐\n\n下面我们逐一来看。\n\n----------------------------------------\n\n\n# 一、包（package）和 crate\n\n * crate 就是 rust 的最小编译单元。\n   * 如果有 main 函数，它就是 二进制 crate，能直接运行。\n   * 如果没有 main，只是提供功能，那就是 库 crate，只能被别人引用。\n * package 是一个或多个 crate 的集合，它里面有 cargo.toml 文件来说明怎么构建。\n   * 一个包最多只能有 一个库 crate。\n   * 但可以有多个二进制 crate（放在 src/bin/ 目录里）。\n\n👉 举个栗子：\n\nmy_project/\n ├─ cargo.toml   # 包的配置\n └─ src/\n     └─ main.rs  # 默认的二进制 crate\n\n\n1\n2\n3\n4\n\n\n----------------------------------------\n\n\n# 二、模块（mod）和可见性\n\n随着项目增长，我们会用 模块（module）把代码分块。 写法是这样的：\n\nmod network {\n    fn connect() {\n        println!("connected!");\n    }\n}\n\n\n1\n2\n3\n4\n5\n\n\n这里的 network 就是一个模块。 要注意，模块里的东西默认是私有的，外面用不了。\n\n想让外面能用，就要加 pub：\n\nmod network {\n    pub fn connect() {\n        println!("connected!");\n    }\n}\n\nfn main() {\n    network::connect();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n----------------------------------------\n\n\n# 三、路径（path）\n\n如果模块越来越多，就要学会用路径来访问。路径分两种：\n\n * 绝对路径：从 crate 根开始，比如 crate::network::connect\n * 相对路径：从当前位置开始，比如 super:: 往上，self:: 当前模块\n\nmod network {\n    pub fn connect() {}\n}\n\nfn main() {\n    // 绝对路径\n    crate::network::connect();\n\n    // 相对路径（在 main.rs 顶层）\n    network::connect();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n----------------------------------------\n\n\n# 四、use 简化路径\n\n如果你老是写 crate::network::connect，会很烦。 这时可以用 use：\n\nmod network {\n    pub fn connect() {}\n}\n\nuse crate::network::connect;\n\nfn main() {\n    connect();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n还可以给名字起别名：\n\nuse crate::network::connect as net_connect;\n\nfn main() {\n    net_connect();\n}\n\n\n1\n2\n3\n4\n5\n\n\n要让别人也能用这个简化路径，可以写 pub use。这叫“重导出”。\n\n----------------------------------------\n\n\n# 五、模块拆分到文件\n\n当模块越来越大，可以把它们分到不同的文件。\n\n假设你写了 mod network;，rust 会去找：\n\n 1. network.rs 文件\n 2. 或者 network/mod.rs 文件\n\n比如目录长这样：\n\nsrc/\n ├─ main.rs\n └─ network.rs\n\n\n1\n2\n3\n\n\nmain.rs 里写：\n\nmod network;\n\nfn main() {\n    network::connect();\n}\n\n\n1\n2\n3\n4\n5\n\n\nnetwork.rs 文件里写：\n\npub fn connect() {\n    println!("connected!");\n}\n\n\n1\n2\n3\n\n\n这样，模块和文件夹结构就能对上了，阅读起来很清晰。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"16.Rust的String类型基本原理",frontmatter:{title:"16.Rust的String类型基本原理",date:"2025-08-28T23:00:00.000Z",permalink:"/pages/Rust_16/"},regularPath:"/02.Rust/16.Rust%E7%9A%84String%E7%B1%BB%E5%9E%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html",relativePath:"02.Rust/16.Rust的String类型基本原理.md",key:"v-73af1190",path:"/pages/Rust_16/",headers:[{level:2,title:"一、String 是什么？",slug:"一、string-是什么",normalizedTitle:"一、string 是什么？",charIndex:178},{level:2,title:"二、怎么创建 String？",slug:"二、怎么创建-string",normalizedTitle:"二、怎么创建 string？",charIndex:378},{level:2,title:"三、如何更新 String？",slug:"三、如何更新-string",normalizedTitle:"三、如何更新 string？",charIndex:572},{level:2,title:"四、拼接要当心",slug:"四、拼接要当心",normalizedTitle:"四、拼接要当心",charIndex:793},{level:2,title:"五、为什么不能像索引数组那样索引 String？",slug:"五、为什么不能像索引数组那样索引-string",normalizedTitle:"五、为什么不能像索引数组那样索引 string？",charIndex:1130},{level:2,title:"六、如果你真的想访问字符怎么办？",slug:"六、如果你真的想访问字符怎么办",normalizedTitle:"六、如果你真的想访问字符怎么办？",charIndex:1397}],headersStr:"一、String 是什么？ 二、怎么创建 String？ 三、如何更新 String？ 四、拼接要当心 五、为什么不能像索引数组那样索引 String？ 六、如果你真的想访问字符怎么办？",content:'# Rust 的 String 类型基础：为什么它既强大又狡猾？\n\nRust 的 String 可变又可增长，背后是 UTF-8，加上 Rust 注重安全，这玩意看似简单实则复杂。掌握它，你就能像撸 cursor 一样骄傲地“管住”自己的字符串，工程师体验极佳。\n\n----------------------------------------\n\n\n# 一、String 是什么？\n\n * 核心语言只有一种“字符串 slice”类型：str，只能以 &str 的形式出现。\n * String 是标准库提供的动态、可变、拥有所有权的 UTF-8 字符串，底层其实就是一个 Vec<u8>。\n * 换句话说：String = 动态字节数组 + UTF-8 智能。\n\n----------------------------------------\n\n\n# 二、怎么创建 String？\n\nlet mut s = String::new(); // 空字符串\n\nlet s = "hello".to_string();            // 从 &str 转换\nlet s = String::from("hello, world");   // 一样的效果\n\n\n\n1\n2\n3\n4\n5\n\n\n这两种方式功能相同，喜欢风格选一种就好。\n\n\n# 三、如何更新 String？\n\n你想给它加内容，可以这么干：\n\nlet mut s = String::from("foo");\ns.push_str("bar");  // 加字符串 slice\ns.push(\'!\');        // 加一个字符\n\n\n1\n2\n3\n\n\n你看这是在操作 Vec<u8>，只有你想追加时才真的改底层，效率杠杠的。\n\n----------------------------------------\n\n\n# 四、拼接要当心\n\n拼字符串挺常见，但写得不小心就容易踩坑：\n\nlet a = String::from("Hello, ");\nlet b = String::from("world!");\nlet c = a + &b; // a 被移动掉，之后不能再用 a 了\n\n\n1\n2\n3\n\n\n别忘了加 &b，Rust 会把 &String 自动转成 &str（叫 deref coercion），但 a 会被消费掉 —— 这是效率和所有权设计的结果。\n\n写得更清晰的方法是：\n\nlet c = format!("{a}-{b}-{a2}");\n\n\n1\n\n\n这样既不会动所有权，也更直观。\n\n----------------------------------------\n\n\n# 五、为什么不能像索引数组那样索引 String？\n\n尝试下面代码，你会碰壁：\n\nlet s = String::from("你好");\nlet c = s[0]; // 直接索引会编译报错\n\n\n1\n2\n\n\n原因在于：\n\n * 字符不是整齐排列的，每个字符在 UTF-8 下字节长度不定；\n * Rust 的索引期望 O(1) 访问，但为了找到一个字符，必须遍历到相应字节 —— 没法保证常数时间；\n * 为防出 bug，索引被禁止写入内核。\n\n----------------------------------------\n\n\n# 六、如果你真的想访问字符怎么办？\n\n明确告诉 Rust：我是按字符访问：\n\nfor c in "你好".chars() {\n    println!("{c}");\n}\n\n\n1\n2\n3\n\n\n如果你想看字节值：\n\nfor b in "你好".bytes() {\n    println!("{b}");\n}\n\n\n1\n2\n3\n\n\n两种表达方式清晰又安全。',normalizedContent:'# rust 的 string 类型基础：为什么它既强大又狡猾？\n\nrust 的 string 可变又可增长，背后是 utf-8，加上 rust 注重安全，这玩意看似简单实则复杂。掌握它，你就能像撸 cursor 一样骄傲地“管住”自己的字符串，工程师体验极佳。\n\n----------------------------------------\n\n\n# 一、string 是什么？\n\n * 核心语言只有一种“字符串 slice”类型：str，只能以 &str 的形式出现。\n * string 是标准库提供的动态、可变、拥有所有权的 utf-8 字符串，底层其实就是一个 vec<u8>。\n * 换句话说：string = 动态字节数组 + utf-8 智能。\n\n----------------------------------------\n\n\n# 二、怎么创建 string？\n\nlet mut s = string::new(); // 空字符串\n\nlet s = "hello".to_string();            // 从 &str 转换\nlet s = string::from("hello, world");   // 一样的效果\n\n\n\n1\n2\n3\n4\n5\n\n\n这两种方式功能相同，喜欢风格选一种就好。\n\n\n# 三、如何更新 string？\n\n你想给它加内容，可以这么干：\n\nlet mut s = string::from("foo");\ns.push_str("bar");  // 加字符串 slice\ns.push(\'!\');        // 加一个字符\n\n\n1\n2\n3\n\n\n你看这是在操作 vec<u8>，只有你想追加时才真的改底层，效率杠杠的。\n\n----------------------------------------\n\n\n# 四、拼接要当心\n\n拼字符串挺常见，但写得不小心就容易踩坑：\n\nlet a = string::from("hello, ");\nlet b = string::from("world!");\nlet c = a + &b; // a 被移动掉，之后不能再用 a 了\n\n\n1\n2\n3\n\n\n别忘了加 &b，rust 会把 &string 自动转成 &str（叫 deref coercion），但 a 会被消费掉 —— 这是效率和所有权设计的结果。\n\n写得更清晰的方法是：\n\nlet c = format!("{a}-{b}-{a2}");\n\n\n1\n\n\n这样既不会动所有权，也更直观。\n\n----------------------------------------\n\n\n# 五、为什么不能像索引数组那样索引 string？\n\n尝试下面代码，你会碰壁：\n\nlet s = string::from("你好");\nlet c = s[0]; // 直接索引会编译报错\n\n\n1\n2\n\n\n原因在于：\n\n * 字符不是整齐排列的，每个字符在 utf-8 下字节长度不定；\n * rust 的索引期望 o(1) 访问，但为了找到一个字符，必须遍历到相应字节 —— 没法保证常数时间；\n * 为防出 bug，索引被禁止写入内核。\n\n----------------------------------------\n\n\n# 六、如果你真的想访问字符怎么办？\n\n明确告诉 rust：我是按字符访问：\n\nfor c in "你好".chars() {\n    println!("{c}");\n}\n\n\n1\n2\n3\n\n\n如果你想看字节值：\n\nfor b in "你好".bytes() {\n    println!("{b}");\n}\n\n\n1\n2\n3\n\n\n两种表达方式清晰又安全。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"17.Rust的HashMap",frontmatter:{title:"17.Rust的HashMap",date:"2025-08-28T23:30:00.000Z",permalink:"/pages/Rust_17/"},regularPath:"/02.Rust/17.Rust%E7%9A%84HashMap.html",relativePath:"02.Rust/17.Rust的HashMap.md",key:"v-7ba2c0e8",path:"/pages/Rust_17/",headers:[{level:2,title:"一、什么是 HashMap？",slug:"一、什么是-hashmap",normalizedTitle:"一、什么是 hashmap？",charIndex:145},{level:2,title:"二、取值和遍历",slug:"二、取值和遍历",normalizedTitle:"二、取值和遍历",charIndex:486},{level:2,title:"三、更新 HashMap",slug:"三、更新-hashmap",normalizedTitle:"三、更新 hashmap",charIndex:806},{level:3,title:"1. 直接覆盖",slug:"_1-直接覆盖",normalizedTitle:"1. 直接覆盖",charIndex:850},{level:3,title:"2. 只在键不存在时插入",slug:"_2-只在键不存在时插入",normalizedTitle:"2. 只在键不存在时插入",charIndex:924},{level:3,title:"3. 根据旧值更新",slug:"_3-根据旧值更新",normalizedTitle:"3. 根据旧值更新",charIndex:1044},{level:2,title:"四、关于所有权的细节",slug:"四、关于所有权的细节",normalizedTitle:"四、关于所有权的细节",charIndex:1414},{level:2,title:"五、总结",slug:"五、总结",normalizedTitle:"五、总结",charIndex:1784}],headersStr:"一、什么是 HashMap？ 二、取值和遍历 三、更新 HashMap 1. 直接覆盖 2. 只在键不存在时插入 3. 根据旧值更新 四、关于所有权的细节 五、总结",content:'# Rust 的 HashMap：键值对的老管家\n\nRust 的集合里，Vec 像是有序列表，String 是字符串专家，而 HashMap 就是大管家：负责把键和对应的值捆在一起，方便快速查找。\n\n----------------------------------------\n\n\n# 一、什么是 HashMap？\n\n * 本质：一个存储 键–值对 的集合。\n * 键（Key）：可以是任何实现了 Eq 和 Hash 的类型（整数、字符串常用）。\n * 值（Value）：可以是任意类型。\n * 查找效率：理论上 O(1)，也就是非常快。\n\nuse std::collections::HashMap;\n\nfn main() {\n    let mut scores = HashMap::new();\n    scores.insert(String::from("Blue"), 10);\n    scores.insert(String::from("Red"), 50);\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这段代码就建了一个球队分数表。\n\n\n# 二、取值和遍历\n\n你可以通过 get 来获取：\n\nlet team_name = String::from("Blue");\nlet score = scores.get(&team_name);\nprintln!("{:?}", score); // Some(10)\n\n\n1\n2\n3\n\n\nget 返回的是 Option<&V>，所以要么是 Some(值)，要么是 None。\n\n遍历所有键值对：\n\nfor (key, value) in &scores {\n    println!("{key}: {value}");\n}\n\n\n1\n2\n3\n\n\n----------------------------------------\n\n\n# 三、更新 HashMap\n\nHashMap 里的值可以覆盖，也可以按规则插入。\n\n\n# 1. 直接覆盖\n\nscores.insert(String::from("Blue"), 25); // 原来 10 变成 25\n\n\n1\n\n\n\n# 2. 只在键不存在时插入\n\n用 .entry() 方法：\n\nscores.entry(String::from("Yellow")).or_insert(30);\n\n\n1\n\n\n如果 Yellow 已经有分数，不会动；没有才会插入。\n\n\n# 3. 根据旧值更新\n\nlet text = "hello world wonderful world";\n\nlet mut map = HashMap::new();\nfor word in text.split_whitespace() {\n    let count = map.entry(word).or_insert(0);\n    *count += 1;\n}\nprintln!("{map:?}");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这个例子就是 统计词频：\n\n * entry(word) 先查看 key 是否存在；\n * .or_insert(0) 表示如果不存在就插入 0；\n * 然后 *count += 1 更新。\n\n----------------------------------------\n\n\n# 四、关于所有权的细节\n\n * 如果你把 String 当作 key 或 value 插入 HashMap，它的所有权会被移动进 Map。\n * 如果你只想借用，就要用引用类型。\n\nlet field_name = String::from("Favorite color");\nlet field_value = String::from("Blue");\n\nlet mut map = HashMap::new();\nmap.insert(field_name, field_value);\n\n// field_name, field_value 已经失效\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n所以要么用 .clone()，要么一开始就存引用。\n\n----------------------------------------\n\n\n# 五、总结\n\n * HashMap 用来存 键值对，快速查找，查不到返回 None。\n * 常用操作：insert、get、entry().or_insert()。\n * 注意所有权问题，插进去就不能再直接用了。\n * 适合做配置表、统计、缓存等。\n\nRust 的集合三兄弟，到这儿算齐活了：\n\n * Vec 管列表，\n * String 管文本，\n * HashMap 管键值关系。',normalizedContent:'# rust 的 hashmap：键值对的老管家\n\nrust 的集合里，vec 像是有序列表，string 是字符串专家，而 hashmap 就是大管家：负责把键和对应的值捆在一起，方便快速查找。\n\n----------------------------------------\n\n\n# 一、什么是 hashmap？\n\n * 本质：一个存储 键–值对 的集合。\n * 键（key）：可以是任何实现了 eq 和 hash 的类型（整数、字符串常用）。\n * 值（value）：可以是任意类型。\n * 查找效率：理论上 o(1)，也就是非常快。\n\nuse std::collections::hashmap;\n\nfn main() {\n    let mut scores = hashmap::new();\n    scores.insert(string::from("blue"), 10);\n    scores.insert(string::from("red"), 50);\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这段代码就建了一个球队分数表。\n\n\n# 二、取值和遍历\n\n你可以通过 get 来获取：\n\nlet team_name = string::from("blue");\nlet score = scores.get(&team_name);\nprintln!("{:?}", score); // some(10)\n\n\n1\n2\n3\n\n\nget 返回的是 option<&v>，所以要么是 some(值)，要么是 none。\n\n遍历所有键值对：\n\nfor (key, value) in &scores {\n    println!("{key}: {value}");\n}\n\n\n1\n2\n3\n\n\n----------------------------------------\n\n\n# 三、更新 hashmap\n\nhashmap 里的值可以覆盖，也可以按规则插入。\n\n\n# 1. 直接覆盖\n\nscores.insert(string::from("blue"), 25); // 原来 10 变成 25\n\n\n1\n\n\n\n# 2. 只在键不存在时插入\n\n用 .entry() 方法：\n\nscores.entry(string::from("yellow")).or_insert(30);\n\n\n1\n\n\n如果 yellow 已经有分数，不会动；没有才会插入。\n\n\n# 3. 根据旧值更新\n\nlet text = "hello world wonderful world";\n\nlet mut map = hashmap::new();\nfor word in text.split_whitespace() {\n    let count = map.entry(word).or_insert(0);\n    *count += 1;\n}\nprintln!("{map:?}");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这个例子就是 统计词频：\n\n * entry(word) 先查看 key 是否存在；\n * .or_insert(0) 表示如果不存在就插入 0；\n * 然后 *count += 1 更新。\n\n----------------------------------------\n\n\n# 四、关于所有权的细节\n\n * 如果你把 string 当作 key 或 value 插入 hashmap，它的所有权会被移动进 map。\n * 如果你只想借用，就要用引用类型。\n\nlet field_name = string::from("favorite color");\nlet field_value = string::from("blue");\n\nlet mut map = hashmap::new();\nmap.insert(field_name, field_value);\n\n// field_name, field_value 已经失效\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n所以要么用 .clone()，要么一开始就存引用。\n\n----------------------------------------\n\n\n# 五、总结\n\n * hashmap 用来存 键值对，快速查找，查不到返回 none。\n * 常用操作：insert、get、entry().or_insert()。\n * 注意所有权问题，插进去就不能再直接用了。\n * 适合做配置表、统计、缓存等。\n\nrust 的集合三兄弟，到这儿算齐活了：\n\n * vec 管列表，\n * string 管文本，\n * hashmap 管键值关系。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"18.Rust基础部分的学习总结",frontmatter:{title:"18.Rust基础部分的学习总结",date:"2025-08-28T23:40:00.000Z",permalink:"/pages/Rust_18/"},regularPath:"/02.Rust/18.Rust%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html",relativePath:"02.Rust/18.Rust基础部分的学习总结.md",key:"v-c0694bec",path:"/pages/Rust_18/",headers:[{level:2,title:"一、Rust 的核心设计理念",slug:"一、rust-的核心设计理念",normalizedTitle:"一、rust 的核心设计理念",charIndex:151},{level:2,title:"二、基础语法的构建",slug:"二、基础语法的构建",normalizedTitle:"二、基础语法的构建",charIndex:359},{level:2,title:"三、内存与所有权",slug:"三、内存与所有权",normalizedTitle:"三、内存与所有权",charIndex:613},{level:2,title:"四、结构化数据",slug:"四、结构化数据",normalizedTitle:"四、结构化数据",charIndex:828},{level:2,title:"五、控制流的进阶",slug:"五、控制流的进阶",normalizedTitle:"五、控制流的进阶",charIndex:1057},{level:2,title:"六、项目与模块化",slug:"六、项目与模块化",normalizedTitle:"六、项目与模块化",charIndex:1222},{level:2,title:"七、常用集合",slug:"七、常用集合",normalizedTitle:"七、常用集合",charIndex:1430}],headersStr:"一、Rust 的核心设计理念 二、基础语法的构建 三、内存与所有权 四、结构化数据 五、控制流的进阶 六、项目与模块化 七、常用集合",content:"# Rust基础部分的学习总结\n\nRust 的学习过程有点像「打地基」。一开始可能感觉概念繁多，但走到这里，我们已经把最重要的砖块都搬上来了。这一章，就来对基础部分做一个总结，让整个知识体系在脑子里清晰起来。\n\n----------------------------------------\n\n\n# 一、Rust 的核心设计理念\n\nRust 和 C++ 一样，定位是 系统级语言，但它最大的特点是：\n\n * 所有权 (Ownership)\n * 借用 (Borrowing)\n * 生命周期 (Lifetime)\n\n这三样东西保证了 内存安全，同时又能保持高性能。换句话说，Rust 的学习核心就是搞懂内存管理背后的规则。\n\n----------------------------------------\n\n\n# 二、基础语法的构建\n\nRust 的前半部分主要是语言层面的基本工具：\n\n 1. 变量与可变性：默认不可变，强调安全。\n 2. 函数与表达式：一切皆表达式，返回值灵活。\n 3. 控制流：if / loop / while / for，和其他语言类似。\n 4. 数据类型：标量（整数、浮点、布尔、字符）+ 复合类型（tuple、array）。\n\n到这一步，Rust 和 C、C++、Python 没太大差别，还算友好。\n\n----------------------------------------\n\n\n# 三、内存与所有权\n\nRust 的杀手锏：\n\n * 所有权：每块内存有且只有一个所有者。\n * 借用：可以引用但不能乱改，分为 &T（不可变借用）和 &mut T（可变借用）。\n * 切片 (slice)：在不复制的情况下获取数组或字符串的一部分。\n\n这是 Rust 入门的 第一道坎。不过只要理解了「谁拥有，谁负责释放」，事情就简单了。\n\n----------------------------------------\n\n\n# 四、结构化数据\n\n * 结构体 (struct)：自定义数据类型，像 C 的 struct，但更强大。\n * 枚举 (enum)：不仅能表示有限状态，还能绑定数据，配合 Option 特别常用。\n * 方法 (impl)：给 struct / enum 添加行为，和面向对象有点类似。\n\n这部分是 Rust 的 抽象能力，让你能写出清晰的模型，而不仅仅是函数堆砌。\n\n----------------------------------------\n\n\n# 五、控制流的进阶\n\n * match：强大的模式匹配，能安全地覆盖所有可能情况。\n * if let：match 的简化版，常用于处理 Option 或 Result。\n\nRust 的控制流强调「穷举」和「显式」，避免遗漏，提升可靠性。\n\n----------------------------------------\n\n\n# 六、项目与模块化\n\n * Package / Crate：Rust 的编译单元，Cargo 工具管理。\n * 模块 (mod)：代码组织方式，控制作用域和可见性。\n * use / pub：路径引入和可见性控制。\n * 多文件模块：工程化项目必备。\n\n这让 Rust 项目能自然扩展，从小脚本到大型系统都能 hold 住。\n\n----------------------------------------\n\n\n# 七、常用集合\n\nRust 标准库提供了常见的数据容器：\n\n 1. Vec：动态数组，最常用。\n 2. String：UTF-8 可变字符串，本质上也是字节向量。\n 3. HashMap<K, V>：键值对存储。\n\n这三样几乎能覆盖大多数日常编程需求。",normalizedContent:"# rust基础部分的学习总结\n\nrust 的学习过程有点像「打地基」。一开始可能感觉概念繁多，但走到这里，我们已经把最重要的砖块都搬上来了。这一章，就来对基础部分做一个总结，让整个知识体系在脑子里清晰起来。\n\n----------------------------------------\n\n\n# 一、rust 的核心设计理念\n\nrust 和 c++ 一样，定位是 系统级语言，但它最大的特点是：\n\n * 所有权 (ownership)\n * 借用 (borrowing)\n * 生命周期 (lifetime)\n\n这三样东西保证了 内存安全，同时又能保持高性能。换句话说，rust 的学习核心就是搞懂内存管理背后的规则。\n\n----------------------------------------\n\n\n# 二、基础语法的构建\n\nrust 的前半部分主要是语言层面的基本工具：\n\n 1. 变量与可变性：默认不可变，强调安全。\n 2. 函数与表达式：一切皆表达式，返回值灵活。\n 3. 控制流：if / loop / while / for，和其他语言类似。\n 4. 数据类型：标量（整数、浮点、布尔、字符）+ 复合类型（tuple、array）。\n\n到这一步，rust 和 c、c++、python 没太大差别，还算友好。\n\n----------------------------------------\n\n\n# 三、内存与所有权\n\nrust 的杀手锏：\n\n * 所有权：每块内存有且只有一个所有者。\n * 借用：可以引用但不能乱改，分为 &t（不可变借用）和 &mut t（可变借用）。\n * 切片 (slice)：在不复制的情况下获取数组或字符串的一部分。\n\n这是 rust 入门的 第一道坎。不过只要理解了「谁拥有，谁负责释放」，事情就简单了。\n\n----------------------------------------\n\n\n# 四、结构化数据\n\n * 结构体 (struct)：自定义数据类型，像 c 的 struct，但更强大。\n * 枚举 (enum)：不仅能表示有限状态，还能绑定数据，配合 option 特别常用。\n * 方法 (impl)：给 struct / enum 添加行为，和面向对象有点类似。\n\n这部分是 rust 的 抽象能力，让你能写出清晰的模型，而不仅仅是函数堆砌。\n\n----------------------------------------\n\n\n# 五、控制流的进阶\n\n * match：强大的模式匹配，能安全地覆盖所有可能情况。\n * if let：match 的简化版，常用于处理 option 或 result。\n\nrust 的控制流强调「穷举」和「显式」，避免遗漏，提升可靠性。\n\n----------------------------------------\n\n\n# 六、项目与模块化\n\n * package / crate：rust 的编译单元，cargo 工具管理。\n * 模块 (mod)：代码组织方式，控制作用域和可见性。\n * use / pub：路径引入和可见性控制。\n * 多文件模块：工程化项目必备。\n\n这让 rust 项目能自然扩展，从小脚本到大型系统都能 hold 住。\n\n----------------------------------------\n\n\n# 七、常用集合\n\nrust 标准库提供了常见的数据容器：\n\n 1. vec：动态数组，最常用。\n 2. string：utf-8 可变字符串，本质上也是字节向量。\n 3. hashmap<k, v>：键值对存储。\n\n这三样几乎能覆盖大多数日常编程需求。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"00.深度学习的基本原理",frontmatter:{title:"00.深度学习的基本原理",date:"2025-08-31T22:00:00.000Z",permalink:"/pages/DP_00/"},regularPath:"/03.DP/00.%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html",relativePath:"03.DP/00.深度学习的基本原理.md",key:"v-b39a1cd8",path:"/pages/DP_00/",headers:[{level:2,title:"一. 深度学习的前世今生",slug:"一-深度学习的前世今生",normalizedTitle:"一. 深度学习的前世今生",charIndex:19},{level:2,title:"二. 深度学习的典型流程",slug:"二-深度学习的典型流程",normalizedTitle:"二. 深度学习的典型流程",charIndex:530},{level:2,title:"三. 深度学习的核心公式",slug:"三-深度学习的核心公式",normalizedTitle:"三. 深度学习的核心公式",charIndex:728},{level:2,title:"四. 发展趋势与展望",slug:"四-发展趋势与展望",normalizedTitle:"四. 发展趋势与展望",charIndex:1527}],headersStr:"一. 深度学习的前世今生 二. 深度学习的典型流程 三. 深度学习的核心公式 四. 发展趋势与展望",content:"# 深度学习：智能时代的引擎\n\n\n# 一. 深度学习的前世今生\n\n深度学习（Deep Learning）是机器学习的分支，源自人工神经网络（ANN），经历了数十年的发展：\n\n阶段            代表方法/事件                     特点与局限\n1940s-1980s   感知机、早期神经网络                  结构简单，能力有限\n1986          反向传播算法（BP）                  可训练多层网络\n1998          LeNet（手写数字识别）               卷积神经网络雏形\n2006          深度信念网络（Hinton）              深层网络训练突破\n2012          AlexNet（ImageNet冠军）         GPU加速，深度模型爆发\n2016-至今       Transformer、GPT、Diffusion   泛化能力、生成能力提升\n\n> 深度学习推动了语音识别、图像处理、自然语言理解等领域的飞跃发展。\n\n----------------------------------------\n\n\n# 二. 深度学习的典型流程\n\n * 数据收集：获取原始数据（如图片、文本、音频等）\n * 数据预处理：清洗、归一化、增强等\n * 模型设计：选择网络结构（如CNN、RNN、Transformer）\n * 模型训练：通过反向传播优化参数\n * 模型评估：验证模型泛化能力\n * 模型部署：上线服务或嵌入设备\n\n----------------------------------------\n\n\n# 三. 深度学习的核心公式\n\n以典型的前馈神经网络为例，其基本计算过程如下：\n\n输入层：x=[x1,x2,...,xn]隐藏层：h=σ(W1x+b1)输出层：y=softmax(W2h+b2) \\text{输入层：} \\quad \\mathbf{x} = [x_1, x_2, ..., x_n] \\\\ \\text{隐藏层：} \\quad \\mathbf{h} = \\sigma(\\mathbf{W}_1 \\mathbf{x} + \\mathbf{b}_1) \\\\ \\text{输出层：} \\quad \\mathbf{y} = \\text{softmax}(\\mathbf{W}_2 \\mathbf{h} + \\mathbf{b}_2) 输入层：x=[x1 ,x2 ,...,xn ] 隐藏层：h=σ(W1 x+b1 ) 输出层：y=softmax(W2 h+b2 )\n * σ\\sigmaσ：激活函数（如ReLU、Sigmoid）\n * W,b\\mathbf{W}, \\mathbf{b}W,b：权重与偏置参数\n * softmax\\text{softmax}softmax：常用于分类任务的输出\n\n损失函数（以交叉熵为例）：\n\nL=−∑iyitruelog⁡(yipred) L = -\\sum_{i} y_i^{\\text{true}} \\log(y_i^{\\text{pred}}) L=−i∑ yitrue log(yipred )\n\n参数优化（梯度下降）：\n\nθ←θ−η∂L∂θ \\theta \\leftarrow \\theta - \\eta \\frac{\\partial L}{\\partial \\theta} θ←θ−η∂θ∂L\n * θ\\thetaθ：模型参数\n * η\\etaη：学习率\n\n----------------------------------------\n\n\n# 四. 发展趋势与展望\n\n * 大模型：参数规模持续增长，能力更强\n * 多模态：融合文本、图像、音频等多种信息\n * 自动化：AutoML、神经架构搜索（NAS）\n * 绿色AI：关注能耗与效率\n\n> 深度学习正成为推动AI变革的核心动力，未来可期。\n\n----------------------------------------",normalizedContent:"# 深度学习：智能时代的引擎\n\n\n# 一. 深度学习的前世今生\n\n深度学习（deep learning）是机器学习的分支，源自人工神经网络（ann），经历了数十年的发展：\n\n阶段            代表方法/事件                     特点与局限\n1940s-1980s   感知机、早期神经网络                  结构简单，能力有限\n1986          反向传播算法（bp）                  可训练多层网络\n1998          lenet（手写数字识别）               卷积神经网络雏形\n2006          深度信念网络（hinton）              深层网络训练突破\n2012          alexnet（imagenet冠军）         gpu加速，深度模型爆发\n2016-至今       transformer、gpt、diffusion   泛化能力、生成能力提升\n\n> 深度学习推动了语音识别、图像处理、自然语言理解等领域的飞跃发展。\n\n----------------------------------------\n\n\n# 二. 深度学习的典型流程\n\n * 数据收集：获取原始数据（如图片、文本、音频等）\n * 数据预处理：清洗、归一化、增强等\n * 模型设计：选择网络结构（如cnn、rnn、transformer）\n * 模型训练：通过反向传播优化参数\n * 模型评估：验证模型泛化能力\n * 模型部署：上线服务或嵌入设备\n\n----------------------------------------\n\n\n# 三. 深度学习的核心公式\n\n以典型的前馈神经网络为例，其基本计算过程如下：\n\n输入层：x=[x1,x2,...,xn]隐藏层：h=σ(w1x+b1)输出层：y=softmax(w2h+b2) \\text{输入层：} \\quad \\mathbf{x} = [x_1, x_2, ..., x_n] \\\\ \\text{隐藏层：} \\quad \\mathbf{h} = \\sigma(\\mathbf{w}_1 \\mathbf{x} + \\mathbf{b}_1) \\\\ \\text{输出层：} \\quad \\mathbf{y} = \\text{softmax}(\\mathbf{w}_2 \\mathbf{h} + \\mathbf{b}_2) 输入层：x=[x1 ,x2 ,...,xn ] 隐藏层：h=σ(w1 x+b1 ) 输出层：y=softmax(w2 h+b2 )\n * σ\\sigmaσ：激活函数（如relu、sigmoid）\n * w,b\\mathbf{w}, \\mathbf{b}w,b：权重与偏置参数\n * softmax\\text{softmax}softmax：常用于分类任务的输出\n\n损失函数（以交叉熵为例）：\n\nl=−∑iyitruelog⁡(yipred) l = -\\sum_{i} y_i^{\\text{true}} \\log(y_i^{\\text{pred}}) l=−i∑ yitrue log(yipred )\n\n参数优化（梯度下降）：\n\nθ←θ−η∂l∂θ \\theta \\leftarrow \\theta - \\eta \\frac{\\partial l}{\\partial \\theta} θ←θ−η∂θ∂l\n * θ\\thetaθ：模型参数\n * η\\etaη：学习率\n\n----------------------------------------\n\n\n# 四. 发展趋势与展望\n\n * 大模型：参数规模持续增长，能力更强\n * 多模态：融合文本、图像、音频等多种信息\n * 自动化：automl、神经架构搜索（nas）\n * 绿色ai：关注能耗与效率\n\n> 深度学习正成为推动ai变革的核心动力，未来可期。\n\n----------------------------------------",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"15.Rust的Vector",frontmatter:{title:"15.Rust的Vector",date:"2025-08-28T22:00:00.000Z",permalink:"/pages/Rust_15/"},regularPath:"/02.Rust/15.Rust%E7%9A%84Vector.html",relativePath:"02.Rust/15.Rust的Vector.md",key:"v-7952917a",path:"/pages/Rust_15/",headers:[{level:2,title:"一、定义向量",slug:"一、定义向量",normalizedTitle:"一、定义向量",charIndex:114},{level:2,title:"二、向量的修改",slug:"二、向量的修改",normalizedTitle:"二、向量的修改",charIndex:355},{level:2,title:"三、访问元素",slug:"三、访问元素",normalizedTitle:"三、访问元素",charIndex:566},{level:2,title:"四、遍历向量",slug:"四、遍历向量",normalizedTitle:"四、遍历向量",charIndex:939},{level:2,title:"五、向量和枚举",slug:"五、向量和枚举",normalizedTitle:"五、向量和枚举",charIndex:1248},{level:2,title:"六、Vector 的释放",slug:"六、vector-的释放",normalizedTitle:"六、vector 的释放",charIndex:1519}],headersStr:"一、定义向量 二、向量的修改 三、访问元素 四、遍历向量 五、向量和枚举 六、Vector 的释放",content:'# Rust的Vector\n\n在 Rust 里，如果要存放一系列同类型的元素，最常用的就是 向量（Vector），对应的类型是 Vec<T>。它和 C 语言里的数组不同，不仅能存放数据，还能根据需要动态扩展，非常灵活。\n\n\n# 一、定义向量\n\n定义向量有几种方式：\n\n// 创建一个空的 i32 类型向量\nlet mut v: Vec<i32> = Vec::new();\n\n// 使用宏直接创建并初始化\nlet v = vec![1, 2, 3];\n\n\n1\n2\n3\n4\n5\n\n\n第一种方法需要显式声明类型，因为 Vec::new() 里没有数据，编译器推不出类型。 第二种方法更常见，用 vec![] 宏直接生成。\n\n----------------------------------------\n\n\n# 二、向量的修改\n\n向量是可以动态扩展的，常见操作有：\n\nlet mut numbers = Vec::new();\nnumbers.push(10);\nnumbers.push(20);\nnumbers.push(30);\n\n\n1\n2\n3\n4\n\n\n这里用 push 往里添加元素。 需要注意：要想修改，就得把向量定义成 mut。\n\n----------------------------------------\n\n\n# 三、访问元素\n\n访问向量里的值有两种方式：\n\nlet v = vec![1, 2, 3, 4];\n\n// 下标访问，直接取值\nlet third = &v[2];\nprintln!("第三个元素是 {}", third);\n\n// get 方法，更安全\nmatch v.get(2) {\n    Some(value) => println!("第三个元素是 {}", value),\n    None => println!("没有这个元素"),\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n区别在于：\n\n * v[2] 如果越界会直接 panic（程序崩溃）。\n * v.get(2) 返回一个 Option，能优雅地处理越界情况。\n\n----------------------------------------\n\n\n# 四、遍历向量\n\n向量里通常要用循环读取数据：\n\nlet v = vec![100, 200, 300];\n\n// 不可变借用\nfor i in &v {\n    println!("{}", i);\n}\n\n// 可变借用，可以修改里面的值\nlet mut v = vec![1, 2, 3];\nfor i in &mut v {\n    *i += 10;\n}\nprintln!("{:?}", v);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n这里的 *i 是解引用，把借用拿到的值修改后写回去。\n\n----------------------------------------\n\n\n# 五、向量和枚举\n\n向量要求所有元素类型相同，如果想在一个向量里存不同类型，可以借助枚举：\n\nenum Cell {\n    Int(i32),\n    Float(f64),\n    Text(String),\n}\n\nlet row = vec![\n    Cell::Int(42),\n    Cell::Text(String::from("hello")),\n    Cell::Float(3.14),\n];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n这样就能在一个 Vec<Cell> 里存放不同形式的数据。\n\n\n# 六、Vector 的释放\n\nRust 的所有权机制会在向量离开作用域时自动释放内存，包括它里面的元素，不需要手动释放。这就是 Rust 带来的安全性。',normalizedContent:'# rust的vector\n\n在 rust 里，如果要存放一系列同类型的元素，最常用的就是 向量（vector），对应的类型是 vec<t>。它和 c 语言里的数组不同，不仅能存放数据，还能根据需要动态扩展，非常灵活。\n\n\n# 一、定义向量\n\n定义向量有几种方式：\n\n// 创建一个空的 i32 类型向量\nlet mut v: vec<i32> = vec::new();\n\n// 使用宏直接创建并初始化\nlet v = vec![1, 2, 3];\n\n\n1\n2\n3\n4\n5\n\n\n第一种方法需要显式声明类型，因为 vec::new() 里没有数据，编译器推不出类型。 第二种方法更常见，用 vec![] 宏直接生成。\n\n----------------------------------------\n\n\n# 二、向量的修改\n\n向量是可以动态扩展的，常见操作有：\n\nlet mut numbers = vec::new();\nnumbers.push(10);\nnumbers.push(20);\nnumbers.push(30);\n\n\n1\n2\n3\n4\n\n\n这里用 push 往里添加元素。 需要注意：要想修改，就得把向量定义成 mut。\n\n----------------------------------------\n\n\n# 三、访问元素\n\n访问向量里的值有两种方式：\n\nlet v = vec![1, 2, 3, 4];\n\n// 下标访问，直接取值\nlet third = &v[2];\nprintln!("第三个元素是 {}", third);\n\n// get 方法，更安全\nmatch v.get(2) {\n    some(value) => println!("第三个元素是 {}", value),\n    none => println!("没有这个元素"),\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n区别在于：\n\n * v[2] 如果越界会直接 panic（程序崩溃）。\n * v.get(2) 返回一个 option，能优雅地处理越界情况。\n\n----------------------------------------\n\n\n# 四、遍历向量\n\n向量里通常要用循环读取数据：\n\nlet v = vec![100, 200, 300];\n\n// 不可变借用\nfor i in &v {\n    println!("{}", i);\n}\n\n// 可变借用，可以修改里面的值\nlet mut v = vec![1, 2, 3];\nfor i in &mut v {\n    *i += 10;\n}\nprintln!("{:?}", v);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n这里的 *i 是解引用，把借用拿到的值修改后写回去。\n\n----------------------------------------\n\n\n# 五、向量和枚举\n\n向量要求所有元素类型相同，如果想在一个向量里存不同类型，可以借助枚举：\n\nenum cell {\n    int(i32),\n    float(f64),\n    text(string),\n}\n\nlet row = vec![\n    cell::int(42),\n    cell::text(string::from("hello")),\n    cell::float(3.14),\n];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n这样就能在一个 vec<cell> 里存放不同形式的数据。\n\n\n# 六、vector 的释放\n\nrust 的所有权机制会在向量离开作用域时自动释放内存，包括它里面的元素，不需要手动释放。这就是 rust 带来的安全性。',charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"01.线性回归",frontmatter:{title:"01.线性回归",date:"2025-09-08T21:00:00.000Z",permalink:"/pages/DP_01/"},regularPath:"/03.DP/01.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.html",relativePath:"03.DP/01.线性回归.md",key:"v-7c408435",path:"/pages/DP_01/",headers:[{level:2,title:"线性回归的基本原理",slug:"线性回归的基本原理",normalizedTitle:"线性回归的基本原理",charIndex:79},{level:2,title:"线性模型",slug:"线性模型",normalizedTitle:"线性模型",charIndex:648},{level:2,title:"损失函数",slug:"损失函数",normalizedTitle:"损失函数",charIndex:1392},{level:2,title:"常用的损失函数是平方误差函数，当样本的预测值为 $\\hat{y}^{(i)}$,其相应真实标签为 $y^{(i)}$时，平方误差可以定义为一下公式：\n$$l^{(i)}(\\mathbf{w}, b) = \\frac{1}{2} \\left( \\hat{y}^{(i)} - y^{(i)} \\right)^2$$\n由于二次项的固有特性，较大的差异将会导致更大的损失，因此，为了度量模型在整个数据集上的质量，我们需要在训练集 $n$ 个样本上的损失值（等价于求和）\n$$L(\\mathbf{w}, b) = \\frac{1}{n} \\sum{i=1}^{n} l^{(i)}(\\mathbf{w}, b) = \\frac{1}{n} \\sum{i=1}^{n} \\frac{1}{2} \\left( \\mathbf{w}^\\top \\mathbf{x}^{(i)} + b - y^{(i)} \\right)^2$$\n训练模型时，我们最希望的是找一组参数 $(\\mathbf{w}^, b^)$，这组参数能够最小化在所有训练样本上的总损失：\n$$\\mathbf{w}^, b^ = \\underset{\\mathbf{w}, b}{\\operatorname{argmin}} \\ L(\\mathbf{w}, b)$$",slug:"常用的损失函数是平方误差函数-当样本的预测值为-其相应真实标签为-时-平方误差可以定义为一下公式-由于二次项的固有特性-较大的差异将会导致更大的损失-因此-为了度量模型在整个数据集上的质量-我们需要在训练集-个样本上的损失值-等价于求和-训练模型时-我们最希望的是找一组参数-这组参数能够最小化在所有训练样本上的总损失",normalizedTitle:'常用的损失函数是平方误差函数，当样本的预测值为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/math/mathml"><semantics><mrow><msup><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\\hat{y}^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></eq>,其相应真实标签为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/math/mathml"><semantics><mrow><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">y^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></eq>时，平方误差可以定义为一下公式：\n<eq><span class="katex-error" title="parseerror: katex parse error: can&#x27;t use function &#x27;$1#x27; in math mode at position 1: $l^{(i)}(\\mathbf…" style="color:#cc0000">$l^{(i)}(\\mathbf{w}, b) = \\frac{1}{2} \\left( \\hat{y}^{(i)} - y^{(i)} \\right)^2</span></eq>$\n由于二次项的固有特性，较大的差异将会导致更大的损失，因此，为了度量模型在整个数据集上的质量，我们需要在训练集 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/math/mathml"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></eq> 个样本上的损失值（等价于求和）\n<eq><span class="katex-error" title="parseerror: katex parse error: can&#x27;t use function &#x27;$1#x27; in math mode at position 1: $l(\\mathbf{w}, b…" style="color:#cc0000">$l(\\mathbf{w}, b) = \\frac{1}{n} \\sum{i=1}^{n} l^{(i)}(\\mathbf{w}, b) = \\frac{1}{n} \\sum{i=1}^{n} \\frac{1}{2} \\left( \\mathbf{w}^\\top \\mathbf{x}^{(i)} + b - y^{(i)} \\right)^2</span></eq>$\n训练模型时，我们最希望的是找一组参数 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/math/mathml"><semantics><mrow><mo stretchy="false">(</mo><msup><mi mathvariant="bold">w</mi><mo separator="true">,</mo></msup><msup><mi>b</mi><mo stretchy="false">)</mo></msup></mrow><annotation encoding="application/x-tex">(\\mathbf{w}^, b^)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></eq>，这组参数能够最小化在所有训练样本上的总损失：\n<eq><span class="katex-error" title="parseerror: katex parse error: can&#x27;t use function &#x27;$1#x27; in math mode at position 1: $\\mathbf{w}^, b^…" style="color:#cc0000">$\\mathbf{w}^, b^ = \\underset{\\mathbf{w}, b}{\\operatorname{argmin}} \\ l(\\mathbf{w}, b)</span></eq>$',charIndex:null},{level:2,title:"随机梯度下降",slug:"随机梯度下降",normalizedTitle:"随机梯度下降",charIndex:2090}],headersStr:"线性回归的基本原理 线性模型 损失函数 常用的损失函数是平方误差函数，当样本的预测值为 $\\hat{y}^{(i)}$,其相应真实标签为 $y^{(i)}$时，平方误差可以定义为一下公式：\n$$l^{(i)}(\\mathbf{w}, b) = \\frac{1}{2} \\left( \\hat{y}^{(i)} - y^{(i)} \\right)^2$$\n由于二次项的固有特性，较大的差异将会导致更大的损失，因此，为了度量模型在整个数据集上的质量，我们需要在训练集 $n$ 个样本上的损失值（等价于求和）\n$$L(\\mathbf{w}, b) = \\frac{1}{n} \\sum{i=1}^{n} l^{(i)}(\\mathbf{w}, b) = \\frac{1}{n} \\sum{i=1}^{n} \\frac{1}{2} \\left( \\mathbf{w}^\\top \\mathbf{x}^{(i)} + b - y^{(i)} \\right)^2$$\n训练模型时，我们最希望的是找一组参数 $(\\mathbf{w}^, b^)$，这组参数能够最小化在所有训练样本上的总损失：\n$$\\mathbf{w}^, b^ = \\underset{\\mathbf{w}, b}{\\operatorname{argmin}} \\ L(\\mathbf{w}, b)$$ 随机梯度下降",content:"回归（regression）是能为一个或多个自变量与因变量之间关系建模的一类方法。 在自然科学和社会科学领域，回归经常用来表示输入和输出之间的关系。\n\n\n# 线性回归的基本原理\n\n线性回归是最早的一类回归模型，其基于几个简单的假设：\n\n * 假设自变量和因变量之间的关系是线性的， 即 y\\mathbf{y}y 可以表示为 x\\mathbf{x}x 中元素的加权和，这里通常允许包含观测值的一些噪声\n * 任何噪声都比较正常，如遵循正态分布\n\n----------------------------------------\n\n下面阐述一些基本概念： 我们为了开发一个模型，首先要做的就是收集一个真实的数据集。 在机器学习的术语中，\n\n * 该数据集被称为训练数据集（training data set)\n * 每行数据为样本（sample）\n * 试图预测的目标称为标签（label）\n * 预测所需要的自变量称为特征（feature）\n\n通常，我们使用 nnn 来表示数据集中的样本数。对索引为 iii 的样本，其输入表示为\n\nx(i)=[x1(i),x2(i)]⊤\\mathbf{x}^{(i)} = \\left[ x_1^{(i)}, x_2^{(i)} \\right]^{\\top}x(i)=[x1(i) ,x2(i) ]⊤\n\n对应的标签是 y(i)\\mathbf{y}^{(i)}y(i).\n\n----------------------------------------\n\n\n# 线性模型\n\n如下面的公式： $\\text{price} = w_{\\text{area}} \\cdot \\text{area} + w_{\\text{age}} \\cdot \\text{age} + b$ 其中的 wareaw_{\\text{area}}warea 和 wagew_{\\text{age}}wage 称为权重（weight），权重决定了每个特征对我们预测值的影响，b\\mathbf{b}b 称为偏置（bias），偏执是指当所有特征都去值为0时，预测值应该为多少。\n\n在机器学习领域，使用的通常是高维数据集，建模时采用线性代数表示法，下面的三个公式展示了预测结果（y^\\hat{y}y^ ) 与特征的关系，维度依次上升，不过多阐述： $$ \\hat{y} = w_1x_1 + \\dots + w_dx_d + b $$\n\nx1,x2,…,xdx_1, x_2, \\dots, x_dx1 ,x2 ,…,xd （单个数据样本的ddd个特征) $$ \\hat{y} = \\mathbf{w}^\\top \\mathbf{x} + b $$ x\\mathbf{x}x（单个数据样本的特征向量，包含ddd个特征，x∈Rd\\mathbf{x} \\in \\mathbb{R}^dx∈Rd） $$ \\hat{\\mathbf{y}} = \\mathbf{X}\\mathbf{w} + b$$ X\\mathbf{X}X（整个数据集的特征矩阵，X∈Rn×d\\mathbf{X} \\in \\mathbb{R}^{n \\times d}X∈Rn×d，其中nnn是样本数，每一行对应一个样本的ddd个特征）\n\n----------------------------------------\n\n\n# 损失函数\n\n在拟合（fit）数据之前，需要确定一个拟合程度的度量，而损失函数（loss function)正好能够量化目标的实际值与预测值之间的差距，通常选择非负数，数值越小表示损失越小，完美时的损失为0.\n\n\n# 常用的损失函数是平方误差函数，当样本的预测值为 y^(i)\\hat{y}^{(i)}y^ (i),其相应真实标签为 y(i)y^{(i)}y(i)时，平方误差可以定义为一下公式： $l^{(i)}(\\mathbf{w}, b) = \\frac{1}{2} \\left( \\hat{y}^{(i)} - y^{(i)} \\right)^2$ 由于二次项的固有特性，较大的差异将会导致更大的损失，因此，为了度量模型在整个数据集上的质量，我们需要在训练集 nnn 个样本上的损失值（等价于求和） $L(\\mathbf{w}, b) = \\frac{1}{n} \\sum_{i=1}^{n} l^{(i)}(\\mathbf{w}, b) = \\frac{1}{n} \\sum_{i=1}^{n} \\frac{1}{2} \\left( \\mathbf{w}^\\top \\mathbf{x}^{(i)} + b - y^{(i)} \\right)^2$ 训练模型时，我们最希望的是找一组参数 (w∗,b∗)(\\mathbf{w}^*, b^*)(w∗,b∗)，这组参数能够最小化在所有训练样本上的总损失： $\\mathbf{w}^*, b^* = \\underset{\\mathbf{w}, b}{\\operatorname{argmin}} \\ L(\\mathbf{w}, b)$\n\n\n# 随机梯度下降\n\n梯度下降（gradient descent) 的方法几乎可以优化所有深度学习模型，其通过不断在损失函数递减的方向上更新参数来降低误差。\n\n梯度下降最简单的用法是计算损失函数（数据集中所有样本的损失均值） 关于模型参数的导数（在这里也可以称为梯度）。 但实际中的执行可能会非常慢：因为在每一次更新参数之前，我们必须遍历整个数据集。 因此，我们通常会在每次需要计算更新的时候随机抽取一小批样本， 这种变体叫做小批量随机梯度下降（minibatch stochastic gradient descent）。\n\n在每次迭代中，我们首先随机抽样一个小批量B\\mathcal{B}B， 它是由固定数量的训练样本组成的。然后，我们计算小批量的平均损失关于模型参数的导数（也可以称为梯度）。 最后，我们将梯度乘以一个预先确定的正数 η\\etaη，并从当前参数的值中减掉。\n\n下面的数学公式可以表示这一更新过程（∂\\partial∂表示偏导数）： $$ (\\mathbf{w}, b) \\leftarrow (\\mathbf{w}, b) - \\frac{\\eta}{|\\mathcal{B}|} \\sum_{i \\in \\mathcal{B}} \\partial_{(\\mathbf{w}, b)} l^{(i)}(\\mathbf{w}, b) $$",normalizedContent:"回归（regression）是能为一个或多个自变量与因变量之间关系建模的一类方法。 在自然科学和社会科学领域，回归经常用来表示输入和输出之间的关系。\n\n\n# 线性回归的基本原理\n\n线性回归是最早的一类回归模型，其基于几个简单的假设：\n\n * 假设自变量和因变量之间的关系是线性的， 即 y\\mathbf{y}y 可以表示为 x\\mathbf{x}x 中元素的加权和，这里通常允许包含观测值的一些噪声\n * 任何噪声都比较正常，如遵循正态分布\n\n----------------------------------------\n\n下面阐述一些基本概念： 我们为了开发一个模型，首先要做的就是收集一个真实的数据集。 在机器学习的术语中，\n\n * 该数据集被称为训练数据集（training data set)\n * 每行数据为样本（sample）\n * 试图预测的目标称为标签（label）\n * 预测所需要的自变量称为特征（feature）\n\n通常，我们使用 nnn 来表示数据集中的样本数。对索引为 iii 的样本，其输入表示为\n\nx(i)=[x1(i),x2(i)]⊤\\mathbf{x}^{(i)} = \\left[ x_1^{(i)}, x_2^{(i)} \\right]^{\\top}x(i)=[x1(i) ,x2(i) ]⊤\n\n对应的标签是 y(i)\\mathbf{y}^{(i)}y(i).\n\n----------------------------------------\n\n\n# 线性模型\n\n如下面的公式： $\\text{price} = w_{\\text{area}} \\cdot \\text{area} + w_{\\text{age}} \\cdot \\text{age} + b$ 其中的 wareaw_{\\text{area}}warea 和 wagew_{\\text{age}}wage 称为权重（weight），权重决定了每个特征对我们预测值的影响，b\\mathbf{b}b 称为偏置（bias），偏执是指当所有特征都去值为0时，预测值应该为多少。\n\n在机器学习领域，使用的通常是高维数据集，建模时采用线性代数表示法，下面的三个公式展示了预测结果（y^\\hat{y}y^ ) 与特征的关系，维度依次上升，不过多阐述： $$ \\hat{y} = w_1x_1 + \\dots + w_dx_d + b $$\n\nx1,x2,…,xdx_1, x_2, \\dots, x_dx1 ,x2 ,…,xd （单个数据样本的ddd个特征) $$ \\hat{y} = \\mathbf{w}^\\top \\mathbf{x} + b $$ x\\mathbf{x}x（单个数据样本的特征向量，包含ddd个特征，x∈rd\\mathbf{x} \\in \\mathbb{r}^dx∈rd） $$ \\hat{\\mathbf{y}} = \\mathbf{x}\\mathbf{w} + b$$ x\\mathbf{x}x（整个数据集的特征矩阵，x∈rn×d\\mathbf{x} \\in \\mathbb{r}^{n \\times d}x∈rn×d，其中nnn是样本数，每一行对应一个样本的ddd个特征）\n\n----------------------------------------\n\n\n# 损失函数\n\n在拟合（fit）数据之前，需要确定一个拟合程度的度量，而损失函数（loss function)正好能够量化目标的实际值与预测值之间的差距，通常选择非负数，数值越小表示损失越小，完美时的损失为0.\n\n\n# 常用的损失函数是平方误差函数，当样本的预测值为 y^(i)\\hat{y}^{(i)}y^ (i),其相应真实标签为 y(i)y^{(i)}y(i)时，平方误差可以定义为一下公式： $l^{(i)}(\\mathbf{w}, b) = \\frac{1}{2} \\left( \\hat{y}^{(i)} - y^{(i)} \\right)^2$ 由于二次项的固有特性，较大的差异将会导致更大的损失，因此，为了度量模型在整个数据集上的质量，我们需要在训练集 nnn 个样本上的损失值（等价于求和） $l(\\mathbf{w}, b) = \\frac{1}{n} \\sum_{i=1}^{n} l^{(i)}(\\mathbf{w}, b) = \\frac{1}{n} \\sum_{i=1}^{n} \\frac{1}{2} \\left( \\mathbf{w}^\\top \\mathbf{x}^{(i)} + b - y^{(i)} \\right)^2$ 训练模型时，我们最希望的是找一组参数 (w∗,b∗)(\\mathbf{w}^*, b^*)(w∗,b∗)，这组参数能够最小化在所有训练样本上的总损失： $\\mathbf{w}^*, b^* = \\underset{\\mathbf{w}, b}{\\operatorname{argmin}} \\ l(\\mathbf{w}, b)$\n\n\n# 随机梯度下降\n\n梯度下降（gradient descent) 的方法几乎可以优化所有深度学习模型，其通过不断在损失函数递减的方向上更新参数来降低误差。\n\n梯度下降最简单的用法是计算损失函数（数据集中所有样本的损失均值） 关于模型参数的导数（在这里也可以称为梯度）。 但实际中的执行可能会非常慢：因为在每一次更新参数之前，我们必须遍历整个数据集。 因此，我们通常会在每次需要计算更新的时候随机抽取一小批样本， 这种变体叫做小批量随机梯度下降（minibatch stochastic gradient descent）。\n\n在每次迭代中，我们首先随机抽样一个小批量b\\mathcal{b}b， 它是由固定数量的训练样本组成的。然后，我们计算小批量的平均损失关于模型参数的导数（也可以称为梯度）。 最后，我们将梯度乘以一个预先确定的正数 η\\etaη，并从当前参数的值中减掉。\n\n下面的数学公式可以表示这一更新过程（∂\\partial∂表示偏导数）： $$ (\\mathbf{w}, b) \\leftarrow (\\mathbf{w}, b) - \\frac{\\eta}{|\\mathcal{b}|} \\sum_{i \\in \\mathcal{b}} \\partial_{(\\mathbf{w}, b)} l^{(i)}(\\mathbf{w}, b) $$",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"},{title:"Home",frontmatter:{home:!0,heroImage:"/img/base/LOGO.png",tagline:"系统编程技术博客，积跬步以至千里，致敬每个爱学习的你。",heroText:"原码纪事",actionText:"开始浏览 →",actionLink:"/pages/Notes/",bannerBg:"none",postList:"simple",features:[{title:"博客笔记",details:"带来不一样的你",link:"/pages/Notes/"},{title:"项目",details:"工程速览",link:"/pages/Projects/"},{title:"吐槽",details:"世上本来没有吐槽，只因吐的人多了...",link:"/pages/Teasting/"}]},regularPath:"/",relativePath:"index.md",key:"v-58b44ebe",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2025/09/08, 21:06:29"},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-01b5feb6",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2025/09/08, 21:06:29"},{title:"留言板",frontmatter:{title:"留言板",date:"2025-05-25T18:38:46.000Z",permalink:"/message-board"},regularPath:"/message_board/%E7%95%99%E8%A8%80%E6%9D%BF.html",relativePath:"message_board/留言板.md",key:"v-c9bd4b28",path:"/message-board/",headersStr:null,content:"你可以在这里留下想说的内容。",normalizedContent:"你可以在这里留下想说的内容。",charsets:{cjk:!0},lastUpdated:"2025/09/08, 21:06:29"}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"博客笔记",link:"/pages/Notes/"},{text:"工程",link:"/pages/Projects/"},{text:"吐槽",link:"/pages/Teasting/"},{text:"留言板",link:"/message-board/"},{text:"我的博客",link:"https://blog.yuanmajishi.top/"}],sidebarDepth:2,logo:"/img/base/bar.png",searchMaxSuggestions:10,lastUpdated:"上次更新",editLinks:!0,docsDir:"docs",docsBranch:"main",editLinkText:"帮助我们改善此页面",searchPlaceholder:"按下 𝑺 搜索",comment:!1,category:!1,tag:!1,sidebar:{"/01.Verilog/":[["01.Verilog HDL基本要素.md","01.Verilog HDL语言基本要素","/pages/Verilog_01/"],["02.Verilog HDL基本数据类型.md","02.Verilog HDL基本数据类型","/pages/Verilog_02/"],["03.Verilog运算符和表达式.md","03.Verilog HDL运算符和表达式","/pages/Verilog_03/"],["04.Verilog HDL的模块.md","04.Verilog HDL模块","/pages/Verilog_04/"],["05.VerilogHDL程序设计和描述方式.md","05.Verilog HDL程序设计和描述方式","/pages/Verilog_05/"],["06.Verilog HDL程序设计思想概览.md","06.Verilog HDL程序设计思想概览","/pages/Verilog_06/"],["07.Verilog HDL组合电路设计的方法.md","07.Verilog HDL组合电路设计的方法","/pages/Verilog_07/"],["08.verilog HDL组合电路之数字加法器.md","08.verilog HDL组合电路之数字加法器","/pages/Verilog_08/"],["09.Verilog HDL组合电路之数据比较器.md","09.Verilog HDL组合电路之数据比较器","/pages/Verilog_09/"],["10.Verilog HDL组合电路之数据选择器.md","10.Verilog HDL组合电路之数据选择器","/pages/Verilog_10/"],["11.verilog HDL组合电路之数字编码器.md","11.verilog HDL组合电路之数字编码器","/pages/Verilog_11/"],["12.verilog HDL组合电路之数字译码器.md","12.verilog HDL组合电路之数字译码器","/pages/Verilog_12/"],["13.verilog HDL组合电路之奇偶校验器.md","13.verilog HDL组合电路之奇偶校验器","/pages/Verilog_13/"],["14.Verilog HDL时序电路设计基础.md","14.Verilog HDL时序电路设计基础","/pages/Verilog_14/"],["15.Verilog HDL时序电路之基本触发器.md","15.Verilog HDL触发器设计","/pages/Verilog_15/"],["16.Verilog HDL时序逻辑电路之计数器.md","16.Verilog HDL计数器设计","/pages/Verilog_16/"],["17.Verilog HDL时序逻辑电路之移位寄存器.md","17.Verilog HDL移位寄存器","/pages/Verilog_17/"],["18.Verilog HDL时序逻辑电路之信号发生器.md","18.Verilog HDL序列信号发生器","/pages/Verilog_18/"],["19.Verilog HDL有限状态机（FSM）设计基础.md","19.Verilog HDL有限状态机（FSM）设计基础","/pages/Verilog_19/"]],catalogue:{},"/02.Rust/":[["00.Rust的基本素养.md","00.Rust的基本素养","/pages/Rust_00/"],["01.Rust的变量与可变性.md","01.Rust的变量与可变性","/pages/Rust_01/"],["02.Rust的数据类型.md","02.Rust的数据类型","/pages/Rust_02/"],["03.Rust的函数和注释.md","03.Rust的函数与注释","/pages/Rust_03/"],["04.Rust的控制流.md","04.Rust的控制流","/pages/Rust_04/"],["05.Rust的所有权概念.md","05.Rust的所有权概念","/pages/Rust_05/"],["06.Rust的引用和借用.md","06.Rust的引用和借用","/pages/Rust_06/"],["07.Rust的Slice类型.md","07.Rust的切片（Slice）","/pages/Rust_07/"],["08.Rust的结构体类型.md","08.Rust的结构体类型","/pages/Rust_08/"],["09.Rust的结构体的打印与调试.md","09.Rust的结构体的打印与调试","/pages/Rust_09/"],["10.Rust的方法.md","10.Rust的方法","/pages/Rust_10/"],["11.Rust的枚举.md","11.Rust的枚举","/pages/Rust_11/"],["12.Rust的match控制流结构.md","12.Rust的match控制流结构","/pages/Rust_12/"],["13.Rust的语法糖-iflet.md","13.Rust 的语法糖 - if let","/pages/Rust_13/"],["14.Rust的模块系统.md","14.Rust的模块系统","/pages/Rust_14/"],["15.Rust的Vector.md","15.Rust的Vector","/pages/Rust_15/"],["16.Rust的String类型基本原理.md","16.Rust的String类型基本原理","/pages/Rust_16/"],["17.Rust的HashMap.md","17.Rust的HashMap","/pages/Rust_17/"],["18.Rust基础部分的学习总结.md","18.Rust基础部分的学习总结","/pages/Rust_18/"]],"/03.DP/":[["00.深度学习的基本原理.md","00.深度学习的基本原理","/pages/DP_00/"],["01.线性回归.md","01.线性回归","/pages/DP_01/"]]},pageStyle:"line",updateBar:{showToArticle:!1},author:{name:"猎户f",link:"https://github.com/liehuf/"},social:{icons:[{iconClass:"icon-github",title:"GitHub",link:"https://github.com/liehuf"},{iconClass:"icon-youjian",title:"发邮件",link:"mailto:17715076182@163.com"},{iconClass:"icon-csdn",title:"CSDN",link:"https://blog.csdn.net/liehuf"},{iconClass:"icon-zhihu",title:"知乎",link:"https://www.zhihu.com/people/44-97-46-49"}]},footer:{createYear:2025,copyrightInfo:'liehuf | <a href="https://github.com/liehuf/liehuf-notes/blob/main/LICENSE" target="_blank">MIT License</a>'}}};var ul=t(65),cl=t(124),dl=t(125),pl=t(20);var fl={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:r}}=n;return!(e||!1===t||!0===r)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(pl.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(pl.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(pl.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let r=0,i=n.length;r<i;r++){const{frontmatter:{categories:i,tags:o}}=n[r];"array"===Object(pl.n)(i)&&i.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[r]))}),"array"===Object(pl.n)(o)&&o.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[r]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Wt.component(cl.default),Wt.component(dl.default);function hl(n){return n.toString().padStart(2,"0")}t(282);Wt.component("FloatingSocialIcons",()=>Promise.resolve().then(t.bind(null,65))),Wt.component("GiscusComment",()=>t.e(5).then(t.bind(null,416))),Wt.component("Badge",()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,417))),Wt.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,124))),Wt.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,125)));t(283);var ml={props:{color:{required:!1,default:"rgb(66, 185, 131)"}}},gl=(t(284),Object(ol.a)(ml,(function(){return(0,this._self._c)("div",{staticClass:"spinner",style:{background:this.color}})}),[],!1,null,"1bbcb91a",null).exports);const vl={name:"Mermaid",props:{id:{type:String,required:!1,default:()=>"diagram_"+Date.now()},graph:{type:String,required:!1}},data:()=>({svg:void 0}),computed:{graphData(){return this.graph?this.graph:this.$slots.default[0].text}},render(n){return void 0===this.svg?n("Loading"):n("div",{class:["mermaid-diagram"],domProps:{innerHTML:this.svg,style:"width: 100%"}})},mounted(){t.e(52).then(t.t.bind(null,367,7)).then(n=>{n.initialize({startOnLoad:!0}),n.render(this.id,this.graphData,n=>{this.svg=n})})},components:{Loading:gl}};var bl={name:"Eqn"},yl=Object(ol.a)(bl,(function(){return(0,this._self._c)("div",{staticClass:"vuepress-eqn"},[this._t("default")],2)}),[],!1,null,null,null).exports,_l={name:"Eq"},xl=Object(ol.a)(_l,(function(){return(0,this._self._c)("span",{staticClass:"vuepress-eq"},[this._t("default")],2)}),[],!1,null,null,null).exports,wl=[({Vue:n,options:e,router:t,siteData:r})=>{n.component("FloatingSocialIcons",ul.default),n.mixin({mounted(){"undefined"!=typeof window&&this.$nextTick(()=>{this.addFloatingSocialIcons()})},methods:{addFloatingSocialIcons(){if(document.querySelector(".floating-social-icons"))return;const e=document.createElement("div");e.id="floating-social-container";const t=new(n.extend(ul.default));t.$mount(),e.appendChild(t.$el),document.body.appendChild(e)}}})},({Vue:n,options:e,router:t,siteData:r})=>{r.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${hl(n.getUTCMonth()+1)}-${hl(n.getUTCDate())} ${hl(n.getUTCHours())}:${hl(n.getUTCMinutes())}:${hl(n.getUTCSeconds())}`}(e)),t?n.author=t:r.themeConfig.author&&(n.author=r.themeConfig.author)}),n.mixin(fl)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({Vue:n})=>{n.component(vl.name,vl)},({Vue:n})=>{n.component("Eqn",yl),n.component("Eq",xl)}],El=[];class kl extends class{constructor(){this.store=new Wt({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Wt.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(kl.prototype,{getPageAsyncComponent:ss,getLayoutAsyncComponent:ls,getAsyncComponent:us,getVueComponent:cs});var Tl={install(n){const e=new kl;n.$vuepress=e,n.prototype.$vuepress=e}};function Rl(n,e){return n.options.routes.filter(n=>n.path.toLowerCase()===e.toLowerCase()).length>0}var Cl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ps("pageKey",e),Wt.component(e)||Wt.component(e,ss(e)),Wt.component(e)?n(e):n("")}},Sl={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},$l={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Al=(t(285),t(286),Object(ol.a)($l,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Ol={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Wt.config.productionTip=!1,Wt.use(Fa),Wt.use(Tl),Wt.mixin(function(n,e,t=Wt){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const r=new(n(t.$vuepress.$get("siteData"))),i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),o={};return Object.keys(i).reduce((n,e)=>(e.startsWith("$")&&(n[e]=i[e].get),n),o),{computed:o}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},ll)),Wt.component("Content",Cl),Wt.component("ContentSlotsDistributor",Sl),Wt.component("OutboundLink",Al),Wt.component("ClientOnly",Ol),Wt.component("Layout",ls("Layout")),Wt.component("NotFound",ls("NotFound")),Wt.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.8.0",hash:"82232da"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:ll.routerBase||ll.base,t=new Fa({base:e,mode:"history",fallback:!1,routes:sl,scrollBehavior:(n,e,t)=>t||(n.hash?!Wt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(Rl(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";Rl(n,t)?r(t):r()}else r();else{const t=e.path+"/",i=e.path+".html";Rl(n,i)?r(i):Rl(n,t)?r(t):r()}})}(t);const r={};try{await Promise.all(wl.filter(n=>"function"==typeof n).map(e=>e({Vue:Wt,options:r,router:t,siteData:ll,isServer:n})))}catch(n){console.error(n)}return{app:new Wt(Object.assign(r,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},El.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);