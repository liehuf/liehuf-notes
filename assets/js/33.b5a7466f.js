(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{392:function(s,t,a){"use strict";a.r(t);var n=a(16),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"rust-的所有权概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rust-的所有权概念"}},[s._v("#")]),s._v(" Rust 的所有权概念")]),s._v(" "),t("p",[s._v("Rust 使用“所有权”来管理内存，而不是依赖垃圾回收。这套规则由编译器在编译阶段严格检查，并不会影响运行时性能。正确掌握所有权，是掌握 Rust 安全性与效率关键的一步。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"一、栈与堆的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、栈与堆的区别"}},[s._v("#")]),s._v(" 一、栈与堆的区别")]),s._v(" "),t("p",[s._v("要理解所有权机制，需要先理解 "),t("strong",[s._v("栈（stack）和堆（heap）")]),s._v(" 的内存管理方式。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("栈（Stack）")]),s._v(" "),t("ul",[t("li",[s._v("特点：存取速度快，后进先出（LIFO）。")]),s._v(" "),t("li",[s._v("存放：已知大小、固定长度的数据，例如整型、浮点型、布尔值等。")]),s._v(" "),t("li",[s._v("生命周期：作用域结束自动弹出，无需手动管理。")])])]),s._v(" "),t("li",[t("strong",[s._v("堆（Heap）")]),s._v(" "),t("ul",[t("li",[s._v("特点：存取灵活，但分配和回收开销更大。")]),s._v(" "),t("li",[s._v("存放：大小未知或运行期才确定的数据，例如 "),t("code",[s._v("String")]),s._v("、"),t("code",[s._v("Vec")]),s._v("。")]),s._v(" "),t("li",[s._v("生命周期：必须由某个变量持有指针，当所有者离开作用域时，由 Rust 自动释放。")])])])]),s._v(" "),t("p",[s._v("对比示例：")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 存在栈上")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hi"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s 本身在栈上，但它指向堆中的字符串数据")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这里的关键点：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("x")]),s._v(" 是整数，直接放在栈上，访问快，作用域结束就弹出。")]),s._v(" "),t("li",[t("code",[s._v("s")]),s._v(" 是一个三部分组成的结构（指针、长度、容量），它在栈上，但实际的 "),t("code",[s._v('"hi"')]),s._v(" 字符串内容在堆上，释放时 Rust 会自动清理堆内存。")])]),s._v(" "),t("p",[s._v("因此，所有权规则的设计，本质上是为了安全管理堆数据，防止重复释放或悬空指针。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"二、所有权三原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、所有权三原则"}},[s._v("#")]),s._v(" 二、所有权三原则")]),s._v(" "),t("p",[s._v("Rust 的所有权机制围绕三条核心规则：")]),s._v(" "),t("ol",[t("li",[s._v("每一个值都有一个“==所有者==”(owner)。")]),s._v(" "),t("li",[s._v("在同一时间，值只有一个所有者。")]),s._v(" "),t("li",[s._v("当所有者离开作用域，值会被丢弃或者说==自动释放==（drop）。")])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"三、作用域与资源自动释放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、作用域与资源自动释放"}},[s._v("#")]),s._v(" 三、作用域与资源自动释放")]),s._v(" "),t("p",[s._v("作用域决定变量何时“消失”，从而决定资源何时释放，例如：")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s 在此作用域内有效")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 出了作用域，s 被 drop，内存自动释放")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这一行为像是给变量包了自动回收机制，无需显式调用释放函数。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"四、string类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、string类型"}},[s._v("#")]),s._v(" 四、String类型")]),s._v(" "),t("p",[s._v("我们可以通过如下的代码创建一个String。")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello, world!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("通常情况下，计算机不允许一个在运行之前不知道值或者在运行之后值会改变的变量被放到二进制文件之中，所以，我们使用==String==类型。")]),s._v(" "),t("p",[s._v("对于 "),t("code",[s._v("String")]),s._v(" 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：")]),s._v(" "),t("ul",[t("li",[s._v("必须在运行时向内存分配器（memory allocator）请求内存。")]),s._v(" "),t("li",[s._v("需要一个当我们处理完 "),t("code",[s._v("String")]),s._v(" 时将内存返回给分配器的方法。")])]),s._v(" "),t("p",[s._v("前一个部分由程序员自己完成，而后面一个部分，Rust会自己动，就比如：")]),s._v(" "),t("div",{staticClass:"language-rust line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rust"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里s有效    ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这里s就失效了，因为作用域已经结束")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);